
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.17+67 (git sha1 e3f0a808a, gcc 7.5.0-6ubuntu2 -fPIC -Os)


yosys> odin
1. Executing ODIN_II pass.
Using Lut input width of: -1

2. Executing Verilog-2005 frontend: misc/vtr_flow/primitives.v
Parsing Verilog input from `misc/vtr_flow/primitives.v' to AST representation.
Generating RTLIL representation for module `\LUT_K'.
Generating RTLIL representation for module `\DFF'.
Generating RTLIL representation for module `\fpga_interconnect'.
Generating RTLIL representation for module `\mux'.
Generating RTLIL representation for module `\adder'.
Generating RTLIL representation for module `\multiply'.
Generating RTLIL representation for module `\single_port_ram'.
Generating RTLIL representation for module `\dual_port_ram'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: passes/odin/arch_dsp.v
Parsing SystemVerilog input from `passes/odin/arch_dsp.v' to AST representation.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: ../my/arm_core.v
Parsing SystemVerilog input from `../my/arm_core.v' to AST representation.
Warning: Encountered `translate_off' comment! Such legacy hot comments are supported by Yosys, but are not part of any formal language specification. Using a portable and standards-compliant construct such as `ifdef is recommended!
Generating RTLIL representation for module `\single_port_ram_21_8'.
Generating RTLIL representation for module `\single_port_ram_128_8'.
Generating RTLIL representation for module `\a25_icache'.
Warning: wire '\o_stall' is assigned in a block at ../my/arm_core.v:323.2-323.52.
Warning: reg '\read_miss' is assigned in a continuous assignment at ../my/arm_core.v:477.8-477.63.
Generating RTLIL representation for module `\a25_fetch'.
Generating RTLIL representation for module `\a25_decode'.
Generating RTLIL representation for module `\a25_shifter_quick'.
Generating RTLIL representation for module `\a25_shifter_full'.
Generating RTLIL representation for module `\a25_barrel_shift'.
Generating RTLIL representation for module `\a25_register_bank'.
Generating RTLIL representation for module `\a25_multiply'.
Generating RTLIL representation for module `\a25_alu'.
Generating RTLIL representation for module `\a25_execute'.
Generating RTLIL representation for module `\a25_dcache'.
Generating RTLIL representation for module `\a25_mem'.
Generating RTLIL representation for module `\a25_write_back'.
Generating RTLIL representation for module `\a25_wishbone_buf'.
Warning: reg '\push' is assigned in a continuous assignment at ../my/arm_core.v:7201.8-7201.107.
Warning: reg '\pop' is assigned in a continuous assignment at ../my/arm_core.v:7202.8-7202.62.
Generating RTLIL representation for module `\a25_wishbone'.
Generating RTLIL representation for module `\a25_coprocessor'.
Generating RTLIL representation for module `\arm_core'.
Successfully finished Verilog frontend.

5. Executing HIERARCHY pass (managing design hierarchy).

5.1. Finding top of design hierarchy..
root of   3 design levels: arm_core            
root of   0 design levels: a25_coprocessor     
root of   1 design levels: a25_wishbone        
root of   0 design levels: a25_wishbone_buf    
root of   0 design levels: a25_write_back      
root of   2 design levels: a25_mem             
root of   1 design levels: a25_dcache          
root of   2 design levels: a25_execute         
root of   0 design levels: a25_alu             
root of   0 design levels: a25_multiply        
root of   0 design levels: a25_register_bank   
root of   1 design levels: a25_barrel_shift    
root of   0 design levels: a25_shifter_full    
root of   0 design levels: a25_shifter_quick   
root of   0 design levels: a25_decode          
root of   2 design levels: a25_fetch           
root of   1 design levels: a25_icache          
root of   0 design levels: single_port_ram_128_8
root of   0 design levels: single_port_ram_21_8
root of   0 design levels: dual_port_ram       
root of   0 design levels: single_port_ram     
root of   0 design levels: multiply            
root of   0 design levels: adder               
root of   0 design levels: mux                 
root of   0 design levels: fpga_interconnect   
root of   0 design levels: DFF                 
root of   0 design levels: LUT_K               
Automatically selected arm_core as design top module.

5.2. Analyzing design hierarchy..
Top module:  \arm_core
Used module:     \a25_coprocessor
Used module:     \a25_wishbone
Used module:         \a25_wishbone_buf
Used module:     \a25_write_back
Used module:     \a25_mem
Used module:         \a25_dcache
Used module:             \single_port_ram_128_8
Used module:             \single_port_ram_21_8
Used module:     \a25_execute
Used module:         \a25_register_bank
Used module:         \a25_multiply
Used module:         \a25_alu
Used module:         \a25_barrel_shift
Used module:             \a25_shifter_quick
Used module:             \a25_shifter_full
Used module:     \a25_decode
Used module:     \a25_fetch
Used module:         \a25_icache

5.3. Analyzing design hierarchy..
Top module:  \arm_core
Used module:     \a25_coprocessor
Used module:     \a25_wishbone
Used module:         \a25_wishbone_buf
Used module:     \a25_write_back
Used module:     \a25_mem
Used module:         \a25_dcache
Used module:             \single_port_ram_128_8
Used module:             \single_port_ram_21_8
Used module:     \a25_execute
Used module:         \a25_register_bank
Used module:         \a25_multiply
Used module:         \a25_alu
Used module:         \a25_barrel_shift
Used module:             \a25_shifter_quick
Used module:             \a25_shifter_full
Used module:     \a25_decode
Used module:     \a25_fetch
Used module:         \a25_icache
Removing unused module `\dual_port_ram'.
Removing unused module `\single_port_ram'.
Removing unused module `\multiply'.
Removing unused module `\adder'.
Removing unused module `\mux'.
Removing unused module `\fpga_interconnect'.
Removing unused module `\DFF'.
Removing unused module `\LUT_K'.
Removed 8 unused modules.

6. Executing AUTONAME pass.
Renamed 289 objects in module a25_alu (14 iterations).
Renamed 200 objects in module a25_multiply (17 iterations).
Renamed 2746 objects in module a25_register_bank (19 iterations).
Renamed 20 objects in module a25_barrel_shift (7 iterations).
Renamed 17706 objects in module a25_shifter_full (133 iterations).
Renamed 182 objects in module a25_shifter_quick (9 iterations).
Renamed 63552 objects in module a25_decode (107 iterations).
Renamed 1038 objects in module a25_fetch (24 iterations).
Renamed 1304 objects in module a25_icache (39 iterations).
Renamed 2 objects in module single_port_ram_128_8 (3 iterations).
Renamed 2 objects in module single_port_ram_21_8 (3 iterations).
Renamed 10 objects in module arm_core (3 iterations).
Renamed 18 objects in module a25_coprocessor (5 iterations).
Renamed 66 objects in module a25_wishbone (9 iterations).
Renamed 450 objects in module a25_wishbone_buf (21 iterations).
Renamed 2 objects in module a25_write_back (3 iterations).
Renamed 1628 objects in module a25_mem (32 iterations).
Renamed 5270 objects in module a25_dcache (56 iterations).
Renamed 4373 objects in module a25_execute (40 iterations).
<suppressed ~6144 debug messages>

7. Executing PROC pass (convert processes to netlists).

7.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

7.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 5 switch rules as full_case in process $proc$../my/arm_core.v:4458$2478 in module a25_multiply.
Marked 1 switch rules as full_case in process $proc$../my/arm_core.v:4348$2412 in module a25_register_bank.
Marked 1 switch rules as full_case in process $proc$../my/arm_core.v:4322$2411 in module a25_register_bank.
Marked 1 switch rules as full_case in process $proc$../my/arm_core.v:4128$2233 in module a25_register_bank.
Marked 1 switch rules as full_case in process $proc$../my/arm_core.v:3119$1829 in module a25_decode.
Marked 1 switch rules as full_case in process $proc$../my/arm_core.v:3070$1826 in module a25_decode.
Marked 36 switch rules as full_case in process $proc$../my/arm_core.v:2837$1743 in module a25_decode.
Marked 3 switch rules as full_case in process $proc$../my/arm_core.v:2775$1643 in module a25_decode.
Marked 5 switch rules as full_case in process $proc$../my/arm_core.v:2735$1620 in module a25_decode.
Marked 3 switch rules as full_case in process $proc$../my/arm_core.v:2722$1605 in module a25_decode.
Marked 11 switch rules as full_case in process $proc$../my/arm_core.v:2573$1361 in module a25_decode.
Marked 21 switch rules as full_case in process $proc$../my/arm_core.v:2513$1313 in module a25_decode.
Marked 1 switch rules as full_case in process $proc$../my/arm_core.v:2505$1306 in module a25_decode.
Marked 1 switch rules as full_case in process $proc$../my/arm_core.v:2497$1295 in module a25_decode.
Marked 6 switch rules as full_case in process $proc$../my/arm_core.v:2476$1273 in module a25_decode.
Marked 15 switch rules as full_case in process $proc$../my/arm_core.v:2434$1247 in module a25_decode.
Marked 7 switch rules as full_case in process $proc$../my/arm_core.v:2410$1230 in module a25_decode.
Marked 9 switch rules as full_case in process $proc$../my/arm_core.v:2380$1212 in module a25_decode.
Marked 10 switch rules as full_case in process $proc$../my/arm_core.v:2347$1193 in module a25_decode.
Marked 3 switch rules as full_case in process $proc$../my/arm_core.v:2332$1184 in module a25_decode.
Marked 3 switch rules as full_case in process $proc$../my/arm_core.v:2319$1166 in module a25_decode.
Marked 8 switch rules as full_case in process $proc$../my/arm_core.v:2289$1145 in module a25_decode.
Marked 3 switch rules as full_case in process $proc$../my/arm_core.v:2276$1128 in module a25_decode.
Marked 3 switch rules as full_case in process $proc$../my/arm_core.v:2261$1114 in module a25_decode.
Marked 9 switch rules as full_case in process $proc$../my/arm_core.v:2232$1066 in module a25_decode.
Marked 8 switch rules as full_case in process $proc$../my/arm_core.v:2203$1029 in module a25_decode.
Marked 11 switch rules as full_case in process $proc$../my/arm_core.v:2161$1012 in module a25_decode.
Marked 15 switch rules as full_case in process $proc$../my/arm_core.v:2113$956 in module a25_decode.
Marked 6 switch rules as full_case in process $proc$../my/arm_core.v:2089$942 in module a25_decode.
Marked 3 switch rules as full_case in process $proc$../my/arm_core.v:2074$929 in module a25_decode.
Marked 5 switch rules as full_case in process $proc$../my/arm_core.v:2054$913 in module a25_decode.
Marked 5 switch rules as full_case in process $proc$../my/arm_core.v:2032$897 in module a25_decode.
Marked 1 switch rules as full_case in process $proc$../my/arm_core.v:2005$858 in module a25_decode.
Marked 5 switch rules as full_case in process $proc$../my/arm_core.v:1989$839 in module a25_decode.
Marked 9 switch rules as full_case in process $proc$../my/arm_core.v:1958$811 in module a25_decode.
Marked 4 switch rules as full_case in process $proc$../my/arm_core.v:1935$797 in module a25_decode.
Marked 4 switch rules as full_case in process $proc$../my/arm_core.v:1916$777 in module a25_decode.
Marked 7 switch rules as full_case in process $proc$../my/arm_core.v:1891$761 in module a25_decode.
Marked 1 switch rules as full_case in process $proc$../my/arm_core.v:1882$754 in module a25_decode.
Marked 1 switch rules as full_case in process $proc$../my/arm_core.v:1872$748 in module a25_decode.
Marked 3 switch rules as full_case in process $proc$../my/arm_core.v:1853$738 in module a25_decode.
Marked 4 switch rules as full_case in process $proc$../my/arm_core.v:1831$727 in module a25_decode.
Marked 15 switch rules as full_case in process $proc$../my/arm_core.v:1708$651 in module a25_decode.
Marked 15 switch rules as full_case in process $proc$../my/arm_core.v:1670$590 in module a25_decode.
Marked 15 switch rules as full_case in process $proc$../my/arm_core.v:1609$572 in module a25_decode.
Marked 1 switch rules as full_case in process $proc$../my/arm_core.v:439$76 in module a25_icache.
Marked 2 switch rules as full_case in process $proc$../my/arm_core.v:351$68 in module a25_icache.
Marked 2 switch rules as full_case in process $proc$../my/arm_core.v:331$63 in module a25_icache.
Marked 1 switch rules as full_case in process $proc$../my/arm_core.v:58$48 in module single_port_ram_128_8.
Marked 1 switch rules as full_case in process $proc$../my/arm_core.v:24$39 in module single_port_ram_21_8.
Marked 1 switch rules as full_case in process $proc$../my/arm_core.v:7670$3384 in module a25_coprocessor.
Marked 1 switch rules as full_case in process $proc$../my/arm_core.v:7650$3376 in module a25_coprocessor.
Marked 3 switch rules as full_case in process $proc$../my/arm_core.v:7488$3363 in module a25_wishbone.
Marked 1 switch rules as full_case in process $proc$../my/arm_core.v:7274$3341 in module a25_wishbone_buf.
Marked 1 switch rules as full_case in process $proc$../my/arm_core.v:7268$3338 in module a25_wishbone_buf.
Marked 1 switch rules as full_case in process $proc$../my/arm_core.v:7218$3305 in module a25_wishbone_buf.
Marked 1 switch rules as full_case in process $proc$../my/arm_core.v:7212$3299 in module a25_wishbone_buf.
Marked 2 switch rules as full_case in process $proc$../my/arm_core.v:7204$3295 in module a25_wishbone_buf.
Marked 2 switch rules as full_case in process $proc$../my/arm_core.v:6036$2910 in module a25_dcache.
Marked 1 switch rules as full_case in process $proc$../my/arm_core.v:6012$2898 in module a25_dcache.
Marked 6 switch rules as full_case in process $proc$../my/arm_core.v:5854$2878 in module a25_dcache.
Removed a total of 0 dead cases.

7.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 296 assignments to connections.

7.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\a25_multiply.$proc$../my/arm_core.v:4429$2501'.
  Set init value: \product = 68'00000000000000000000000000000000000000000000000000000000000000000000
Found init rule in `\a25_multiply.$proc$../my/arm_core.v:4427$2500'.
  Set init value: \count = 6'000000
Found init rule in `\a25_multiply.$proc$../my/arm_core.v:4419$2499'.
  Set init value: \o_done = 1'0
Found init rule in `\a25_register_bank.$proc$../my/arm_core.v:4095$2469'.
  Set init value: \r14_firq = 32'11011110101011011011111011101111
Found init rule in `\a25_register_bank.$proc$../my/arm_core.v:4094$2468'.
  Set init value: \r13_firq = 32'11011110101011011011111011101111
Found init rule in `\a25_register_bank.$proc$../my/arm_core.v:4093$2467'.
  Set init value: \r12_firq = 32'11011110101011011011111011101111
Found init rule in `\a25_register_bank.$proc$../my/arm_core.v:4092$2466'.
  Set init value: \r11_firq = 32'11011110101011011011111011101111
Found init rule in `\a25_register_bank.$proc$../my/arm_core.v:4091$2465'.
  Set init value: \r10_firq = 32'11011110101011011011111011101111
Found init rule in `\a25_register_bank.$proc$../my/arm_core.v:4090$2464'.
  Set init value: \r9_firq = 32'11011110101011011011111011101111
Found init rule in `\a25_register_bank.$proc$../my/arm_core.v:4089$2463'.
  Set init value: \r8_firq = 32'11011110101011011011111011101111
Found init rule in `\a25_register_bank.$proc$../my/arm_core.v:4086$2462'.
  Set init value: \r14_irq = 32'11011110101011011011111011101111
Found init rule in `\a25_register_bank.$proc$../my/arm_core.v:4085$2461'.
  Set init value: \r13_irq = 32'11011110101011011011111011101111
Found init rule in `\a25_register_bank.$proc$../my/arm_core.v:4082$2460'.
  Set init value: \r14_svc = 32'11011110101011011011111011101111
Found init rule in `\a25_register_bank.$proc$../my/arm_core.v:4081$2459'.
  Set init value: \r13_svc = 32'11011110101011011011111011101111
Found init rule in `\a25_register_bank.$proc$../my/arm_core.v:4051$2458'.
  Set init value: \r15 = 24'110000001111111111101110
Found init rule in `\a25_register_bank.$proc$../my/arm_core.v:4050$2457'.
  Set init value: \r14 = 32'11011110101011011011111011101111
Found init rule in `\a25_register_bank.$proc$../my/arm_core.v:4049$2456'.
  Set init value: \r13 = 32'11011110101011011011111011101111
Found init rule in `\a25_register_bank.$proc$../my/arm_core.v:4048$2455'.
  Set init value: \r12 = 32'11011110101011011011111011101111
Found init rule in `\a25_register_bank.$proc$../my/arm_core.v:4047$2454'.
  Set init value: \r11 = 32'11011110101011011011111011101111
Found init rule in `\a25_register_bank.$proc$../my/arm_core.v:4046$2453'.
  Set init value: \r10 = 32'11011110101011011011111011101111
Found init rule in `\a25_register_bank.$proc$../my/arm_core.v:4045$2452'.
  Set init value: \r9 = 32'11011110101011011011111011101111
Found init rule in `\a25_register_bank.$proc$../my/arm_core.v:4044$2451'.
  Set init value: \r8 = 32'11011110101011011011111011101111
Found init rule in `\a25_register_bank.$proc$../my/arm_core.v:4043$2450'.
  Set init value: \r7 = 32'11011110101011011011111011101111
Found init rule in `\a25_register_bank.$proc$../my/arm_core.v:4042$2449'.
  Set init value: \r6 = 32'11011110101011011011111011101111
Found init rule in `\a25_register_bank.$proc$../my/arm_core.v:4041$2448'.
  Set init value: \r5 = 32'11011110101011011011111011101111
Found init rule in `\a25_register_bank.$proc$../my/arm_core.v:4040$2447'.
  Set init value: \r4 = 32'11011110101011011011111011101111
Found init rule in `\a25_register_bank.$proc$../my/arm_core.v:4039$2446'.
  Set init value: \r3 = 32'11011110101011011011111011101111
Found init rule in `\a25_register_bank.$proc$../my/arm_core.v:4038$2445'.
  Set init value: \r2 = 32'11011110101011011011111011101111
Found init rule in `\a25_register_bank.$proc$../my/arm_core.v:4037$2444'.
  Set init value: \r1 = 32'11011110101011011011111011101111
Found init rule in `\a25_register_bank.$proc$../my/arm_core.v:4036$2443'.
  Set init value: \r0 = 32'11011110101011011011111011101111
Found init rule in `\a25_barrel_shift.$proc$../my/arm_core.v:3789$2225'.
  Set init value: \use_quick_r = 1'1
Found init rule in `\a25_barrel_shift.$proc$../my/arm_core.v:3788$2224'.
  Set init value: \full_carry_out_r = 1'0
Found init rule in `\a25_barrel_shift.$proc$../my/arm_core.v:3787$2223'.
  Set init value: \full_out_r = 0
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1372$1912'.
  Set init value: \rd_conflict1_r = 1'0
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1371$1911'.
  Set init value: \rs_conflict1_r = 1'0
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1370$1910'.
  Set init value: \rm_conflict1_r = 1'0
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1369$1909'.
  Set init value: \rn_conflict1_r = 1'0
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1368$1908'.
  Set init value: \conflict_r = 1'0
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1346$1907'.
  Set init value: \load_rd_d1 = 7'0000000
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1335$1906'.
  Set init value: \restore_base_address = 1'0
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1328$1905'.
  Set init value: \firq = 1'0
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1327$1904'.
  Set init value: \irq = 1'0
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1311$1903'.
  Set init value: \instruction_execute_r = 1'0
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1307$1902'.
  Set init value: \hold_instruction_iabt_status = 8'00000000
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1306$1901'.
  Set init value: \hold_instruction_address = 0
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1305$1900'.
  Set init value: \hold_instruction_adex = 1'0
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1304$1899'.
  Set init value: \hold_instruction_iabt = 1'0
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1303$1898'.
  Set init value: \hold_instruction_type = 4'0000
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1302$1897'.
  Set init value: \hold_instruction = 0
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1301$1896'.
  Set init value: \pre_fetch_instruction_iabt_status = 8'00000000
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1300$1895'.
  Set init value: \pre_fetch_instruction_address = 0
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1299$1894'.
  Set init value: \pre_fetch_instruction_adex = 1'0
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1298$1893'.
  Set init value: \pre_fetch_instruction_iabt = 1'0
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1297$1892'.
  Set init value: \pre_fetch_instruction_type = 4'0000
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1296$1891'.
  Set init value: \pre_fetch_instruction = 0
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1295$1890'.
  Set init value: \saved_current_instruction_iabt_status = 8'00000000
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1294$1889'.
  Set init value: \saved_current_instruction_address = 0
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1293$1888'.
  Set init value: \saved_current_instruction_adex = 1'0
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1292$1887'.
  Set init value: \saved_current_instruction_iabt = 1'0
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1291$1886'.
  Set init value: \saved_current_instruction_type = 4'0000
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1290$1885'.
  Set init value: \saved_current_instruction = 0
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1289$1884'.
  Set init value: \fetch_instruction_type_r = 4'0000
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1288$1883'.
  Set init value: \fetch_instruction_r = 0
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1287$1882'.
  Set init value: \abt_status_reg = 8'00000000
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1286$1881'.
  Set init value: \fetch_address_r = 0
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1285$1880'.
  Set init value: \adex_reg = 1'0
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1284$1879'.
  Set init value: \iabt_reg = 1'0
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1282$1878'.
  Set init value: \dabt_reg = 1'0
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1277$1877'.
  Set init value: \control_state = 5'00000
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1220$1876'.
  Set init value: \load_pc_r = 1'0
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1087$1875'.
  Set init value: \o_copro_write_data_wen = 1'0
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1084$1874'.
  Set init value: \o_copro_operation = 2'00
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1083$1873'.
  Set init value: \o_copro_num = 4'0000
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1082$1872'.
  Set init value: \o_copro_crm = 4'0000
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1081$1871'.
  Set init value: \o_copro_crn = 4'0000
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1080$1870'.
  Set init value: \o_copro_opcode2 = 3'000
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1079$1869'.
  Set init value: \o_copro_opcode1 = 3'000
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1074$1868'.
  Set init value: \o_status_bits_firq_mask_wen = 1'0
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1073$1867'.
  Set init value: \o_status_bits_irq_mask_wen = 1'0
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1072$1866'.
  Set init value: \o_status_bits_mode_wen = 1'0
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1071$1865'.
  Set init value: \o_status_bits_flags_wen = 1'0
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1070$1864'.
  Set init value: \o_reg_bank_wen = 15'000000000000000
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1069$1863'.
  Set init value: \o_pc_wen = 1'1
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1067$1862'.
  Set init value: \o_base_address_wen = 1'0
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1066$1861'.
  Set init value: \o_write_data_wen = 1'0
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1061$1860'.
  Set init value: \o_status_bits_sel = 3'000
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1060$1859'.
  Set init value: \o_byte_enable_sel = 2'00
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1059$1858'.
  Set init value: \o_pc_sel = 3'010
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1058$1857'.
  Set init value: \o_daddress_sel = 4'0010
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1057$1856'.
  Set init value: \o_iaddress_sel = 4'0010
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1056$1855'.
  Set init value: \o_interrupt_vector_sel = 3'000
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1055$1854'.
  Set init value: \o_multiply_function = 2'00
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1054$1853'.
  Set init value: \o_alu_function = 9'000000000
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1053$1852'.
  Set init value: \o_barrel_shift_function = 2'00
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1052$1851'.
  Set init value: \o_barrel_shift_data_sel = 2'00
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1051$1850'.
  Set init value: \o_barrel_shift_amount_sel = 2'00
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1050$1849'.
  Set init value: \o_rn_sel = 4'0000
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1048$1848'.
  Set init value: \o_load_rd = 8'00000000
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1047$1847'.
  Set init value: \o_rs_sel = 4'0000
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1046$1846'.
  Set init value: \o_rm_sel = 4'0000
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1044$1845'.
  Set init value: \o_status_bits_firq_mask = 1'1
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1043$1844'.
  Set init value: \o_status_bits_irq_mask = 1'1
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1042$1843'.
  Set init value: \o_status_bits_mode = 2'11
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1041$1842'.
  Set init value: \o_decode_daccess = 1'0
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1040$1841'.
  Set init value: \o_decode_iaccess = 1'1
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1039$1840'.
  Set init value: \o_decode_exclusive = 1'0
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1038$1839'.
  Set init value: \o_condition = 4'1110
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1037$1838'.
  Set init value: \o_shift_imm_zero = 1'0
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1036$1837'.
  Set init value: \o_imm_shift_amount = 5'00000
Found init rule in `\a25_decode.$proc$../my/arm_core.v:1035$1836'.
  Set init value: \o_imm32 = 0
Found init rule in `\a25_fetch.$proc$../my/arm_core.v:737$291'.
  Set init value: \wb_req_r = 1'0
Found init rule in `\a25_icache.$proc$../my/arm_core.v:288$180'.
  Set init value: \wb_address = 0
Found init rule in `\a25_icache.$proc$../my/arm_core.v:286$179'.
  Set init value: \address_r = 0
Found init rule in `\a25_icache.$proc$../my/arm_core.v:277$178'.
  Set init value: \miss_address = 0
Found init rule in `\a25_icache.$proc$../my/arm_core.v:262$177'.
  Set init value: \random_num = 4'1111
Found init rule in `\a25_icache.$proc$../my/arm_core.v:260$176'.
  Set init value: \valid_bits_r = 4'0000
Found init rule in `\a25_icache.$proc$../my/arm_core.v:258$175'.
  Set init value: \select_way = 4'0000
Found init rule in `\a25_icache.$proc$../my/arm_core.v:245$174'.
  Set init value: \init_count = 9'000000000
Found init rule in `\a25_icache.$proc$../my/arm_core.v:244$173'.
  Set init value: \source_sel = 4'0010
Found init rule in `\a25_icache.$proc$../my/arm_core.v:243$172'.
  Set init value: \c_state = 4'0001
Found init rule in `\a25_coprocessor.$proc$../my/arm_core.v:7620$3391'.
  Set init value: \fault_address = 0
Found init rule in `\a25_coprocessor.$proc$../my/arm_core.v:7619$3390'.
  Set init value: \fault_status = 8'00000000
Found init rule in `\a25_coprocessor.$proc$../my/arm_core.v:7616$3389'.
  Set init value: \disruptive_area = 0
Found init rule in `\a25_coprocessor.$proc$../my/arm_core.v:7610$3388'.
  Set init value: \updateable_area = 0
Found init rule in `\a25_coprocessor.$proc$../my/arm_core.v:7605$3387'.
  Set init value: \cacheable_area = 0
Found init rule in `\a25_coprocessor.$proc$../my/arm_core.v:7601$3386'.
  Set init value: \cache_control = 3'000
Found init rule in `\a25_wishbone.$proc$../my/arm_core.v:7397$3373'.
  Set init value: \serving_port = 3'000
Found init rule in `\a25_wishbone.$proc$../my/arm_core.v:7379$3372'.
  Set init value: \o_wb_stb = 1'0
Found init rule in `\a25_wishbone.$proc$../my/arm_core.v:7378$3371'.
  Set init value: \o_wb_cyc = 1'0
Found init rule in `\a25_wishbone.$proc$../my/arm_core.v:7377$3370'.
  Set init value: \o_wb_dat = 128'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
Found init rule in `\a25_wishbone.$proc$../my/arm_core.v:7376$3369'.
  Set init value: \o_wb_we = 1'0
Found init rule in `\a25_wishbone.$proc$../my/arm_core.v:7375$3368'.
  Set init value: \o_wb_sel = 16'0000000000000000
Found init rule in `\a25_wishbone.$proc$../my/arm_core.v:7374$3367'.
  Set init value: \o_wb_adr = 0
Found init rule in `\a25_wishbone_buf.$proc$../my/arm_core.v:7193$3351'.
  Set init value: \ack_owed_r = 1'0
Found init rule in `\a25_wishbone_buf.$proc$../my/arm_core.v:7191$3350'.
  Set init value: \wait_rdata_valid_r = 1'0
Found init rule in `\a25_wishbone_buf.$proc$../my/arm_core.v:7190$3349'.
  Set init value: \busy_reading_r = 1'0
Found init rule in `\a25_wishbone_buf.$proc$../my/arm_core.v:7189$3348'.
  Set init value: \wbuf_rp_r = 1'0
Found init rule in `\a25_wishbone_buf.$proc$../my/arm_core.v:7188$3347'.
  Set init value: \wbuf_wp_r = 1'0
Found init rule in `\a25_wishbone_buf.$proc$../my/arm_core.v:7187$3346'.
  Set init value: \wbuf_write_r = 2'00
Found init rule in `\a25_wishbone_buf.$proc$../my/arm_core.v:7177$3345'.
  Set init value: \wbuf_used_r = 2'00
Found init rule in `\a25_write_back.$proc$../my/arm_core.v:7102$3282'.
  Set init value: \mem_load_rd_r = 11'00000000000
Found init rule in `\a25_write_back.$proc$../my/arm_core.v:7101$3281'.
  Set init value: \mem_read_data_valid_r = 1'0
Found init rule in `\a25_write_back.$proc$../my/arm_core.v:7100$3280'.
  Set init value: \mem_read_data_r = 0
Found init rule in `\a25_mem.$proc$../my/arm_core.v:6787$3277'.
  Set init value: \daddress_valid_stop_r = 1'0
Found init rule in `\a25_mem.$proc$../my/arm_core.v:6783$3276'.
  Set init value: \fetch_only_stall_r = 1'0
Found init rule in `\a25_mem.$proc$../my/arm_core.v:6781$3275'.
  Set init value: \mem_stall_r = 1'0
Found init rule in `\a25_mem.$proc$../my/arm_core.v:6777$3274'.
  Set init value: \mem_load_rd_r = 11'00000000000
Found init rule in `\a25_mem.$proc$../my/arm_core.v:6776$3273'.
  Set init value: \mem_read_data_valid_r = 1'0
Found init rule in `\a25_mem.$proc$../my/arm_core.v:6775$3272'.
  Set init value: \mem_read_data_r = 0
Found init rule in `\a25_mem.$proc$../my/arm_core.v:6773$3271'.
  Set init value: \cached_wb_stop_r = 1'0
Found init rule in `\a25_mem.$proc$../my/arm_core.v:6772$3270'.
  Set init value: \uncached_wb_stop_r = 1'0
Found init rule in `\a25_mem.$proc$../my/arm_core.v:6771$3269'.
  Set init value: \uncached_wb_req_r = 1'0
Found init rule in `\a25_dcache.$proc$../my/arm_core.v:5810$3116'.
  Set init value: \wb_address = 0
Found init rule in `\a25_dcache.$proc$../my/arm_core.v:5805$3115'.
  Set init value: \ex_read_hit_way = 4'0000
Found init rule in `\a25_dcache.$proc$../my/arm_core.v:5804$3114'.
  Set init value: \ex_read_hit_r = 1'0
Found init rule in `\a25_dcache.$proc$../my/arm_core.v:5800$3113'.
  Set init value: \wb_rdata_burst = 128'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
Found init rule in `\a25_dcache.$proc$../my/arm_core.v:5798$3112'.
  Set init value: \request_r = 1'0
Found init rule in `\a25_dcache.$proc$../my/arm_core.v:5787$3111'.
  Set init value: \miss_address = 0
Found init rule in `\a25_dcache.$proc$../my/arm_core.v:5774$3110'.
  Set init value: \data_wdata_r = 128'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
Found init rule in `\a25_dcache.$proc$../my/arm_core.v:5766$3109'.
  Set init value: \random_num = 4'1111
Found init rule in `\a25_dcache.$proc$../my/arm_core.v:5764$3108'.
  Set init value: \valid_bits_r = 4'0000
Found init rule in `\a25_dcache.$proc$../my/arm_core.v:5762$3107'.
  Set init value: \select_way = 4'0000
Found init rule in `\a25_dcache.$proc$../my/arm_core.v:5760$3106'.
  Set init value: \data_hit_way_r = 4'0000
Found init rule in `\a25_dcache.$proc$../my/arm_core.v:5748$3105'.
  Set init value: \init_count = 9'000000000
Found init rule in `\a25_dcache.$proc$../my/arm_core.v:5747$3104'.
  Set init value: \source_sel = 4'0010
Found init rule in `\a25_dcache.$proc$../my/arm_core.v:5745$3103'.
  Set init value: \c_state = 4'0001
Found init rule in `\a25_execute.$proc$../my/arm_core.v:4952$2858'.
  Set init value: \load_rd_r = 4'0000
Found init rule in `\a25_execute.$proc$../my/arm_core.v:4951$2857'.
  Set init value: \read_data_filtered_r = 0
Found init rule in `\a25_execute.$proc$../my/arm_core.v:4946$2856'.
  Set init value: \base_address = 0
Found init rule in `\a25_execute.$proc$../my/arm_core.v:4937$2855'.
  Set init value: \status_bits_firq_mask = 1'1
Found init rule in `\a25_execute.$proc$../my/arm_core.v:4935$2854'.
  Set init value: \status_bits_irq_mask = 1'1
Found init rule in `\a25_execute.$proc$../my/arm_core.v:4932$2853'.
  Set init value: \status_bits_mode_rds_oh = 4'1000
Found init rule in `\a25_execute.$proc$../my/arm_core.v:4927$2852'.
  Set init value: \status_bits_mode = 2'11
Found init rule in `\a25_execute.$proc$../my/arm_core.v:4925$2851'.
  Set init value: \status_bits_flags = 4'0000
Found init rule in `\a25_execute.$proc$../my/arm_core.v:4892$2850'.
  Set init value: \o_exec_load_rd = 9'000000000
Found init rule in `\a25_execute.$proc$../my/arm_core.v:4891$2849'.
  Set init value: \o_byte_enable = 4'0000
Found init rule in `\a25_execute.$proc$../my/arm_core.v:4890$2848'.
  Set init value: \o_write_enable = 1'0
Found init rule in `\a25_execute.$proc$../my/arm_core.v:4889$2847'.
  Set init value: \o_exclusive = 1'0
Found init rule in `\a25_execute.$proc$../my/arm_core.v:4888$2846'.
  Set init value: \o_priviledged = 1'0
Found init rule in `\a25_execute.$proc$../my/arm_core.v:4887$2845'.
  Set init value: \o_adex = 1'0
Found init rule in `\a25_execute.$proc$../my/arm_core.v:4886$2844'.
  Set init value: \o_daddress_valid = 1'0
Found init rule in `\a25_execute.$proc$../my/arm_core.v:4884$2843'.
  Set init value: \o_daddress = 0
Found init rule in `\a25_execute.$proc$../my/arm_core.v:4883$2842'.
  Set init value: \o_iaddress_valid = 1'0
Found init rule in `\a25_execute.$proc$../my/arm_core.v:4881$2841'.
  Set init value: \o_iaddress = 32'11011110101011011101111010101101
Found init rule in `\a25_execute.$proc$../my/arm_core.v:4880$2840'.
  Set init value: \o_write_data = 0
Found init rule in `\a25_execute.$proc$../my/arm_core.v:4879$2839'.
  Set init value: \o_copro_write_data = 0

7.5. Executing PROC_ARST pass (detect async resets in processes).

7.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\a25_multiply.$proc$../my/arm_core.v:4429$2501'.
Creating decoders for process `\a25_multiply.$proc$../my/arm_core.v:4427$2500'.
Creating decoders for process `\a25_multiply.$proc$../my/arm_core.v:4419$2499'.
Creating decoders for process `\a25_multiply.$proc$../my/arm_core.v:4494$2493'.
     1/3: $0\product[67:0]
     2/3: $0\count[5:0]
     3/3: $0\o_done[0:0]
Creating decoders for process `\a25_multiply.$proc$../my/arm_core.v:4458$2478'.
     1/5: $2\count_nxt[5:0]
     2/5: $1\count_nxt[5:0]
     3/5: $3\product_nxt[67:0]
     4/5: $2\product_nxt[67:0]
     5/5: $1\product_nxt[67:0]
Creating decoders for process `\a25_register_bank.$proc$../my/arm_core.v:4095$2469'.
Creating decoders for process `\a25_register_bank.$proc$../my/arm_core.v:4094$2468'.
Creating decoders for process `\a25_register_bank.$proc$../my/arm_core.v:4093$2467'.
Creating decoders for process `\a25_register_bank.$proc$../my/arm_core.v:4092$2466'.
Creating decoders for process `\a25_register_bank.$proc$../my/arm_core.v:4091$2465'.
Creating decoders for process `\a25_register_bank.$proc$../my/arm_core.v:4090$2464'.
Creating decoders for process `\a25_register_bank.$proc$../my/arm_core.v:4089$2463'.
Creating decoders for process `\a25_register_bank.$proc$../my/arm_core.v:4086$2462'.
Creating decoders for process `\a25_register_bank.$proc$../my/arm_core.v:4085$2461'.
Creating decoders for process `\a25_register_bank.$proc$../my/arm_core.v:4082$2460'.
Creating decoders for process `\a25_register_bank.$proc$../my/arm_core.v:4081$2459'.
Creating decoders for process `\a25_register_bank.$proc$../my/arm_core.v:4051$2458'.
Creating decoders for process `\a25_register_bank.$proc$../my/arm_core.v:4050$2457'.
Creating decoders for process `\a25_register_bank.$proc$../my/arm_core.v:4049$2456'.
Creating decoders for process `\a25_register_bank.$proc$../my/arm_core.v:4048$2455'.
Creating decoders for process `\a25_register_bank.$proc$../my/arm_core.v:4047$2454'.
Creating decoders for process `\a25_register_bank.$proc$../my/arm_core.v:4046$2453'.
Creating decoders for process `\a25_register_bank.$proc$../my/arm_core.v:4045$2452'.
Creating decoders for process `\a25_register_bank.$proc$../my/arm_core.v:4044$2451'.
Creating decoders for process `\a25_register_bank.$proc$../my/arm_core.v:4043$2450'.
Creating decoders for process `\a25_register_bank.$proc$../my/arm_core.v:4042$2449'.
Creating decoders for process `\a25_register_bank.$proc$../my/arm_core.v:4041$2448'.
Creating decoders for process `\a25_register_bank.$proc$../my/arm_core.v:4040$2447'.
Creating decoders for process `\a25_register_bank.$proc$../my/arm_core.v:4039$2446'.
Creating decoders for process `\a25_register_bank.$proc$../my/arm_core.v:4038$2445'.
Creating decoders for process `\a25_register_bank.$proc$../my/arm_core.v:4037$2444'.
Creating decoders for process `\a25_register_bank.$proc$../my/arm_core.v:4036$2443'.
Creating decoders for process `\a25_register_bank.$proc$../my/arm_core.v:4348$2412'.
     1/1: $1\o_rd[31:0]
Creating decoders for process `\a25_register_bank.$proc$../my/arm_core.v:4322$2411'.
     1/1: $1\o_rs[31:0]
Creating decoders for process `\a25_register_bank.$proc$../my/arm_core.v:4183$2245'.
Creating decoders for process `\a25_register_bank.$proc$../my/arm_core.v:4128$2233'.
     1/1: $1\decode[14:0]
Creating decoders for process `\a25_barrel_shift.$proc$../my/arm_core.v:3789$2225'.
Creating decoders for process `\a25_barrel_shift.$proc$../my/arm_core.v:3788$2224'.
Creating decoders for process `\a25_barrel_shift.$proc$../my/arm_core.v:3787$2223'.
Creating decoders for process `\a25_barrel_shift.$proc$../my/arm_core.v:3799$2221'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1372$1912'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1371$1911'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1370$1910'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1369$1909'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1368$1908'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1346$1907'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1335$1906'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1328$1905'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1327$1904'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1311$1903'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1307$1902'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1306$1901'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1305$1900'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1304$1899'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1303$1898'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1302$1897'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1301$1896'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1300$1895'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1299$1894'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1298$1893'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1297$1892'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1296$1891'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1295$1890'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1294$1889'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1293$1888'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1292$1887'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1291$1886'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1290$1885'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1289$1884'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1288$1883'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1287$1882'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1286$1881'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1285$1880'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1284$1879'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1282$1878'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1277$1877'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1220$1876'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1087$1875'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1084$1874'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1083$1873'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1082$1872'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1081$1871'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1080$1870'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1079$1869'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1074$1868'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1073$1867'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1072$1866'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1071$1865'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1070$1864'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1069$1863'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1067$1862'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1066$1861'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1061$1860'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1060$1859'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1059$1858'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1058$1857'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1057$1856'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1056$1855'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1055$1854'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1054$1853'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1053$1852'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1052$1851'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1051$1850'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1050$1849'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1048$1848'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1047$1847'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1046$1846'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1044$1845'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1043$1844'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1042$1843'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1041$1842'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1040$1841'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1039$1840'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1038$1839'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1037$1838'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1036$1837'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1035$1836'.
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:3119$1829'.
     1/4: $0\firq[0:0]
     2/4: $0\irq[0:0]
     3/4: $0\dabt_reg_d1[0:0]
     4/4: $0\dabt_reg[0:0]
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:3070$1826'.
     1/18: $0\hold_instruction_iabt_status[7:0]
     2/18: $0\hold_instruction_address[31:0]
     3/18: $0\hold_instruction_adex[0:0]
     4/18: $0\hold_instruction_iabt[0:0]
     5/18: $0\hold_instruction_type[3:0]
     6/18: $0\hold_instruction[31:0]
     7/18: $0\pre_fetch_instruction_iabt_status[7:0]
     8/18: $0\pre_fetch_instruction_address[31:0]
     9/18: $0\pre_fetch_instruction_adex[0:0]
    10/18: $0\pre_fetch_instruction_iabt[0:0]
    11/18: $0\pre_fetch_instruction_type[3:0]
    12/18: $0\pre_fetch_instruction[31:0]
    13/18: $0\saved_current_instruction_iabt_status[7:0]
    14/18: $0\saved_current_instruction_address[31:0]
    15/18: $0\saved_current_instruction_adex[0:0]
    16/18: $0\saved_current_instruction_iabt[0:0]
    17/18: $0\saved_current_instruction_type[3:0]
    18/18: $0\saved_current_instruction[31:0]
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
     1/52: $0\load_rd_d1[6:0]
     2/52: $0\restore_base_address[0:0]
     3/52: $0\fetch_instruction_type_r[3:0]
     4/52: $0\fetch_instruction_r[31:0]
     5/52: $0\abt_status_reg[7:0]
     6/52: $0\fetch_address_r[31:0]
     7/52: $0\adex_reg[0:0]
     8/52: $0\iabt_reg[0:0]
     9/52: $0\control_state[4:0]
    10/52: $0\load_pc_r[0:0]
    11/52: $0\o_copro_write_data_wen[0:0]
    12/52: $0\o_copro_operation[1:0]
    13/52: $0\o_copro_num[3:0]
    14/52: $0\o_copro_crm[3:0]
    15/52: $0\o_copro_crn[3:0]
    16/52: $0\o_copro_opcode2[2:0]
    17/52: $0\o_copro_opcode1[2:0]
    18/52: $0\o_status_bits_firq_mask_wen[0:0]
    19/52: $0\o_status_bits_irq_mask_wen[0:0]
    20/52: $0\o_status_bits_mode_wen[0:0]
    21/52: $0\o_status_bits_flags_wen[0:0]
    22/52: $0\o_reg_bank_wen[14:0]
    23/52: $0\o_pc_wen[0:0]
    24/52: $0\o_base_address_wen[0:0]
    25/52: $0\o_write_data_wen[0:0]
    26/52: $0\o_firq_not_user_mode[0:0]
    27/52: $0\o_reg_write_sel[2:0]
    28/52: $0\o_status_bits_sel[2:0]
    29/52: $0\o_byte_enable_sel[1:0]
    30/52: $0\o_pc_sel[2:0]
    31/52: $0\o_daddress_sel[3:0]
    32/52: $0\o_iaddress_sel[3:0]
    33/52: $0\o_interrupt_vector_sel[2:0]
    34/52: $0\o_multiply_function[1:0]
    35/52: $0\o_alu_function[8:0]
    36/52: $0\o_barrel_shift_function[1:0]
    37/52: $0\o_barrel_shift_data_sel[1:0]
    38/52: $0\o_barrel_shift_amount_sel[1:0]
    39/52: $0\o_rn_sel[3:0]
    40/52: $0\o_load_rd[7:0]
    41/52: $0\o_rs_sel[3:0]
    42/52: $0\o_rm_sel[3:0]
    43/52: $0\o_status_bits_firq_mask[0:0]
    44/52: $0\o_status_bits_irq_mask[0:0]
    45/52: $0\o_status_bits_mode[1:0]
    46/52: $0\o_decode_daccess[0:0]
    47/52: $0\o_decode_iaccess[0:0]
    48/52: $0\o_decode_exclusive[0:0]
    49/52: $0\o_condition[3:0]
    50/52: $0\o_shift_imm_zero[0:0]
    51/52: $0\o_imm_shift_amount[4:0]
    52/52: $0\o_imm32[31:0]
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:2837$1743'.
     1/36: $36\control_state_nxt[4:0]
     2/36: $35\control_state_nxt[4:0]
     3/36: $34\control_state_nxt[4:0]
     4/36: $33\control_state_nxt[4:0]
     5/36: $32\control_state_nxt[4:0]
     6/36: $31\control_state_nxt[4:0]
     7/36: $30\control_state_nxt[4:0]
     8/36: $29\control_state_nxt[4:0]
     9/36: $28\control_state_nxt[4:0]
    10/36: $27\control_state_nxt[4:0]
    11/36: $26\control_state_nxt[4:0]
    12/36: $25\control_state_nxt[4:0]
    13/36: $24\control_state_nxt[4:0]
    14/36: $23\control_state_nxt[4:0]
    15/36: $22\control_state_nxt[4:0]
    16/36: $21\control_state_nxt[4:0]
    17/36: $20\control_state_nxt[4:0]
    18/36: $19\control_state_nxt[4:0]
    19/36: $18\control_state_nxt[4:0]
    20/36: $17\control_state_nxt[4:0]
    21/36: $16\control_state_nxt[4:0]
    22/36: $15\control_state_nxt[4:0]
    23/36: $14\control_state_nxt[4:0]
    24/36: $13\control_state_nxt[4:0]
    25/36: $12\control_state_nxt[4:0]
    26/36: $11\control_state_nxt[4:0]
    27/36: $10\control_state_nxt[4:0]
    28/36: $9\control_state_nxt[4:0]
    29/36: $8\control_state_nxt[4:0]
    30/36: $7\control_state_nxt[4:0]
    31/36: $6\control_state_nxt[4:0]
    32/36: $5\control_state_nxt[4:0]
    33/36: $4\control_state_nxt[4:0]
    34/36: $3\control_state_nxt[4:0]
    35/36: $2\control_state_nxt[4:0]
    36/36: $1\control_state_nxt[4:0]
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:2775$1643'.
     1/3: $3\status_bits_firq_mask_wen_nxt[0:0]
     2/3: $2\status_bits_firq_mask_wen_nxt[0:0]
     3/3: $1\status_bits_firq_mask_wen_nxt[0:0]
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:2735$1620'.
     1/10: $5\status_bits_irq_mask_wen_nxt[0:0]
     2/10: $5\status_bits_mode_wen_nxt[0:0]
     3/10: $4\status_bits_irq_mask_wen_nxt[0:0]
     4/10: $4\status_bits_mode_wen_nxt[0:0]
     5/10: $3\status_bits_irq_mask_wen_nxt[0:0]
     6/10: $3\status_bits_mode_wen_nxt[0:0]
     7/10: $2\status_bits_irq_mask_wen_nxt[0:0]
     8/10: $2\status_bits_mode_wen_nxt[0:0]
     9/10: $1\status_bits_irq_mask_wen_nxt[0:0]
    10/10: $1\status_bits_mode_wen_nxt[0:0]
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:2722$1605'.
     1/3: $3\status_bits_flags_wen_nxt[0:0]
     2/3: $2\status_bits_flags_wen_nxt[0:0]
     3/3: $1\status_bits_flags_wen_nxt[0:0]
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:2573$1361'.
     1/11: $11\reg_bank_wen_nxt[14:0]
     2/11: $10\reg_bank_wen_nxt[14:0]
     3/11: $9\reg_bank_wen_nxt[14:0]
     4/11: $8\reg_bank_wen_nxt[14:0]
     5/11: $7\reg_bank_wen_nxt[14:0]
     6/11: $6\reg_bank_wen_nxt[14:0]
     7/11: $5\reg_bank_wen_nxt[14:0]
     8/11: $4\reg_bank_wen_nxt[14:0]
     9/11: $3\reg_bank_wen_nxt[14:0]
    10/11: $2\reg_bank_wen_nxt[14:0]
    11/11: $1\reg_bank_wen_nxt[14:0]
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:2513$1313'.
     1/21: $21\pc_wen_nxt[0:0]
     2/21: $20\pc_wen_nxt[0:0]
     3/21: $19\pc_wen_nxt[0:0]
     4/21: $18\pc_wen_nxt[0:0]
     5/21: $17\pc_wen_nxt[0:0]
     6/21: $16\pc_wen_nxt[0:0]
     7/21: $15\pc_wen_nxt[0:0]
     8/21: $14\pc_wen_nxt[0:0]
     9/21: $13\pc_wen_nxt[0:0]
    10/21: $12\pc_wen_nxt[0:0]
    11/21: $11\pc_wen_nxt[0:0]
    12/21: $10\pc_wen_nxt[0:0]
    13/21: $9\pc_wen_nxt[0:0]
    14/21: $8\pc_wen_nxt[0:0]
    15/21: $7\pc_wen_nxt[0:0]
    16/21: $6\pc_wen_nxt[0:0]
    17/21: $5\pc_wen_nxt[0:0]
    18/21: $4\pc_wen_nxt[0:0]
    19/21: $3\pc_wen_nxt[0:0]
    20/21: $2\pc_wen_nxt[0:0]
    21/21: $1\pc_wen_nxt[0:0]
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:2505$1306'.
     1/1: $1\base_address_wen_nxt[0:0]
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:2497$1295'.
     1/1: $1\copro_write_data_wen_nxt[0:0]
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:2476$1273'.
     1/6: $6\write_data_wen_nxt[0:0]
     2/6: $5\write_data_wen_nxt[0:0]
     3/6: $4\write_data_wen_nxt[0:0]
     4/6: $3\write_data_wen_nxt[0:0]
     5/6: $2\write_data_wen_nxt[0:0]
     6/6: $1\write_data_wen_nxt[0:0]
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:2434$1247'.
     1/15: $15\alu_out_sel_nxt[3:0]
     2/15: $14\alu_out_sel_nxt[3:0]
     3/15: $13\alu_out_sel_nxt[3:0]
     4/15: $12\alu_out_sel_nxt[3:0]
     5/15: $11\alu_out_sel_nxt[3:0]
     6/15: $10\alu_out_sel_nxt[3:0]
     7/15: $9\alu_out_sel_nxt[3:0]
     8/15: $8\alu_out_sel_nxt[3:0]
     9/15: $7\alu_out_sel_nxt[3:0]
    10/15: $6\alu_out_sel_nxt[3:0]
    11/15: $5\alu_out_sel_nxt[3:0]
    12/15: $4\alu_out_sel_nxt[3:0]
    13/15: $3\alu_out_sel_nxt[3:0]
    14/15: $2\alu_out_sel_nxt[3:0]
    15/15: $1\alu_out_sel_nxt[3:0]
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:2410$1230'.
     1/7: $7\alu_cout_sel_nxt[0:0]
     2/7: $6\alu_cout_sel_nxt[0:0]
     3/7: $5\alu_cout_sel_nxt[0:0]
     4/7: $4\alu_cout_sel_nxt[0:0]
     5/7: $3\alu_cout_sel_nxt[0:0]
     6/7: $2\alu_cout_sel_nxt[0:0]
     7/7: $1\alu_cout_sel_nxt[0:0]
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:2380$1212'.
     1/9: $9\alu_cin_sel_nxt[1:0]
     2/9: $8\alu_cin_sel_nxt[1:0]
     3/9: $7\alu_cin_sel_nxt[1:0]
     4/9: $6\alu_cin_sel_nxt[1:0]
     5/9: $5\alu_cin_sel_nxt[1:0]
     6/9: $4\alu_cin_sel_nxt[1:0]
     7/9: $3\alu_cin_sel_nxt[1:0]
     8/9: $2\alu_cin_sel_nxt[1:0]
     9/9: $1\alu_cin_sel_nxt[1:0]
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:2347$1193'.
     1/10: $10\alu_not_sel_nxt[0:0]
     2/10: $9\alu_not_sel_nxt[0:0]
     3/10: $8\alu_not_sel_nxt[0:0]
     4/10: $7\alu_not_sel_nxt[0:0]
     5/10: $6\alu_not_sel_nxt[0:0]
     6/10: $5\alu_not_sel_nxt[0:0]
     7/10: $4\alu_not_sel_nxt[0:0]
     8/10: $3\alu_not_sel_nxt[0:0]
     9/10: $2\alu_not_sel_nxt[0:0]
    10/10: $1\alu_not_sel_nxt[0:0]
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:2332$1184'.
     1/3: $3\alu_swap_sel_nxt[0:0]
     2/3: $2\alu_swap_sel_nxt[0:0]
     3/3: $1\alu_swap_sel_nxt[0:0]
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:2319$1166'.
     1/3: $3\o_user_mode_regs_store_nxt[0:0]
     2/3: $2\o_user_mode_regs_store_nxt[0:0]
     3/3: $1\o_user_mode_regs_store_nxt[0:0]
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:2289$1145'.
     1/8: $8\reg_write_sel_nxt[2:0]
     2/8: $7\reg_write_sel_nxt[2:0]
     3/8: $6\reg_write_sel_nxt[2:0]
     4/8: $5\reg_write_sel_nxt[2:0]
     5/8: $4\reg_write_sel_nxt[2:0]
     6/8: $3\reg_write_sel_nxt[2:0]
     7/8: $2\reg_write_sel_nxt[2:0]
     8/8: $1\reg_write_sel_nxt[2:0]
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:2276$1128'.
     1/3: $3\status_bits_sel_nxt[2:0]
     2/3: $2\status_bits_sel_nxt[2:0]
     3/3: $1\status_bits_sel_nxt[2:0]
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:2261$1114'.
     1/3: $3\byte_enable_sel_nxt[1:0]
     2/3: $2\byte_enable_sel_nxt[1:0]
     3/3: $1\byte_enable_sel_nxt[1:0]
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:2232$1066'.
     1/9: $9\load_pc_nxt[0:0]
     2/9: $8\load_pc_nxt[0:0]
     3/9: $7\load_pc_nxt[0:0]
     4/9: $6\load_pc_nxt[0:0]
     5/9: $5\load_pc_nxt[0:0]
     6/9: $4\load_pc_nxt[0:0]
     7/9: $3\load_pc_nxt[0:0]
     8/9: $2\load_pc_nxt[0:0]
     9/9: $1\load_pc_nxt[0:0]
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:2203$1029'.
     1/8: $8\pc_sel_nxt[2:0]
     2/8: $7\pc_sel_nxt[2:0]
     3/8: $6\pc_sel_nxt[2:0]
     4/8: $5\pc_sel_nxt[2:0]
     5/8: $4\pc_sel_nxt[2:0]
     6/8: $3\pc_sel_nxt[2:0]
     7/8: $2\pc_sel_nxt[2:0]
     8/8: $1\pc_sel_nxt[2:0]
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:2161$1012'.
     1/11: $11\daddress_sel_nxt[3:0]
     2/11: $10\daddress_sel_nxt[3:0]
     3/11: $9\daddress_sel_nxt[3:0]
     4/11: $8\daddress_sel_nxt[3:0]
     5/11: $7\daddress_sel_nxt[3:0]
     6/11: $6\daddress_sel_nxt[3:0]
     7/11: $5\daddress_sel_nxt[3:0]
     8/11: $4\daddress_sel_nxt[3:0]
     9/11: $3\daddress_sel_nxt[3:0]
    10/11: $2\daddress_sel_nxt[3:0]
    11/11: $1\daddress_sel_nxt[3:0]
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:2113$956'.
     1/15: $15\iaddress_sel_nxt[3:0]
     2/15: $14\iaddress_sel_nxt[3:0]
     3/15: $13\iaddress_sel_nxt[3:0]
     4/15: $12\iaddress_sel_nxt[3:0]
     5/15: $11\iaddress_sel_nxt[3:0]
     6/15: $10\iaddress_sel_nxt[3:0]
     7/15: $9\iaddress_sel_nxt[3:0]
     8/15: $8\iaddress_sel_nxt[3:0]
     9/15: $7\iaddress_sel_nxt[3:0]
    10/15: $6\iaddress_sel_nxt[3:0]
    11/15: $5\iaddress_sel_nxt[3:0]
    12/15: $4\iaddress_sel_nxt[3:0]
    13/15: $3\iaddress_sel_nxt[3:0]
    14/15: $2\iaddress_sel_nxt[3:0]
    15/15: $1\iaddress_sel_nxt[3:0]
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:2089$942'.
     1/7: $6\multiply_function_nxt[1:0]
     2/7: $5\multiply_function_nxt[1:0]
     3/7: $4\multiply_function_nxt[1:0]
     4/7: $3\multiply_function_nxt[1:0]
     5/7: $1\multiply_function_nxt[1:0] [1]
     6/7: $1\multiply_function_nxt[1:0] [0]
     7/7: $2\multiply_function_nxt[1:1]
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:2074$929'.
     1/3: $3\barrel_shift_function_nxt[1:0]
     2/3: $2\barrel_shift_function_nxt[1:0]
     3/3: $1\barrel_shift_function_nxt[1:0]
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:2054$913'.
     1/5: $5\barrel_shift_data_sel_nxt[1:0]
     2/5: $4\barrel_shift_data_sel_nxt[1:0]
     3/5: $3\barrel_shift_data_sel_nxt[1:0]
     4/5: $2\barrel_shift_data_sel_nxt[1:0]
     5/5: $1\barrel_shift_data_sel_nxt[1:0]
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:2032$897'.
     1/5: $5\barrel_shift_amount_sel_nxt[1:0]
     2/5: $4\barrel_shift_amount_sel_nxt[1:0]
     3/5: $3\barrel_shift_amount_sel_nxt[1:0]
     4/5: $2\barrel_shift_amount_sel_nxt[1:0]
     5/5: $1\barrel_shift_amount_sel_nxt[1:0]
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:2005$858'.
     1/1: $1\restore_base_address_nxt[0:0]
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1989$839'.
     1/5: $5\pre_fetch_instruction_wen[0:0]
     2/5: $4\pre_fetch_instruction_wen[0:0]
     3/5: $3\pre_fetch_instruction_wen[0:0]
     4/5: $2\pre_fetch_instruction_wen[0:0]
     5/5: $1\pre_fetch_instruction_wen[0:0]
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1958$811'.
     1/9: $9\saved_current_instruction_wen[0:0]
     2/9: $8\saved_current_instruction_wen[0:0]
     3/9: $7\saved_current_instruction_wen[0:0]
     4/9: $6\saved_current_instruction_wen[0:0]
     5/9: $5\saved_current_instruction_wen[0:0]
     6/9: $4\saved_current_instruction_wen[0:0]
     7/9: $3\saved_current_instruction_wen[0:0]
     8/9: $2\saved_current_instruction_wen[0:0]
     9/9: $1\saved_current_instruction_wen[0:0]
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1935$797'.
     1/4: $4\copro_operation_nxt[1:0]
     2/4: $3\copro_operation_nxt[1:0]
     3/4: $2\copro_operation_nxt[1:0]
     4/4: $1\copro_operation_nxt[1:0]
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1916$777'.
     1/4: $4\decode_iaccess_nxt[0:0]
     2/4: $3\decode_iaccess_nxt[0:0]
     3/4: $2\decode_iaccess_nxt[0:0]
     4/4: $1\decode_iaccess_nxt[0:0]
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1891$761'.
     1/7: $7\decode_daccess_nxt[0:0]
     2/7: $6\decode_daccess_nxt[0:0]
     3/7: $5\decode_daccess_nxt[0:0]
     4/7: $4\decode_daccess_nxt[0:0]
     5/7: $3\decode_daccess_nxt[0:0]
     6/7: $2\decode_daccess_nxt[0:0]
     7/7: $1\decode_daccess_nxt[0:0]
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1882$754'.
     1/1: $1\decode_exclusive_nxt[0:0]
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1872$748'.
     1/1: $1\status_bits_firq_mask_nxt[0:0]
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1853$738'.
     1/3: $3\status_bits_irq_mask_nxt[0:0]
     2/3: $2\status_bits_irq_mask_nxt[0:0]
     3/3: $1\status_bits_irq_mask_nxt[0:0]
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1831$727'.
     1/4: $4\status_bits_mode_nxt[1:0]
     2/4: $3\status_bits_mode_nxt[1:0]
     3/4: $2\status_bits_mode_nxt[1:0]
     4/4: $1\status_bits_mode_nxt[1:0]
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1708$651'.
     1/15: $15\mtrans_instruction_nxt[31:0]
     2/15: $14\mtrans_instruction_nxt[31:0]
     3/15: $13\mtrans_instruction_nxt[31:0]
     4/15: $12\mtrans_instruction_nxt[31:0]
     5/15: $11\mtrans_instruction_nxt[31:0]
     6/15: $10\mtrans_instruction_nxt[31:0]
     7/15: $9\mtrans_instruction_nxt[31:0]
     8/15: $8\mtrans_instruction_nxt[31:0]
     9/15: $7\mtrans_instruction_nxt[31:0]
    10/15: $6\mtrans_instruction_nxt[31:0]
    11/15: $5\mtrans_instruction_nxt[31:0]
    12/15: $4\mtrans_instruction_nxt[31:0]
    13/15: $3\mtrans_instruction_nxt[31:0]
    14/15: $2\mtrans_instruction_nxt[31:0]
    15/15: $1\mtrans_instruction_nxt[31:0]
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1670$590'.
     1/15: $15\mtrans_reg2[3:0]
     2/15: $14\mtrans_reg2[3:0]
     3/15: $13\mtrans_reg2[3:0]
     4/15: $12\mtrans_reg2[3:0]
     5/15: $11\mtrans_reg2[3:0]
     6/15: $10\mtrans_reg2[3:0]
     7/15: $9\mtrans_reg2[3:0]
     8/15: $8\mtrans_reg2[3:0]
     9/15: $7\mtrans_reg2[3:0]
    10/15: $6\mtrans_reg2[3:0]
    11/15: $5\mtrans_reg2[3:0]
    12/15: $4\mtrans_reg2[3:0]
    13/15: $3\mtrans_reg2[3:0]
    14/15: $2\mtrans_reg2[3:0]
    15/15: $1\mtrans_reg2[3:0]
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1609$572'.
     1/15: $15\mtrans_reg1[3:0]
     2/15: $14\mtrans_reg1[3:0]
     3/15: $13\mtrans_reg1[3:0]
     4/15: $12\mtrans_reg1[3:0]
     5/15: $11\mtrans_reg1[3:0]
     6/15: $10\mtrans_reg1[3:0]
     7/15: $9\mtrans_reg1[3:0]
     8/15: $8\mtrans_reg1[3:0]
     9/15: $7\mtrans_reg1[3:0]
    10/15: $6\mtrans_reg1[3:0]
    11/15: $5\mtrans_reg1[3:0]
    12/15: $4\mtrans_reg1[3:0]
    13/15: $3\mtrans_reg1[3:0]
    14/15: $2\mtrans_reg1[3:0]
    15/15: $1\mtrans_reg1[3:0]
Creating decoders for process `\a25_decode.$proc$../my/arm_core.v:1584$558'.
     1/10: $0\rd_conflict1_r[0:0]
     2/10: $0\rs_conflict1_r[0:0]
     3/10: $0\rm_conflict1_r[0:0]
     4/10: $0\rn_conflict1_r[0:0]
     5/10: $0\conflict_r[0:0]
     6/10: $0\instruction_execute_r[0:0]
     7/10: $0\o_rd_use_read[0:0]
     8/10: $0\o_rs_use_read[0:0]
     9/10: $0\o_rm_use_read[0:0]
    10/10: $0\o_rn_use_read[0:0]
Creating decoders for process `\a25_fetch.$proc$../my/arm_core.v:737$291'.
Creating decoders for process `\a25_fetch.$proc$../my/arm_core.v:834$285'.
Creating decoders for process `\a25_icache.$proc$../my/arm_core.v:288$180'.
Creating decoders for process `\a25_icache.$proc$../my/arm_core.v:286$179'.
Creating decoders for process `\a25_icache.$proc$../my/arm_core.v:277$178'.
Creating decoders for process `\a25_icache.$proc$../my/arm_core.v:262$177'.
Creating decoders for process `\a25_icache.$proc$../my/arm_core.v:260$176'.
Creating decoders for process `\a25_icache.$proc$../my/arm_core.v:258$175'.
Creating decoders for process `\a25_icache.$proc$../my/arm_core.v:245$174'.
Creating decoders for process `\a25_icache.$proc$../my/arm_core.v:244$173'.
Creating decoders for process `\a25_icache.$proc$../my/arm_core.v:243$172'.
Creating decoders for process `\a25_icache.$proc$../my/arm_core.v:643$146'.
     1/1: $0\valid_bits_r[3:0]
Creating decoders for process `\a25_icache.$proc$../my/arm_core.v:439$76'.
     1/1: $0\wb_address[31:0]
Creating decoders for process `\a25_icache.$proc$../my/arm_core.v:433$74'.
Creating decoders for process `\a25_icache.$proc$../my/arm_core.v:428$72'.
     1/1: $0\miss_address[31:0]
Creating decoders for process `\a25_icache.$proc$../my/arm_core.v:351$68'.
     1/5: $0\random_num[3:0]
     2/5: $0\select_way[3:0]
     3/5: $0\init_count[8:0]
     4/5: $0\source_sel[3:0]
     5/5: $0\c_state[3:0]
Creating decoders for process `\a25_icache.$proc$../my/arm_core.v:331$63'.
     1/3: $0\read_buf_valid_r[0:0]
     2/3: $0\read_buf_addr_r[31:0]
     3/3: $0\read_buf_data_r[127:0]
Creating decoders for process `\a25_icache.$proc$../my/arm_core.v:322$59'.
Creating decoders for process `\single_port_ram_128_8.$proc$../my/arm_core.v:58$48'.
     1/4: $1$memwr$\RAM$../my/arm_core.v:62$47_EN[127:0]$54
     2/4: $1$memwr$\RAM$../my/arm_core.v:62$47_DATA[127:0]$53
     3/4: $1$memwr$\RAM$../my/arm_core.v:62$47_ADDR[7:0]$52
     4/4: $0\out[127:0]
Creating decoders for process `\single_port_ram_21_8.$proc$../my/arm_core.v:24$39'.
     1/4: $1$memwr$\RAM$../my/arm_core.v:28$38_EN[20:0]$45
     2/4: $1$memwr$\RAM$../my/arm_core.v:28$38_DATA[20:0]$44
     3/4: $1$memwr$\RAM$../my/arm_core.v:28$38_ADDR[7:0]$43
     4/4: $0\out[20:0]
Creating decoders for process `\a25_coprocessor.$proc$../my/arm_core.v:7620$3391'.
Creating decoders for process `\a25_coprocessor.$proc$../my/arm_core.v:7619$3390'.
Creating decoders for process `\a25_coprocessor.$proc$../my/arm_core.v:7616$3389'.
Creating decoders for process `\a25_coprocessor.$proc$../my/arm_core.v:7610$3388'.
Creating decoders for process `\a25_coprocessor.$proc$../my/arm_core.v:7605$3387'.
Creating decoders for process `\a25_coprocessor.$proc$../my/arm_core.v:7601$3386'.
Creating decoders for process `\a25_coprocessor.$proc$../my/arm_core.v:7670$3384'.
     1/1: $0\o_copro_read_data[31:0]
Creating decoders for process `\a25_coprocessor.$proc$../my/arm_core.v:7650$3376'.
     1/4: $0\disruptive_area[31:0]
     2/4: $0\updateable_area[31:0]
     3/4: $0\cacheable_area[31:0]
     4/4: $0\cache_control[2:0]
Creating decoders for process `\a25_coprocessor.$proc$../my/arm_core.v:7635$3374'.
     1/2: $0\fault_address[31:0]
     2/2: $0\fault_status[7:0]
Creating decoders for process `\a25_wishbone.$proc$../my/arm_core.v:7397$3373'.
Creating decoders for process `\a25_wishbone.$proc$../my/arm_core.v:7379$3372'.
Creating decoders for process `\a25_wishbone.$proc$../my/arm_core.v:7378$3371'.
Creating decoders for process `\a25_wishbone.$proc$../my/arm_core.v:7377$3370'.
Creating decoders for process `\a25_wishbone.$proc$../my/arm_core.v:7376$3369'.
Creating decoders for process `\a25_wishbone.$proc$../my/arm_core.v:7375$3368'.
Creating decoders for process `\a25_wishbone.$proc$../my/arm_core.v:7374$3367'.
Creating decoders for process `\a25_wishbone.$proc$../my/arm_core.v:7488$3363'.
     1/7: $0\serving_port[2:0]
     2/7: $0\o_wb_stb[0:0]
     3/7: $0\o_wb_cyc[0:0]
     4/7: $0\o_wb_dat[127:0]
     5/7: $0\o_wb_we[0:0]
     6/7: $0\o_wb_sel[15:0]
     7/7: $0\o_wb_adr[31:0]
Creating decoders for process `\a25_wishbone_buf.$proc$../my/arm_core.v:7193$3351'.
Creating decoders for process `\a25_wishbone_buf.$proc$../my/arm_core.v:7191$3350'.
Creating decoders for process `\a25_wishbone_buf.$proc$../my/arm_core.v:7190$3349'.
Creating decoders for process `\a25_wishbone_buf.$proc$../my/arm_core.v:7189$3348'.
Creating decoders for process `\a25_wishbone_buf.$proc$../my/arm_core.v:7188$3347'.
Creating decoders for process `\a25_wishbone_buf.$proc$../my/arm_core.v:7187$3346'.
Creating decoders for process `\a25_wishbone_buf.$proc$../my/arm_core.v:7177$3345'.
Creating decoders for process `\a25_wishbone_buf.$proc$../my/arm_core.v:7274$3341'.
     1/1: $0\wait_rdata_valid_r[0:0]
Creating decoders for process `\a25_wishbone_buf.$proc$../my/arm_core.v:7268$3338'.
     1/1: $0\busy_reading_r[0:0]
Creating decoders for process `\a25_wishbone_buf.$proc$../my/arm_core.v:7241$3311'.
     1/1: $0\wbuf_rp_r[0:0]
Creating decoders for process `\a25_wishbone_buf.$proc$../my/arm_core.v:7218$3305'.
     1/9: $0\wbuf_write_r[1:0] [1]
     2/9: $0\wbuf_write_r[1:0] [0]
     3/9: $0\wbuf_wp_r[0:0]
     4/9: $0\wbuf_be_r1[15:0]
     5/9: $0\wbuf_be_r0[15:0]
     6/9: $0\wbuf_wdata_r1[127:0]
     7/9: $0\wbuf_wdata_r0[127:0]
     8/9: $0\wbuf_addr_r1[31:0]
     9/9: $0\wbuf_addr_r0[31:0]
Creating decoders for process `\a25_wishbone_buf.$proc$../my/arm_core.v:7212$3299'.
     1/1: $0\ack_owed_r[0:0]
Creating decoders for process `\a25_wishbone_buf.$proc$../my/arm_core.v:7204$3295'.
     1/1: $0\wbuf_used_r[1:0]
Creating decoders for process `\a25_write_back.$proc$../my/arm_core.v:7102$3282'.
Creating decoders for process `\a25_write_back.$proc$../my/arm_core.v:7101$3281'.
Creating decoders for process `\a25_write_back.$proc$../my/arm_core.v:7100$3280'.
Creating decoders for process `\a25_write_back.$proc$../my/arm_core.v:7109$3278'.
     1/3: $0\mem_load_rd_r[10:0]
     2/3: $0\mem_read_data_valid_r[0:0]
     3/3: $0\mem_read_data_r[31:0]
Creating decoders for process `\a25_mem.$proc$../my/arm_core.v:6787$3277'.
Creating decoders for process `\a25_mem.$proc$../my/arm_core.v:6783$3276'.
Creating decoders for process `\a25_mem.$proc$../my/arm_core.v:6781$3275'.
Creating decoders for process `\a25_mem.$proc$../my/arm_core.v:6777$3274'.
Creating decoders for process `\a25_mem.$proc$../my/arm_core.v:6776$3273'.
Creating decoders for process `\a25_mem.$proc$../my/arm_core.v:6775$3272'.
Creating decoders for process `\a25_mem.$proc$../my/arm_core.v:6773$3271'.
Creating decoders for process `\a25_mem.$proc$../my/arm_core.v:6772$3270'.
Creating decoders for process `\a25_mem.$proc$../my/arm_core.v:6771$3269'.
Creating decoders for process `\a25_mem.$proc$../my/arm_core.v:7029$3266'.
     1/3: $0\mem_load_rd_r[10:0]
     2/3: $0\mem_read_data_valid_r[0:0]
     3/3: $0\mem_read_data_r[31:0]
Creating decoders for process `\a25_mem.$proc$../my/arm_core.v:7017$3253'.
Creating decoders for process `\a25_mem.$proc$../my/arm_core.v:7008$3247'.
Creating decoders for process `\a25_mem.$proc$../my/arm_core.v:7001$3241'.
Creating decoders for process `\a25_dcache.$proc$../my/arm_core.v:5810$3116'.
Creating decoders for process `\a25_dcache.$proc$../my/arm_core.v:5805$3115'.
Creating decoders for process `\a25_dcache.$proc$../my/arm_core.v:5804$3114'.
Creating decoders for process `\a25_dcache.$proc$../my/arm_core.v:5800$3113'.
Creating decoders for process `\a25_dcache.$proc$../my/arm_core.v:5798$3112'.
Creating decoders for process `\a25_dcache.$proc$../my/arm_core.v:5787$3111'.
Creating decoders for process `\a25_dcache.$proc$../my/arm_core.v:5774$3110'.
Creating decoders for process `\a25_dcache.$proc$../my/arm_core.v:5766$3109'.
Creating decoders for process `\a25_dcache.$proc$../my/arm_core.v:5764$3108'.
Creating decoders for process `\a25_dcache.$proc$../my/arm_core.v:5762$3107'.
Creating decoders for process `\a25_dcache.$proc$../my/arm_core.v:5760$3106'.
Creating decoders for process `\a25_dcache.$proc$../my/arm_core.v:5748$3105'.
Creating decoders for process `\a25_dcache.$proc$../my/arm_core.v:5747$3104'.
Creating decoders for process `\a25_dcache.$proc$../my/arm_core.v:5745$3103'.
Creating decoders for process `\a25_dcache.$proc$../my/arm_core.v:6371$3077'.
     1/1: $0\valid_bits_r[3:0]
Creating decoders for process `\a25_dcache.$proc$../my/arm_core.v:6057$2913'.
     1/1: $0\ex_read_address[7:0]
Creating decoders for process `\a25_dcache.$proc$../my/arm_core.v:6036$2910'.
     1/2: $0\ex_read_hit_way[3:0]
     2/2: $0\ex_read_hit_r[0:0]
Creating decoders for process `\a25_dcache.$proc$../my/arm_core.v:6025$2905'.
Creating decoders for process `\a25_dcache.$proc$../my/arm_core.v:6012$2898'.
     1/1: $0\wb_address[31:0]
Creating decoders for process `\a25_dcache.$proc$../my/arm_core.v:6000$2891'.
     1/1: $0\data_wdata_r[127:0]
Creating decoders for process `\a25_dcache.$proc$../my/arm_core.v:5994$2890'.
     1/1: $0\data_hit_way_r[3:0]
Creating decoders for process `\a25_dcache.$proc$../my/arm_core.v:5990$2888'.
     1/1: $0\miss_address[31:0]
Creating decoders for process `\a25_dcache.$proc$../my/arm_core.v:5981$2887'.
     1/1: $0\wb_rdata_burst[127:0]
Creating decoders for process `\a25_dcache.$proc$../my/arm_core.v:5854$2878'.
     1/5: $0\random_num[3:0]
     2/5: $0\select_way[3:0]
     3/5: $0\init_count[8:0]
     4/5: $0\source_sel[3:0]
     5/5: $0\c_state[3:0]
Creating decoders for process `\a25_execute.$proc$../my/arm_core.v:4952$2858'.
Creating decoders for process `\a25_execute.$proc$../my/arm_core.v:4951$2857'.
Creating decoders for process `\a25_execute.$proc$../my/arm_core.v:4946$2856'.
Creating decoders for process `\a25_execute.$proc$../my/arm_core.v:4937$2855'.
Creating decoders for process `\a25_execute.$proc$../my/arm_core.v:4935$2854'.
Creating decoders for process `\a25_execute.$proc$../my/arm_core.v:4932$2853'.
Creating decoders for process `\a25_execute.$proc$../my/arm_core.v:4927$2852'.
Creating decoders for process `\a25_execute.$proc$../my/arm_core.v:4925$2851'.
Creating decoders for process `\a25_execute.$proc$../my/arm_core.v:4892$2850'.
Creating decoders for process `\a25_execute.$proc$../my/arm_core.v:4891$2849'.
Creating decoders for process `\a25_execute.$proc$../my/arm_core.v:4890$2848'.
Creating decoders for process `\a25_execute.$proc$../my/arm_core.v:4889$2847'.
Creating decoders for process `\a25_execute.$proc$../my/arm_core.v:4888$2846'.
Creating decoders for process `\a25_execute.$proc$../my/arm_core.v:4887$2845'.
Creating decoders for process `\a25_execute.$proc$../my/arm_core.v:4886$2844'.
Creating decoders for process `\a25_execute.$proc$../my/arm_core.v:4884$2843'.
Creating decoders for process `\a25_execute.$proc$../my/arm_core.v:4883$2842'.
Creating decoders for process `\a25_execute.$proc$../my/arm_core.v:4881$2841'.
Creating decoders for process `\a25_execute.$proc$../my/arm_core.v:4880$2840'.
Creating decoders for process `\a25_execute.$proc$../my/arm_core.v:4879$2839'.
Creating decoders for process `\a25_execute.$proc$../my/arm_core.v:5325$2820'.
Creating decoders for process `\a25_execute.$proc$../my/arm_core.v:5281$2776'.
     1/2: $0\load_rd_r[3:0]
     2/2: $0\read_data_filtered_r[31:0]

7.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\a25_multiply.\count_nxt' from process `\a25_multiply.$proc$../my/arm_core.v:4458$2478'.
No latch inferred for signal `\a25_multiply.\product_nxt' from process `\a25_multiply.$proc$../my/arm_core.v:4458$2478'.
No latch inferred for signal `\a25_multiply.\flags_nxt' from process `\a25_multiply.$proc$../my/arm_core.v:4458$2478'.
No latch inferred for signal `\a25_register_bank.\o_rd' from process `\a25_register_bank.$proc$../my/arm_core.v:4348$2412'.
No latch inferred for signal `\a25_register_bank.\o_rs' from process `\a25_register_bank.$proc$../my/arm_core.v:4322$2411'.
No latch inferred for signal `\a25_register_bank.\decode' from process `\a25_register_bank.$proc$../my/arm_core.v:4128$2233'.
No latch inferred for signal `\a25_decode.\control_state_nxt' from process `\a25_decode.$proc$../my/arm_core.v:2837$1743'.
No latch inferred for signal `\a25_decode.\status_bits_firq_mask_wen_nxt' from process `\a25_decode.$proc$../my/arm_core.v:2775$1643'.
No latch inferred for signal `\a25_decode.\status_bits_mode_wen_nxt' from process `\a25_decode.$proc$../my/arm_core.v:2735$1620'.
No latch inferred for signal `\a25_decode.\status_bits_irq_mask_wen_nxt' from process `\a25_decode.$proc$../my/arm_core.v:2735$1620'.
No latch inferred for signal `\a25_decode.\status_bits_flags_wen_nxt' from process `\a25_decode.$proc$../my/arm_core.v:2722$1605'.
No latch inferred for signal `\a25_decode.\reg_bank_wen_nxt' from process `\a25_decode.$proc$../my/arm_core.v:2573$1361'.
No latch inferred for signal `\a25_decode.\pc_wen_nxt' from process `\a25_decode.$proc$../my/arm_core.v:2513$1313'.
No latch inferred for signal `\a25_decode.\base_address_wen_nxt' from process `\a25_decode.$proc$../my/arm_core.v:2505$1306'.
No latch inferred for signal `\a25_decode.\copro_write_data_wen_nxt' from process `\a25_decode.$proc$../my/arm_core.v:2497$1295'.
No latch inferred for signal `\a25_decode.\write_data_wen_nxt' from process `\a25_decode.$proc$../my/arm_core.v:2476$1273'.
No latch inferred for signal `\a25_decode.\alu_out_sel_nxt' from process `\a25_decode.$proc$../my/arm_core.v:2434$1247'.
No latch inferred for signal `\a25_decode.\alu_cout_sel_nxt' from process `\a25_decode.$proc$../my/arm_core.v:2410$1230'.
No latch inferred for signal `\a25_decode.\alu_cin_sel_nxt' from process `\a25_decode.$proc$../my/arm_core.v:2380$1212'.
No latch inferred for signal `\a25_decode.\alu_not_sel_nxt' from process `\a25_decode.$proc$../my/arm_core.v:2347$1193'.
No latch inferred for signal `\a25_decode.\alu_swap_sel_nxt' from process `\a25_decode.$proc$../my/arm_core.v:2332$1184'.
No latch inferred for signal `\a25_decode.\o_user_mode_regs_store_nxt' from process `\a25_decode.$proc$../my/arm_core.v:2319$1166'.
No latch inferred for signal `\a25_decode.\reg_write_sel_nxt' from process `\a25_decode.$proc$../my/arm_core.v:2289$1145'.
No latch inferred for signal `\a25_decode.\status_bits_sel_nxt' from process `\a25_decode.$proc$../my/arm_core.v:2276$1128'.
No latch inferred for signal `\a25_decode.\byte_enable_sel_nxt' from process `\a25_decode.$proc$../my/arm_core.v:2261$1114'.
No latch inferred for signal `\a25_decode.\load_pc_nxt' from process `\a25_decode.$proc$../my/arm_core.v:2232$1066'.
No latch inferred for signal `\a25_decode.\pc_sel_nxt' from process `\a25_decode.$proc$../my/arm_core.v:2203$1029'.
No latch inferred for signal `\a25_decode.\daddress_sel_nxt' from process `\a25_decode.$proc$../my/arm_core.v:2161$1012'.
No latch inferred for signal `\a25_decode.\iaddress_sel_nxt' from process `\a25_decode.$proc$../my/arm_core.v:2113$956'.
No latch inferred for signal `\a25_decode.\multiply_function_nxt' from process `\a25_decode.$proc$../my/arm_core.v:2089$942'.
No latch inferred for signal `\a25_decode.\barrel_shift_function_nxt' from process `\a25_decode.$proc$../my/arm_core.v:2074$929'.
No latch inferred for signal `\a25_decode.\barrel_shift_data_sel_nxt' from process `\a25_decode.$proc$../my/arm_core.v:2054$913'.
No latch inferred for signal `\a25_decode.\barrel_shift_amount_sel_nxt' from process `\a25_decode.$proc$../my/arm_core.v:2032$897'.
No latch inferred for signal `\a25_decode.\restore_base_address_nxt' from process `\a25_decode.$proc$../my/arm_core.v:2005$858'.
No latch inferred for signal `\a25_decode.\pre_fetch_instruction_wen' from process `\a25_decode.$proc$../my/arm_core.v:1989$839'.
No latch inferred for signal `\a25_decode.\saved_current_instruction_wen' from process `\a25_decode.$proc$../my/arm_core.v:1958$811'.
No latch inferred for signal `\a25_decode.\copro_operation_nxt' from process `\a25_decode.$proc$../my/arm_core.v:1935$797'.
No latch inferred for signal `\a25_decode.\decode_iaccess_nxt' from process `\a25_decode.$proc$../my/arm_core.v:1916$777'.
No latch inferred for signal `\a25_decode.\decode_daccess_nxt' from process `\a25_decode.$proc$../my/arm_core.v:1891$761'.
No latch inferred for signal `\a25_decode.\decode_exclusive_nxt' from process `\a25_decode.$proc$../my/arm_core.v:1882$754'.
No latch inferred for signal `\a25_decode.\status_bits_firq_mask_nxt' from process `\a25_decode.$proc$../my/arm_core.v:1872$748'.
No latch inferred for signal `\a25_decode.\status_bits_irq_mask_nxt' from process `\a25_decode.$proc$../my/arm_core.v:1853$738'.
No latch inferred for signal `\a25_decode.\status_bits_mode_nxt' from process `\a25_decode.$proc$../my/arm_core.v:1831$727'.
No latch inferred for signal `\a25_decode.\mtrans_instruction_nxt' from process `\a25_decode.$proc$../my/arm_core.v:1708$651'.
No latch inferred for signal `\a25_decode.\mtrans_reg2' from process `\a25_decode.$proc$../my/arm_core.v:1670$590'.
No latch inferred for signal `\a25_decode.\mtrans_reg1' from process `\a25_decode.$proc$../my/arm_core.v:1609$572'.

7.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\a25_multiply.\o_done' using process `\a25_multiply.$proc$../my/arm_core.v:4494$2493'.
  created $dff cell `$procdff$8700' with positive edge clock.
Creating register for signal `\a25_multiply.\count' using process `\a25_multiply.$proc$../my/arm_core.v:4494$2493'.
  created $dff cell `$procdff$8701' with positive edge clock.
Creating register for signal `\a25_multiply.\product' using process `\a25_multiply.$proc$../my/arm_core.v:4494$2493'.
  created $dff cell `$procdff$8702' with positive edge clock.
Creating register for signal `\a25_register_bank.\r0' using process `\a25_register_bank.$proc$../my/arm_core.v:4183$2245'.
  created $dff cell `$procdff$8703' with positive edge clock.
Creating register for signal `\a25_register_bank.\r1' using process `\a25_register_bank.$proc$../my/arm_core.v:4183$2245'.
  created $dff cell `$procdff$8704' with positive edge clock.
Creating register for signal `\a25_register_bank.\r2' using process `\a25_register_bank.$proc$../my/arm_core.v:4183$2245'.
  created $dff cell `$procdff$8705' with positive edge clock.
Creating register for signal `\a25_register_bank.\r3' using process `\a25_register_bank.$proc$../my/arm_core.v:4183$2245'.
  created $dff cell `$procdff$8706' with positive edge clock.
Creating register for signal `\a25_register_bank.\r4' using process `\a25_register_bank.$proc$../my/arm_core.v:4183$2245'.
  created $dff cell `$procdff$8707' with positive edge clock.
Creating register for signal `\a25_register_bank.\r5' using process `\a25_register_bank.$proc$../my/arm_core.v:4183$2245'.
  created $dff cell `$procdff$8708' with positive edge clock.
Creating register for signal `\a25_register_bank.\r6' using process `\a25_register_bank.$proc$../my/arm_core.v:4183$2245'.
  created $dff cell `$procdff$8709' with positive edge clock.
Creating register for signal `\a25_register_bank.\r7' using process `\a25_register_bank.$proc$../my/arm_core.v:4183$2245'.
  created $dff cell `$procdff$8710' with positive edge clock.
Creating register for signal `\a25_register_bank.\r8' using process `\a25_register_bank.$proc$../my/arm_core.v:4183$2245'.
  created $dff cell `$procdff$8711' with positive edge clock.
Creating register for signal `\a25_register_bank.\r9' using process `\a25_register_bank.$proc$../my/arm_core.v:4183$2245'.
  created $dff cell `$procdff$8712' with positive edge clock.
Creating register for signal `\a25_register_bank.\r10' using process `\a25_register_bank.$proc$../my/arm_core.v:4183$2245'.
  created $dff cell `$procdff$8713' with positive edge clock.
Creating register for signal `\a25_register_bank.\r11' using process `\a25_register_bank.$proc$../my/arm_core.v:4183$2245'.
  created $dff cell `$procdff$8714' with positive edge clock.
Creating register for signal `\a25_register_bank.\r12' using process `\a25_register_bank.$proc$../my/arm_core.v:4183$2245'.
  created $dff cell `$procdff$8715' with positive edge clock.
Creating register for signal `\a25_register_bank.\r13' using process `\a25_register_bank.$proc$../my/arm_core.v:4183$2245'.
  created $dff cell `$procdff$8716' with positive edge clock.
Creating register for signal `\a25_register_bank.\r14' using process `\a25_register_bank.$proc$../my/arm_core.v:4183$2245'.
  created $dff cell `$procdff$8717' with positive edge clock.
Creating register for signal `\a25_register_bank.\r15' using process `\a25_register_bank.$proc$../my/arm_core.v:4183$2245'.
  created $dff cell `$procdff$8718' with positive edge clock.
Creating register for signal `\a25_register_bank.\r13_svc' using process `\a25_register_bank.$proc$../my/arm_core.v:4183$2245'.
  created $dff cell `$procdff$8719' with positive edge clock.
Creating register for signal `\a25_register_bank.\r14_svc' using process `\a25_register_bank.$proc$../my/arm_core.v:4183$2245'.
  created $dff cell `$procdff$8720' with positive edge clock.
Creating register for signal `\a25_register_bank.\r13_irq' using process `\a25_register_bank.$proc$../my/arm_core.v:4183$2245'.
  created $dff cell `$procdff$8721' with positive edge clock.
Creating register for signal `\a25_register_bank.\r14_irq' using process `\a25_register_bank.$proc$../my/arm_core.v:4183$2245'.
  created $dff cell `$procdff$8722' with positive edge clock.
Creating register for signal `\a25_register_bank.\r8_firq' using process `\a25_register_bank.$proc$../my/arm_core.v:4183$2245'.
  created $dff cell `$procdff$8723' with positive edge clock.
Creating register for signal `\a25_register_bank.\r9_firq' using process `\a25_register_bank.$proc$../my/arm_core.v:4183$2245'.
  created $dff cell `$procdff$8724' with positive edge clock.
Creating register for signal `\a25_register_bank.\r10_firq' using process `\a25_register_bank.$proc$../my/arm_core.v:4183$2245'.
  created $dff cell `$procdff$8725' with positive edge clock.
Creating register for signal `\a25_register_bank.\r11_firq' using process `\a25_register_bank.$proc$../my/arm_core.v:4183$2245'.
  created $dff cell `$procdff$8726' with positive edge clock.
Creating register for signal `\a25_register_bank.\r12_firq' using process `\a25_register_bank.$proc$../my/arm_core.v:4183$2245'.
  created $dff cell `$procdff$8727' with positive edge clock.
Creating register for signal `\a25_register_bank.\r13_firq' using process `\a25_register_bank.$proc$../my/arm_core.v:4183$2245'.
  created $dff cell `$procdff$8728' with positive edge clock.
Creating register for signal `\a25_register_bank.\r14_firq' using process `\a25_register_bank.$proc$../my/arm_core.v:4183$2245'.
  created $dff cell `$procdff$8729' with positive edge clock.
Creating register for signal `\a25_barrel_shift.\full_out_r' using process `\a25_barrel_shift.$proc$../my/arm_core.v:3799$2221'.
  created $dff cell `$procdff$8730' with positive edge clock.
Creating register for signal `\a25_barrel_shift.\full_carry_out_r' using process `\a25_barrel_shift.$proc$../my/arm_core.v:3799$2221'.
  created $dff cell `$procdff$8731' with positive edge clock.
Creating register for signal `\a25_barrel_shift.\use_quick_r' using process `\a25_barrel_shift.$proc$../my/arm_core.v:3799$2221'.
  created $dff cell `$procdff$8732' with positive edge clock.
Creating register for signal `\a25_decode.\dabt_reg' using process `\a25_decode.$proc$../my/arm_core.v:3119$1829'.
  created $dff cell `$procdff$8733' with positive edge clock.
Creating register for signal `\a25_decode.\dabt_reg_d1' using process `\a25_decode.$proc$../my/arm_core.v:3119$1829'.
  created $dff cell `$procdff$8734' with positive edge clock.
Creating register for signal `\a25_decode.\irq' using process `\a25_decode.$proc$../my/arm_core.v:3119$1829'.
  created $dff cell `$procdff$8735' with positive edge clock.
Creating register for signal `\a25_decode.\firq' using process `\a25_decode.$proc$../my/arm_core.v:3119$1829'.
  created $dff cell `$procdff$8736' with positive edge clock.
Creating register for signal `\a25_decode.\saved_current_instruction' using process `\a25_decode.$proc$../my/arm_core.v:3070$1826'.
  created $dff cell `$procdff$8737' with positive edge clock.
Creating register for signal `\a25_decode.\saved_current_instruction_type' using process `\a25_decode.$proc$../my/arm_core.v:3070$1826'.
  created $dff cell `$procdff$8738' with positive edge clock.
Creating register for signal `\a25_decode.\saved_current_instruction_iabt' using process `\a25_decode.$proc$../my/arm_core.v:3070$1826'.
  created $dff cell `$procdff$8739' with positive edge clock.
Creating register for signal `\a25_decode.\saved_current_instruction_adex' using process `\a25_decode.$proc$../my/arm_core.v:3070$1826'.
  created $dff cell `$procdff$8740' with positive edge clock.
Creating register for signal `\a25_decode.\saved_current_instruction_address' using process `\a25_decode.$proc$../my/arm_core.v:3070$1826'.
  created $dff cell `$procdff$8741' with positive edge clock.
Creating register for signal `\a25_decode.\saved_current_instruction_iabt_status' using process `\a25_decode.$proc$../my/arm_core.v:3070$1826'.
  created $dff cell `$procdff$8742' with positive edge clock.
Creating register for signal `\a25_decode.\pre_fetch_instruction' using process `\a25_decode.$proc$../my/arm_core.v:3070$1826'.
  created $dff cell `$procdff$8743' with positive edge clock.
Creating register for signal `\a25_decode.\pre_fetch_instruction_type' using process `\a25_decode.$proc$../my/arm_core.v:3070$1826'.
  created $dff cell `$procdff$8744' with positive edge clock.
Creating register for signal `\a25_decode.\pre_fetch_instruction_iabt' using process `\a25_decode.$proc$../my/arm_core.v:3070$1826'.
  created $dff cell `$procdff$8745' with positive edge clock.
Creating register for signal `\a25_decode.\pre_fetch_instruction_adex' using process `\a25_decode.$proc$../my/arm_core.v:3070$1826'.
  created $dff cell `$procdff$8746' with positive edge clock.
Creating register for signal `\a25_decode.\pre_fetch_instruction_address' using process `\a25_decode.$proc$../my/arm_core.v:3070$1826'.
  created $dff cell `$procdff$8747' with positive edge clock.
Creating register for signal `\a25_decode.\pre_fetch_instruction_iabt_status' using process `\a25_decode.$proc$../my/arm_core.v:3070$1826'.
  created $dff cell `$procdff$8748' with positive edge clock.
Creating register for signal `\a25_decode.\hold_instruction' using process `\a25_decode.$proc$../my/arm_core.v:3070$1826'.
  created $dff cell `$procdff$8749' with positive edge clock.
Creating register for signal `\a25_decode.\hold_instruction_type' using process `\a25_decode.$proc$../my/arm_core.v:3070$1826'.
  created $dff cell `$procdff$8750' with positive edge clock.
Creating register for signal `\a25_decode.\hold_instruction_iabt' using process `\a25_decode.$proc$../my/arm_core.v:3070$1826'.
  created $dff cell `$procdff$8751' with positive edge clock.
Creating register for signal `\a25_decode.\hold_instruction_adex' using process `\a25_decode.$proc$../my/arm_core.v:3070$1826'.
  created $dff cell `$procdff$8752' with positive edge clock.
Creating register for signal `\a25_decode.\hold_instruction_address' using process `\a25_decode.$proc$../my/arm_core.v:3070$1826'.
  created $dff cell `$procdff$8753' with positive edge clock.
Creating register for signal `\a25_decode.\hold_instruction_iabt_status' using process `\a25_decode.$proc$../my/arm_core.v:3070$1826'.
  created $dff cell `$procdff$8754' with positive edge clock.
Creating register for signal `\a25_decode.\o_imm32' using process `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
  created $dff cell `$procdff$8755' with positive edge clock.
Creating register for signal `\a25_decode.\o_imm_shift_amount' using process `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
  created $dff cell `$procdff$8756' with positive edge clock.
Creating register for signal `\a25_decode.\o_shift_imm_zero' using process `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
  created $dff cell `$procdff$8757' with positive edge clock.
Creating register for signal `\a25_decode.\o_condition' using process `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
  created $dff cell `$procdff$8758' with positive edge clock.
Creating register for signal `\a25_decode.\o_decode_exclusive' using process `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
  created $dff cell `$procdff$8759' with positive edge clock.
Creating register for signal `\a25_decode.\o_decode_iaccess' using process `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
  created $dff cell `$procdff$8760' with positive edge clock.
Creating register for signal `\a25_decode.\o_decode_daccess' using process `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
  created $dff cell `$procdff$8761' with positive edge clock.
Creating register for signal `\a25_decode.\o_status_bits_mode' using process `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
  created $dff cell `$procdff$8762' with positive edge clock.
Creating register for signal `\a25_decode.\o_status_bits_irq_mask' using process `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
  created $dff cell `$procdff$8763' with positive edge clock.
Creating register for signal `\a25_decode.\o_status_bits_firq_mask' using process `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
  created $dff cell `$procdff$8764' with positive edge clock.
Creating register for signal `\a25_decode.\o_rm_sel' using process `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
  created $dff cell `$procdff$8765' with positive edge clock.
Creating register for signal `\a25_decode.\o_rs_sel' using process `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
  created $dff cell `$procdff$8766' with positive edge clock.
Creating register for signal `\a25_decode.\o_load_rd' using process `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
  created $dff cell `$procdff$8767' with positive edge clock.
Creating register for signal `\a25_decode.\o_rn_sel' using process `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
  created $dff cell `$procdff$8768' with positive edge clock.
Creating register for signal `\a25_decode.\o_barrel_shift_amount_sel' using process `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
  created $dff cell `$procdff$8769' with positive edge clock.
Creating register for signal `\a25_decode.\o_barrel_shift_data_sel' using process `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
  created $dff cell `$procdff$8770' with positive edge clock.
Creating register for signal `\a25_decode.\o_barrel_shift_function' using process `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
  created $dff cell `$procdff$8771' with positive edge clock.
Creating register for signal `\a25_decode.\o_alu_function' using process `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
  created $dff cell `$procdff$8772' with positive edge clock.
Creating register for signal `\a25_decode.\o_multiply_function' using process `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
  created $dff cell `$procdff$8773' with positive edge clock.
Creating register for signal `\a25_decode.\o_interrupt_vector_sel' using process `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
  created $dff cell `$procdff$8774' with positive edge clock.
Creating register for signal `\a25_decode.\o_iaddress_sel' using process `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
  created $dff cell `$procdff$8775' with positive edge clock.
Creating register for signal `\a25_decode.\o_daddress_sel' using process `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
  created $dff cell `$procdff$8776' with positive edge clock.
Creating register for signal `\a25_decode.\o_pc_sel' using process `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
  created $dff cell `$procdff$8777' with positive edge clock.
Creating register for signal `\a25_decode.\o_byte_enable_sel' using process `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
  created $dff cell `$procdff$8778' with positive edge clock.
Creating register for signal `\a25_decode.\o_status_bits_sel' using process `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
  created $dff cell `$procdff$8779' with positive edge clock.
Creating register for signal `\a25_decode.\o_reg_write_sel' using process `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
  created $dff cell `$procdff$8780' with positive edge clock.
Creating register for signal `\a25_decode.\o_firq_not_user_mode' using process `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
  created $dff cell `$procdff$8781' with positive edge clock.
Creating register for signal `\a25_decode.\o_write_data_wen' using process `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
  created $dff cell `$procdff$8782' with positive edge clock.
Creating register for signal `\a25_decode.\o_base_address_wen' using process `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
  created $dff cell `$procdff$8783' with positive edge clock.
Creating register for signal `\a25_decode.\o_pc_wen' using process `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
  created $dff cell `$procdff$8784' with positive edge clock.
Creating register for signal `\a25_decode.\o_reg_bank_wen' using process `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
  created $dff cell `$procdff$8785' with positive edge clock.
Creating register for signal `\a25_decode.\o_status_bits_flags_wen' using process `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
  created $dff cell `$procdff$8786' with positive edge clock.
Creating register for signal `\a25_decode.\o_status_bits_mode_wen' using process `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
  created $dff cell `$procdff$8787' with positive edge clock.
Creating register for signal `\a25_decode.\o_status_bits_irq_mask_wen' using process `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
  created $dff cell `$procdff$8788' with positive edge clock.
Creating register for signal `\a25_decode.\o_status_bits_firq_mask_wen' using process `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
  created $dff cell `$procdff$8789' with positive edge clock.
Creating register for signal `\a25_decode.\o_copro_opcode1' using process `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
  created $dff cell `$procdff$8790' with positive edge clock.
Creating register for signal `\a25_decode.\o_copro_opcode2' using process `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
  created $dff cell `$procdff$8791' with positive edge clock.
Creating register for signal `\a25_decode.\o_copro_crn' using process `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
  created $dff cell `$procdff$8792' with positive edge clock.
Creating register for signal `\a25_decode.\o_copro_crm' using process `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
  created $dff cell `$procdff$8793' with positive edge clock.
Creating register for signal `\a25_decode.\o_copro_num' using process `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
  created $dff cell `$procdff$8794' with positive edge clock.
Creating register for signal `\a25_decode.\o_copro_operation' using process `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
  created $dff cell `$procdff$8795' with positive edge clock.
Creating register for signal `\a25_decode.\o_copro_write_data_wen' using process `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
  created $dff cell `$procdff$8796' with positive edge clock.
Creating register for signal `\a25_decode.\load_pc_r' using process `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
  created $dff cell `$procdff$8797' with positive edge clock.
Creating register for signal `\a25_decode.\control_state' using process `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
  created $dff cell `$procdff$8798' with positive edge clock.
Creating register for signal `\a25_decode.\iabt_reg' using process `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
  created $dff cell `$procdff$8799' with positive edge clock.
Creating register for signal `\a25_decode.\adex_reg' using process `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
  created $dff cell `$procdff$8800' with positive edge clock.
Creating register for signal `\a25_decode.\fetch_address_r' using process `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
  created $dff cell `$procdff$8801' with positive edge clock.
Creating register for signal `\a25_decode.\abt_status_reg' using process `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
  created $dff cell `$procdff$8802' with positive edge clock.
Creating register for signal `\a25_decode.\fetch_instruction_r' using process `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
  created $dff cell `$procdff$8803' with positive edge clock.
Creating register for signal `\a25_decode.\fetch_instruction_type_r' using process `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
  created $dff cell `$procdff$8804' with positive edge clock.
Creating register for signal `\a25_decode.\restore_base_address' using process `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
  created $dff cell `$procdff$8805' with positive edge clock.
Creating register for signal `\a25_decode.\load_rd_d1' using process `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
  created $dff cell `$procdff$8806' with positive edge clock.
Creating register for signal `\a25_decode.\o_rn_use_read' using process `\a25_decode.$proc$../my/arm_core.v:1584$558'.
  created $dff cell `$procdff$8807' with positive edge clock.
Creating register for signal `\a25_decode.\o_rm_use_read' using process `\a25_decode.$proc$../my/arm_core.v:1584$558'.
  created $dff cell `$procdff$8808' with positive edge clock.
Creating register for signal `\a25_decode.\o_rs_use_read' using process `\a25_decode.$proc$../my/arm_core.v:1584$558'.
  created $dff cell `$procdff$8809' with positive edge clock.
Creating register for signal `\a25_decode.\o_rd_use_read' using process `\a25_decode.$proc$../my/arm_core.v:1584$558'.
  created $dff cell `$procdff$8810' with positive edge clock.
Creating register for signal `\a25_decode.\instruction_execute_r' using process `\a25_decode.$proc$../my/arm_core.v:1584$558'.
  created $dff cell `$procdff$8811' with positive edge clock.
Creating register for signal `\a25_decode.\conflict_r' using process `\a25_decode.$proc$../my/arm_core.v:1584$558'.
  created $dff cell `$procdff$8812' with positive edge clock.
Creating register for signal `\a25_decode.\rn_conflict1_r' using process `\a25_decode.$proc$../my/arm_core.v:1584$558'.
  created $dff cell `$procdff$8813' with positive edge clock.
Creating register for signal `\a25_decode.\rm_conflict1_r' using process `\a25_decode.$proc$../my/arm_core.v:1584$558'.
  created $dff cell `$procdff$8814' with positive edge clock.
Creating register for signal `\a25_decode.\rs_conflict1_r' using process `\a25_decode.$proc$../my/arm_core.v:1584$558'.
  created $dff cell `$procdff$8815' with positive edge clock.
Creating register for signal `\a25_decode.\rd_conflict1_r' using process `\a25_decode.$proc$../my/arm_core.v:1584$558'.
  created $dff cell `$procdff$8816' with positive edge clock.
Creating register for signal `\a25_fetch.\wb_req_r' using process `\a25_fetch.$proc$../my/arm_core.v:834$285'.
  created $dff cell `$procdff$8817' with positive edge clock.
Creating register for signal `\a25_icache.\valid_bits_r' using process `\a25_icache.$proc$../my/arm_core.v:643$146'.
  created $dff cell `$procdff$8818' with positive edge clock.
Creating register for signal `\a25_icache.\wb_address' using process `\a25_icache.$proc$../my/arm_core.v:439$76'.
  created $dff cell `$procdff$8819' with positive edge clock.
Creating register for signal `\a25_icache.\address_r' using process `\a25_icache.$proc$../my/arm_core.v:433$74'.
  created $dff cell `$procdff$8820' with positive edge clock.
Creating register for signal `\a25_icache.\miss_address' using process `\a25_icache.$proc$../my/arm_core.v:428$72'.
  created $dff cell `$procdff$8821' with positive edge clock.
Creating register for signal `\a25_icache.\c_state' using process `\a25_icache.$proc$../my/arm_core.v:351$68'.
  created $dff cell `$procdff$8822' with positive edge clock.
Creating register for signal `\a25_icache.\source_sel' using process `\a25_icache.$proc$../my/arm_core.v:351$68'.
  created $dff cell `$procdff$8823' with positive edge clock.
Creating register for signal `\a25_icache.\init_count' using process `\a25_icache.$proc$../my/arm_core.v:351$68'.
  created $dff cell `$procdff$8824' with positive edge clock.
Creating register for signal `\a25_icache.\select_way' using process `\a25_icache.$proc$../my/arm_core.v:351$68'.
  created $dff cell `$procdff$8825' with positive edge clock.
Creating register for signal `\a25_icache.\random_num' using process `\a25_icache.$proc$../my/arm_core.v:351$68'.
  created $dff cell `$procdff$8826' with positive edge clock.
Creating register for signal `\a25_icache.\read_buf_data_r' using process `\a25_icache.$proc$../my/arm_core.v:331$63'.
  created $dff cell `$procdff$8827' with positive edge clock.
Creating register for signal `\a25_icache.\read_buf_addr_r' using process `\a25_icache.$proc$../my/arm_core.v:331$63'.
  created $dff cell `$procdff$8828' with positive edge clock.
Creating register for signal `\a25_icache.\read_buf_valid_r' using process `\a25_icache.$proc$../my/arm_core.v:331$63'.
  created $dff cell `$procdff$8829' with positive edge clock.
Creating register for signal `\a25_icache.\o_stall' using process `\a25_icache.$proc$../my/arm_core.v:322$59'.
  created $dff cell `$procdff$8830' with positive edge clock.
Creating register for signal `\single_port_ram_128_8.\out' using process `\single_port_ram_128_8.$proc$../my/arm_core.v:58$48'.
  created $dff cell `$procdff$8831' with positive edge clock.
Creating register for signal `\single_port_ram_128_8.$memwr$\RAM$../my/arm_core.v:62$47_ADDR' using process `\single_port_ram_128_8.$proc$../my/arm_core.v:58$48'.
  created $dff cell `$procdff$8832' with positive edge clock.
Creating register for signal `\single_port_ram_128_8.$memwr$\RAM$../my/arm_core.v:62$47_DATA' using process `\single_port_ram_128_8.$proc$../my/arm_core.v:58$48'.
  created $dff cell `$procdff$8833' with positive edge clock.
Creating register for signal `\single_port_ram_128_8.$memwr$\RAM$../my/arm_core.v:62$47_EN' using process `\single_port_ram_128_8.$proc$../my/arm_core.v:58$48'.
  created $dff cell `$procdff$8834' with positive edge clock.
Creating register for signal `\single_port_ram_21_8.\out' using process `\single_port_ram_21_8.$proc$../my/arm_core.v:24$39'.
  created $dff cell `$procdff$8835' with positive edge clock.
Creating register for signal `\single_port_ram_21_8.$memwr$\RAM$../my/arm_core.v:28$38_ADDR' using process `\single_port_ram_21_8.$proc$../my/arm_core.v:24$39'.
  created $dff cell `$procdff$8836' with positive edge clock.
Creating register for signal `\single_port_ram_21_8.$memwr$\RAM$../my/arm_core.v:28$38_DATA' using process `\single_port_ram_21_8.$proc$../my/arm_core.v:24$39'.
  created $dff cell `$procdff$8837' with positive edge clock.
Creating register for signal `\single_port_ram_21_8.$memwr$\RAM$../my/arm_core.v:28$38_EN' using process `\single_port_ram_21_8.$proc$../my/arm_core.v:24$39'.
  created $dff cell `$procdff$8838' with positive edge clock.
Creating register for signal `\a25_coprocessor.\o_copro_read_data' using process `\a25_coprocessor.$proc$../my/arm_core.v:7670$3384'.
  created $dff cell `$procdff$8839' with positive edge clock.
Creating register for signal `\a25_coprocessor.\cache_control' using process `\a25_coprocessor.$proc$../my/arm_core.v:7650$3376'.
  created $dff cell `$procdff$8840' with positive edge clock.
Creating register for signal `\a25_coprocessor.\cacheable_area' using process `\a25_coprocessor.$proc$../my/arm_core.v:7650$3376'.
  created $dff cell `$procdff$8841' with positive edge clock.
Creating register for signal `\a25_coprocessor.\updateable_area' using process `\a25_coprocessor.$proc$../my/arm_core.v:7650$3376'.
  created $dff cell `$procdff$8842' with positive edge clock.
Creating register for signal `\a25_coprocessor.\disruptive_area' using process `\a25_coprocessor.$proc$../my/arm_core.v:7650$3376'.
  created $dff cell `$procdff$8843' with positive edge clock.
Creating register for signal `\a25_coprocessor.\fault_status' using process `\a25_coprocessor.$proc$../my/arm_core.v:7635$3374'.
  created $dff cell `$procdff$8844' with positive edge clock.
Creating register for signal `\a25_coprocessor.\fault_address' using process `\a25_coprocessor.$proc$../my/arm_core.v:7635$3374'.
  created $dff cell `$procdff$8845' with positive edge clock.
Creating register for signal `\a25_wishbone.\o_wb_adr' using process `\a25_wishbone.$proc$../my/arm_core.v:7488$3363'.
  created $dff cell `$procdff$8846' with positive edge clock.
Creating register for signal `\a25_wishbone.\o_wb_sel' using process `\a25_wishbone.$proc$../my/arm_core.v:7488$3363'.
  created $dff cell `$procdff$8847' with positive edge clock.
Creating register for signal `\a25_wishbone.\o_wb_we' using process `\a25_wishbone.$proc$../my/arm_core.v:7488$3363'.
  created $dff cell `$procdff$8848' with positive edge clock.
Creating register for signal `\a25_wishbone.\o_wb_dat' using process `\a25_wishbone.$proc$../my/arm_core.v:7488$3363'.
  created $dff cell `$procdff$8849' with positive edge clock.
Creating register for signal `\a25_wishbone.\o_wb_cyc' using process `\a25_wishbone.$proc$../my/arm_core.v:7488$3363'.
  created $dff cell `$procdff$8850' with positive edge clock.
Creating register for signal `\a25_wishbone.\o_wb_stb' using process `\a25_wishbone.$proc$../my/arm_core.v:7488$3363'.
  created $dff cell `$procdff$8851' with positive edge clock.
Creating register for signal `\a25_wishbone.\serving_port' using process `\a25_wishbone.$proc$../my/arm_core.v:7488$3363'.
  created $dff cell `$procdff$8852' with positive edge clock.
Creating register for signal `\a25_wishbone_buf.\wait_rdata_valid_r' using process `\a25_wishbone_buf.$proc$../my/arm_core.v:7274$3341'.
  created $dff cell `$procdff$8853' with positive edge clock.
Creating register for signal `\a25_wishbone_buf.\busy_reading_r' using process `\a25_wishbone_buf.$proc$../my/arm_core.v:7268$3338'.
  created $dff cell `$procdff$8854' with positive edge clock.
Creating register for signal `\a25_wishbone_buf.\wbuf_rp_r' using process `\a25_wishbone_buf.$proc$../my/arm_core.v:7241$3311'.
  created $dff cell `$procdff$8855' with positive edge clock.
Creating register for signal `\a25_wishbone_buf.\wbuf_addr_r0' using process `\a25_wishbone_buf.$proc$../my/arm_core.v:7218$3305'.
  created $dff cell `$procdff$8856' with positive edge clock.
Creating register for signal `\a25_wishbone_buf.\wbuf_addr_r1' using process `\a25_wishbone_buf.$proc$../my/arm_core.v:7218$3305'.
  created $dff cell `$procdff$8857' with positive edge clock.
Creating register for signal `\a25_wishbone_buf.\wbuf_wdata_r0' using process `\a25_wishbone_buf.$proc$../my/arm_core.v:7218$3305'.
  created $dff cell `$procdff$8858' with positive edge clock.
Creating register for signal `\a25_wishbone_buf.\wbuf_wdata_r1' using process `\a25_wishbone_buf.$proc$../my/arm_core.v:7218$3305'.
  created $dff cell `$procdff$8859' with positive edge clock.
Creating register for signal `\a25_wishbone_buf.\wbuf_be_r0' using process `\a25_wishbone_buf.$proc$../my/arm_core.v:7218$3305'.
  created $dff cell `$procdff$8860' with positive edge clock.
Creating register for signal `\a25_wishbone_buf.\wbuf_be_r1' using process `\a25_wishbone_buf.$proc$../my/arm_core.v:7218$3305'.
  created $dff cell `$procdff$8861' with positive edge clock.
Creating register for signal `\a25_wishbone_buf.\wbuf_write_r' using process `\a25_wishbone_buf.$proc$../my/arm_core.v:7218$3305'.
  created $dff cell `$procdff$8862' with positive edge clock.
Creating register for signal `\a25_wishbone_buf.\wbuf_wp_r' using process `\a25_wishbone_buf.$proc$../my/arm_core.v:7218$3305'.
  created $dff cell `$procdff$8863' with positive edge clock.
Creating register for signal `\a25_wishbone_buf.\ack_owed_r' using process `\a25_wishbone_buf.$proc$../my/arm_core.v:7212$3299'.
  created $dff cell `$procdff$8864' with positive edge clock.
Creating register for signal `\a25_wishbone_buf.\wbuf_used_r' using process `\a25_wishbone_buf.$proc$../my/arm_core.v:7204$3295'.
  created $dff cell `$procdff$8865' with positive edge clock.
Creating register for signal `\a25_write_back.\mem_read_data_r' using process `\a25_write_back.$proc$../my/arm_core.v:7109$3278'.
  created $dff cell `$procdff$8866' with positive edge clock.
Creating register for signal `\a25_write_back.\mem_read_data_valid_r' using process `\a25_write_back.$proc$../my/arm_core.v:7109$3278'.
  created $dff cell `$procdff$8867' with positive edge clock.
Creating register for signal `\a25_write_back.\mem_load_rd_r' using process `\a25_write_back.$proc$../my/arm_core.v:7109$3278'.
  created $dff cell `$procdff$8868' with positive edge clock.
Creating register for signal `\a25_mem.\mem_read_data_r' using process `\a25_mem.$proc$../my/arm_core.v:7029$3266'.
  created $dff cell `$procdff$8869' with positive edge clock.
Creating register for signal `\a25_mem.\mem_read_data_valid_r' using process `\a25_mem.$proc$../my/arm_core.v:7029$3266'.
  created $dff cell `$procdff$8870' with positive edge clock.
Creating register for signal `\a25_mem.\mem_load_rd_r' using process `\a25_mem.$proc$../my/arm_core.v:7029$3266'.
  created $dff cell `$procdff$8871' with positive edge clock.
Creating register for signal `\a25_mem.\uncached_wb_stop_r' using process `\a25_mem.$proc$../my/arm_core.v:7017$3253'.
  created $dff cell `$procdff$8872' with positive edge clock.
Creating register for signal `\a25_mem.\cached_wb_stop_r' using process `\a25_mem.$proc$../my/arm_core.v:7017$3253'.
  created $dff cell `$procdff$8873' with positive edge clock.
Creating register for signal `\a25_mem.\mem_stall_r' using process `\a25_mem.$proc$../my/arm_core.v:7017$3253'.
  created $dff cell `$procdff$8874' with positive edge clock.
Creating register for signal `\a25_mem.\daddress_valid_stop_r' using process `\a25_mem.$proc$../my/arm_core.v:7017$3253'.
  created $dff cell `$procdff$8875' with positive edge clock.
Creating register for signal `\a25_mem.\fetch_only_stall_r' using process `\a25_mem.$proc$../my/arm_core.v:7008$3247'.
  created $dff cell `$procdff$8876' with positive edge clock.
Creating register for signal `\a25_mem.\uncached_wb_req_r' using process `\a25_mem.$proc$../my/arm_core.v:7001$3241'.
  created $dff cell `$procdff$8877' with positive edge clock.
Creating register for signal `\a25_dcache.\valid_bits_r' using process `\a25_dcache.$proc$../my/arm_core.v:6371$3077'.
  created $dff cell `$procdff$8878' with positive edge clock.
Creating register for signal `\a25_dcache.\ex_read_address' using process `\a25_dcache.$proc$../my/arm_core.v:6057$2913'.
  created $dff cell `$procdff$8879' with positive edge clock.
Creating register for signal `\a25_dcache.\ex_read_hit_r' using process `\a25_dcache.$proc$../my/arm_core.v:6036$2910'.
  created $dff cell `$procdff$8880' with positive edge clock.
Creating register for signal `\a25_dcache.\ex_read_hit_way' using process `\a25_dcache.$proc$../my/arm_core.v:6036$2910'.
  created $dff cell `$procdff$8881' with positive edge clock.
Creating register for signal `\a25_dcache.\request_r' using process `\a25_dcache.$proc$../my/arm_core.v:6025$2905'.
  created $dff cell `$procdff$8882' with positive edge clock.
Creating register for signal `\a25_dcache.\wb_address' using process `\a25_dcache.$proc$../my/arm_core.v:6012$2898'.
  created $dff cell `$procdff$8883' with positive edge clock.
Creating register for signal `\a25_dcache.\data_wdata_r' using process `\a25_dcache.$proc$../my/arm_core.v:6000$2891'.
  created $dff cell `$procdff$8884' with positive edge clock.
Creating register for signal `\a25_dcache.\data_hit_way_r' using process `\a25_dcache.$proc$../my/arm_core.v:5994$2890'.
  created $dff cell `$procdff$8885' with positive edge clock.
Creating register for signal `\a25_dcache.\miss_address' using process `\a25_dcache.$proc$../my/arm_core.v:5990$2888'.
  created $dff cell `$procdff$8886' with positive edge clock.
Creating register for signal `\a25_dcache.\wb_rdata_burst' using process `\a25_dcache.$proc$../my/arm_core.v:5981$2887'.
  created $dff cell `$procdff$8887' with positive edge clock.
Creating register for signal `\a25_dcache.\c_state' using process `\a25_dcache.$proc$../my/arm_core.v:5854$2878'.
  created $dff cell `$procdff$8888' with positive edge clock.
Creating register for signal `\a25_dcache.\source_sel' using process `\a25_dcache.$proc$../my/arm_core.v:5854$2878'.
  created $dff cell `$procdff$8889' with positive edge clock.
Creating register for signal `\a25_dcache.\init_count' using process `\a25_dcache.$proc$../my/arm_core.v:5854$2878'.
  created $dff cell `$procdff$8890' with positive edge clock.
Creating register for signal `\a25_dcache.\select_way' using process `\a25_dcache.$proc$../my/arm_core.v:5854$2878'.
  created $dff cell `$procdff$8891' with positive edge clock.
Creating register for signal `\a25_dcache.\random_num' using process `\a25_dcache.$proc$../my/arm_core.v:5854$2878'.
  created $dff cell `$procdff$8892' with positive edge clock.
Creating register for signal `\a25_execute.\o_copro_write_data' using process `\a25_execute.$proc$../my/arm_core.v:5325$2820'.
  created $dff cell `$procdff$8893' with positive edge clock.
Creating register for signal `\a25_execute.\o_write_data' using process `\a25_execute.$proc$../my/arm_core.v:5325$2820'.
  created $dff cell `$procdff$8894' with positive edge clock.
Creating register for signal `\a25_execute.\o_iaddress' using process `\a25_execute.$proc$../my/arm_core.v:5325$2820'.
  created $dff cell `$procdff$8895' with positive edge clock.
Creating register for signal `\a25_execute.\o_iaddress_valid' using process `\a25_execute.$proc$../my/arm_core.v:5325$2820'.
  created $dff cell `$procdff$8896' with positive edge clock.
Creating register for signal `\a25_execute.\o_daddress' using process `\a25_execute.$proc$../my/arm_core.v:5325$2820'.
  created $dff cell `$procdff$8897' with positive edge clock.
Creating register for signal `\a25_execute.\o_daddress_valid' using process `\a25_execute.$proc$../my/arm_core.v:5325$2820'.
  created $dff cell `$procdff$8898' with positive edge clock.
Creating register for signal `\a25_execute.\o_adex' using process `\a25_execute.$proc$../my/arm_core.v:5325$2820'.
  created $dff cell `$procdff$8899' with positive edge clock.
Creating register for signal `\a25_execute.\o_priviledged' using process `\a25_execute.$proc$../my/arm_core.v:5325$2820'.
  created $dff cell `$procdff$8900' with positive edge clock.
Creating register for signal `\a25_execute.\o_exclusive' using process `\a25_execute.$proc$../my/arm_core.v:5325$2820'.
  created $dff cell `$procdff$8901' with positive edge clock.
Creating register for signal `\a25_execute.\o_write_enable' using process `\a25_execute.$proc$../my/arm_core.v:5325$2820'.
  created $dff cell `$procdff$8902' with positive edge clock.
Creating register for signal `\a25_execute.\o_byte_enable' using process `\a25_execute.$proc$../my/arm_core.v:5325$2820'.
  created $dff cell `$procdff$8903' with positive edge clock.
Creating register for signal `\a25_execute.\o_exec_load_rd' using process `\a25_execute.$proc$../my/arm_core.v:5325$2820'.
  created $dff cell `$procdff$8904' with positive edge clock.
Creating register for signal `\a25_execute.\status_bits_flags' using process `\a25_execute.$proc$../my/arm_core.v:5325$2820'.
  created $dff cell `$procdff$8905' with positive edge clock.
Creating register for signal `\a25_execute.\status_bits_mode' using process `\a25_execute.$proc$../my/arm_core.v:5325$2820'.
  created $dff cell `$procdff$8906' with positive edge clock.
Creating register for signal `\a25_execute.\status_bits_mode_rds_oh' using process `\a25_execute.$proc$../my/arm_core.v:5325$2820'.
  created $dff cell `$procdff$8907' with positive edge clock.
Creating register for signal `\a25_execute.\status_bits_irq_mask' using process `\a25_execute.$proc$../my/arm_core.v:5325$2820'.
  created $dff cell `$procdff$8908' with positive edge clock.
Creating register for signal `\a25_execute.\status_bits_firq_mask' using process `\a25_execute.$proc$../my/arm_core.v:5325$2820'.
  created $dff cell `$procdff$8909' with positive edge clock.
Creating register for signal `\a25_execute.\base_address' using process `\a25_execute.$proc$../my/arm_core.v:5325$2820'.
  created $dff cell `$procdff$8910' with positive edge clock.
Creating register for signal `\a25_execute.\read_data_filtered_r' using process `\a25_execute.$proc$../my/arm_core.v:5281$2776'.
  created $dff cell `$procdff$8911' with positive edge clock.
Creating register for signal `\a25_execute.\load_rd_r' using process `\a25_execute.$proc$../my/arm_core.v:5281$2776'.
  created $dff cell `$procdff$8912' with positive edge clock.

7.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

7.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `a25_multiply.$proc$../my/arm_core.v:4429$2501'.
Removing empty process `a25_multiply.$proc$../my/arm_core.v:4427$2500'.
Removing empty process `a25_multiply.$proc$../my/arm_core.v:4419$2499'.
Found and cleaned up 1 empty switch in `\a25_multiply.$proc$../my/arm_core.v:4494$2493'.
Removing empty process `a25_multiply.$proc$../my/arm_core.v:4494$2493'.
Found and cleaned up 5 empty switches in `\a25_multiply.$proc$../my/arm_core.v:4458$2478'.
Removing empty process `a25_multiply.$proc$../my/arm_core.v:4458$2478'.
Removing empty process `a25_register_bank.$proc$../my/arm_core.v:4095$2469'.
Removing empty process `a25_register_bank.$proc$../my/arm_core.v:4094$2468'.
Removing empty process `a25_register_bank.$proc$../my/arm_core.v:4093$2467'.
Removing empty process `a25_register_bank.$proc$../my/arm_core.v:4092$2466'.
Removing empty process `a25_register_bank.$proc$../my/arm_core.v:4091$2465'.
Removing empty process `a25_register_bank.$proc$../my/arm_core.v:4090$2464'.
Removing empty process `a25_register_bank.$proc$../my/arm_core.v:4089$2463'.
Removing empty process `a25_register_bank.$proc$../my/arm_core.v:4086$2462'.
Removing empty process `a25_register_bank.$proc$../my/arm_core.v:4085$2461'.
Removing empty process `a25_register_bank.$proc$../my/arm_core.v:4082$2460'.
Removing empty process `a25_register_bank.$proc$../my/arm_core.v:4081$2459'.
Removing empty process `a25_register_bank.$proc$../my/arm_core.v:4051$2458'.
Removing empty process `a25_register_bank.$proc$../my/arm_core.v:4050$2457'.
Removing empty process `a25_register_bank.$proc$../my/arm_core.v:4049$2456'.
Removing empty process `a25_register_bank.$proc$../my/arm_core.v:4048$2455'.
Removing empty process `a25_register_bank.$proc$../my/arm_core.v:4047$2454'.
Removing empty process `a25_register_bank.$proc$../my/arm_core.v:4046$2453'.
Removing empty process `a25_register_bank.$proc$../my/arm_core.v:4045$2452'.
Removing empty process `a25_register_bank.$proc$../my/arm_core.v:4044$2451'.
Removing empty process `a25_register_bank.$proc$../my/arm_core.v:4043$2450'.
Removing empty process `a25_register_bank.$proc$../my/arm_core.v:4042$2449'.
Removing empty process `a25_register_bank.$proc$../my/arm_core.v:4041$2448'.
Removing empty process `a25_register_bank.$proc$../my/arm_core.v:4040$2447'.
Removing empty process `a25_register_bank.$proc$../my/arm_core.v:4039$2446'.
Removing empty process `a25_register_bank.$proc$../my/arm_core.v:4038$2445'.
Removing empty process `a25_register_bank.$proc$../my/arm_core.v:4037$2444'.
Removing empty process `a25_register_bank.$proc$../my/arm_core.v:4036$2443'.
Found and cleaned up 1 empty switch in `\a25_register_bank.$proc$../my/arm_core.v:4348$2412'.
Removing empty process `a25_register_bank.$proc$../my/arm_core.v:4348$2412'.
Found and cleaned up 1 empty switch in `\a25_register_bank.$proc$../my/arm_core.v:4322$2411'.
Removing empty process `a25_register_bank.$proc$../my/arm_core.v:4322$2411'.
Removing empty process `a25_register_bank.$proc$../my/arm_core.v:4183$2245'.
Found and cleaned up 1 empty switch in `\a25_register_bank.$proc$../my/arm_core.v:4128$2233'.
Removing empty process `a25_register_bank.$proc$../my/arm_core.v:4128$2233'.
Removing empty process `a25_barrel_shift.$proc$../my/arm_core.v:3789$2225'.
Removing empty process `a25_barrel_shift.$proc$../my/arm_core.v:3788$2224'.
Removing empty process `a25_barrel_shift.$proc$../my/arm_core.v:3787$2223'.
Removing empty process `a25_barrel_shift.$proc$../my/arm_core.v:3799$2221'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1372$1912'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1371$1911'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1370$1910'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1369$1909'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1368$1908'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1346$1907'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1335$1906'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1328$1905'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1327$1904'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1311$1903'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1307$1902'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1306$1901'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1305$1900'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1304$1899'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1303$1898'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1302$1897'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1301$1896'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1300$1895'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1299$1894'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1298$1893'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1297$1892'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1296$1891'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1295$1890'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1294$1889'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1293$1888'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1292$1887'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1291$1886'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1290$1885'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1289$1884'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1288$1883'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1287$1882'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1286$1881'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1285$1880'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1284$1879'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1282$1878'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1277$1877'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1220$1876'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1087$1875'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1084$1874'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1083$1873'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1082$1872'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1081$1871'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1080$1870'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1079$1869'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1074$1868'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1073$1867'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1072$1866'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1071$1865'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1070$1864'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1069$1863'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1067$1862'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1066$1861'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1061$1860'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1060$1859'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1059$1858'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1058$1857'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1057$1856'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1056$1855'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1055$1854'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1054$1853'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1053$1852'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1052$1851'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1051$1850'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1050$1849'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1048$1848'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1047$1847'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1046$1846'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1044$1845'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1043$1844'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1042$1843'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1041$1842'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1040$1841'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1039$1840'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1038$1839'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1037$1838'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1036$1837'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1035$1836'.
Found and cleaned up 2 empty switches in `\a25_decode.$proc$../my/arm_core.v:3119$1829'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:3119$1829'.
Found and cleaned up 4 empty switches in `\a25_decode.$proc$../my/arm_core.v:3070$1826'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:3070$1826'.
Found and cleaned up 2 empty switches in `\a25_decode.$proc$../my/arm_core.v:2974$1794'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:2974$1794'.
Found and cleaned up 36 empty switches in `\a25_decode.$proc$../my/arm_core.v:2837$1743'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:2837$1743'.
Found and cleaned up 3 empty switches in `\a25_decode.$proc$../my/arm_core.v:2775$1643'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:2775$1643'.
Found and cleaned up 5 empty switches in `\a25_decode.$proc$../my/arm_core.v:2735$1620'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:2735$1620'.
Found and cleaned up 3 empty switches in `\a25_decode.$proc$../my/arm_core.v:2722$1605'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:2722$1605'.
Found and cleaned up 11 empty switches in `\a25_decode.$proc$../my/arm_core.v:2573$1361'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:2573$1361'.
Found and cleaned up 21 empty switches in `\a25_decode.$proc$../my/arm_core.v:2513$1313'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:2513$1313'.
Found and cleaned up 1 empty switch in `\a25_decode.$proc$../my/arm_core.v:2505$1306'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:2505$1306'.
Found and cleaned up 1 empty switch in `\a25_decode.$proc$../my/arm_core.v:2497$1295'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:2497$1295'.
Found and cleaned up 6 empty switches in `\a25_decode.$proc$../my/arm_core.v:2476$1273'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:2476$1273'.
Found and cleaned up 15 empty switches in `\a25_decode.$proc$../my/arm_core.v:2434$1247'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:2434$1247'.
Found and cleaned up 7 empty switches in `\a25_decode.$proc$../my/arm_core.v:2410$1230'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:2410$1230'.
Found and cleaned up 9 empty switches in `\a25_decode.$proc$../my/arm_core.v:2380$1212'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:2380$1212'.
Found and cleaned up 10 empty switches in `\a25_decode.$proc$../my/arm_core.v:2347$1193'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:2347$1193'.
Found and cleaned up 3 empty switches in `\a25_decode.$proc$../my/arm_core.v:2332$1184'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:2332$1184'.
Found and cleaned up 3 empty switches in `\a25_decode.$proc$../my/arm_core.v:2319$1166'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:2319$1166'.
Found and cleaned up 8 empty switches in `\a25_decode.$proc$../my/arm_core.v:2289$1145'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:2289$1145'.
Found and cleaned up 3 empty switches in `\a25_decode.$proc$../my/arm_core.v:2276$1128'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:2276$1128'.
Found and cleaned up 3 empty switches in `\a25_decode.$proc$../my/arm_core.v:2261$1114'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:2261$1114'.
Found and cleaned up 9 empty switches in `\a25_decode.$proc$../my/arm_core.v:2232$1066'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:2232$1066'.
Found and cleaned up 8 empty switches in `\a25_decode.$proc$../my/arm_core.v:2203$1029'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:2203$1029'.
Found and cleaned up 11 empty switches in `\a25_decode.$proc$../my/arm_core.v:2161$1012'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:2161$1012'.
Found and cleaned up 15 empty switches in `\a25_decode.$proc$../my/arm_core.v:2113$956'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:2113$956'.
Found and cleaned up 6 empty switches in `\a25_decode.$proc$../my/arm_core.v:2089$942'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:2089$942'.
Found and cleaned up 3 empty switches in `\a25_decode.$proc$../my/arm_core.v:2074$929'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:2074$929'.
Found and cleaned up 5 empty switches in `\a25_decode.$proc$../my/arm_core.v:2054$913'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:2054$913'.
Found and cleaned up 5 empty switches in `\a25_decode.$proc$../my/arm_core.v:2032$897'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:2032$897'.
Found and cleaned up 1 empty switch in `\a25_decode.$proc$../my/arm_core.v:2005$858'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:2005$858'.
Found and cleaned up 5 empty switches in `\a25_decode.$proc$../my/arm_core.v:1989$839'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1989$839'.
Found and cleaned up 9 empty switches in `\a25_decode.$proc$../my/arm_core.v:1958$811'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1958$811'.
Found and cleaned up 4 empty switches in `\a25_decode.$proc$../my/arm_core.v:1935$797'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1935$797'.
Found and cleaned up 4 empty switches in `\a25_decode.$proc$../my/arm_core.v:1916$777'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1916$777'.
Found and cleaned up 7 empty switches in `\a25_decode.$proc$../my/arm_core.v:1891$761'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1891$761'.
Found and cleaned up 1 empty switch in `\a25_decode.$proc$../my/arm_core.v:1882$754'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1882$754'.
Found and cleaned up 1 empty switch in `\a25_decode.$proc$../my/arm_core.v:1872$748'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1872$748'.
Found and cleaned up 3 empty switches in `\a25_decode.$proc$../my/arm_core.v:1853$738'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1853$738'.
Found and cleaned up 4 empty switches in `\a25_decode.$proc$../my/arm_core.v:1831$727'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1831$727'.
Found and cleaned up 15 empty switches in `\a25_decode.$proc$../my/arm_core.v:1708$651'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1708$651'.
Found and cleaned up 15 empty switches in `\a25_decode.$proc$../my/arm_core.v:1670$590'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1670$590'.
Found and cleaned up 15 empty switches in `\a25_decode.$proc$../my/arm_core.v:1609$572'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1609$572'.
Found and cleaned up 1 empty switch in `\a25_decode.$proc$../my/arm_core.v:1584$558'.
Removing empty process `a25_decode.$proc$../my/arm_core.v:1584$558'.
Removing empty process `a25_fetch.$proc$../my/arm_core.v:737$291'.
Removing empty process `a25_fetch.$proc$../my/arm_core.v:834$285'.
Removing empty process `a25_icache.$proc$../my/arm_core.v:288$180'.
Removing empty process `a25_icache.$proc$../my/arm_core.v:286$179'.
Removing empty process `a25_icache.$proc$../my/arm_core.v:277$178'.
Removing empty process `a25_icache.$proc$../my/arm_core.v:262$177'.
Removing empty process `a25_icache.$proc$../my/arm_core.v:260$176'.
Removing empty process `a25_icache.$proc$../my/arm_core.v:258$175'.
Removing empty process `a25_icache.$proc$../my/arm_core.v:245$174'.
Removing empty process `a25_icache.$proc$../my/arm_core.v:244$173'.
Removing empty process `a25_icache.$proc$../my/arm_core.v:243$172'.
Found and cleaned up 1 empty switch in `\a25_icache.$proc$../my/arm_core.v:643$146'.
Removing empty process `a25_icache.$proc$../my/arm_core.v:643$146'.
Found and cleaned up 2 empty switches in `\a25_icache.$proc$../my/arm_core.v:439$76'.
Removing empty process `a25_icache.$proc$../my/arm_core.v:439$76'.
Removing empty process `a25_icache.$proc$../my/arm_core.v:433$74'.
Found and cleaned up 1 empty switch in `\a25_icache.$proc$../my/arm_core.v:428$72'.
Removing empty process `a25_icache.$proc$../my/arm_core.v:428$72'.
Found and cleaned up 5 empty switches in `\a25_icache.$proc$../my/arm_core.v:351$68'.
Removing empty process `a25_icache.$proc$../my/arm_core.v:351$68'.
Found and cleaned up 3 empty switches in `\a25_icache.$proc$../my/arm_core.v:331$63'.
Removing empty process `a25_icache.$proc$../my/arm_core.v:331$63'.
Removing empty process `a25_icache.$proc$../my/arm_core.v:322$59'.
Found and cleaned up 1 empty switch in `\single_port_ram_128_8.$proc$../my/arm_core.v:58$48'.
Removing empty process `single_port_ram_128_8.$proc$../my/arm_core.v:58$48'.
Found and cleaned up 1 empty switch in `\single_port_ram_21_8.$proc$../my/arm_core.v:24$39'.
Removing empty process `single_port_ram_21_8.$proc$../my/arm_core.v:24$39'.
Removing empty process `a25_coprocessor.$proc$../my/arm_core.v:7620$3391'.
Removing empty process `a25_coprocessor.$proc$../my/arm_core.v:7619$3390'.
Removing empty process `a25_coprocessor.$proc$../my/arm_core.v:7616$3389'.
Removing empty process `a25_coprocessor.$proc$../my/arm_core.v:7610$3388'.
Removing empty process `a25_coprocessor.$proc$../my/arm_core.v:7605$3387'.
Removing empty process `a25_coprocessor.$proc$../my/arm_core.v:7601$3386'.
Found and cleaned up 2 empty switches in `\a25_coprocessor.$proc$../my/arm_core.v:7670$3384'.
Removing empty process `a25_coprocessor.$proc$../my/arm_core.v:7670$3384'.
Found and cleaned up 3 empty switches in `\a25_coprocessor.$proc$../my/arm_core.v:7650$3376'.
Removing empty process `a25_coprocessor.$proc$../my/arm_core.v:7650$3376'.
Found and cleaned up 2 empty switches in `\a25_coprocessor.$proc$../my/arm_core.v:7635$3374'.
Removing empty process `a25_coprocessor.$proc$../my/arm_core.v:7635$3374'.
Removing empty process `a25_wishbone.$proc$../my/arm_core.v:7397$3373'.
Removing empty process `a25_wishbone.$proc$../my/arm_core.v:7379$3372'.
Removing empty process `a25_wishbone.$proc$../my/arm_core.v:7378$3371'.
Removing empty process `a25_wishbone.$proc$../my/arm_core.v:7377$3370'.
Removing empty process `a25_wishbone.$proc$../my/arm_core.v:7376$3369'.
Removing empty process `a25_wishbone.$proc$../my/arm_core.v:7375$3368'.
Removing empty process `a25_wishbone.$proc$../my/arm_core.v:7374$3367'.
Found and cleaned up 4 empty switches in `\a25_wishbone.$proc$../my/arm_core.v:7488$3363'.
Removing empty process `a25_wishbone.$proc$../my/arm_core.v:7488$3363'.
Removing empty process `a25_wishbone_buf.$proc$../my/arm_core.v:7193$3351'.
Removing empty process `a25_wishbone_buf.$proc$../my/arm_core.v:7191$3350'.
Removing empty process `a25_wishbone_buf.$proc$../my/arm_core.v:7190$3349'.
Removing empty process `a25_wishbone_buf.$proc$../my/arm_core.v:7189$3348'.
Removing empty process `a25_wishbone_buf.$proc$../my/arm_core.v:7188$3347'.
Removing empty process `a25_wishbone_buf.$proc$../my/arm_core.v:7187$3346'.
Removing empty process `a25_wishbone_buf.$proc$../my/arm_core.v:7177$3345'.
Found and cleaned up 2 empty switches in `\a25_wishbone_buf.$proc$../my/arm_core.v:7274$3341'.
Removing empty process `a25_wishbone_buf.$proc$../my/arm_core.v:7274$3341'.
Found and cleaned up 2 empty switches in `\a25_wishbone_buf.$proc$../my/arm_core.v:7268$3338'.
Removing empty process `a25_wishbone_buf.$proc$../my/arm_core.v:7268$3338'.
Found and cleaned up 1 empty switch in `\a25_wishbone_buf.$proc$../my/arm_core.v:7241$3311'.
Removing empty process `a25_wishbone_buf.$proc$../my/arm_core.v:7241$3311'.
Found and cleaned up 3 empty switches in `\a25_wishbone_buf.$proc$../my/arm_core.v:7218$3305'.
Removing empty process `a25_wishbone_buf.$proc$../my/arm_core.v:7218$3305'.
Found and cleaned up 2 empty switches in `\a25_wishbone_buf.$proc$../my/arm_core.v:7212$3299'.
Removing empty process `a25_wishbone_buf.$proc$../my/arm_core.v:7212$3299'.
Found and cleaned up 3 empty switches in `\a25_wishbone_buf.$proc$../my/arm_core.v:7204$3295'.
Removing empty process `a25_wishbone_buf.$proc$../my/arm_core.v:7204$3295'.
Removing empty process `a25_write_back.$proc$../my/arm_core.v:7102$3282'.
Removing empty process `a25_write_back.$proc$../my/arm_core.v:7101$3281'.
Removing empty process `a25_write_back.$proc$../my/arm_core.v:7100$3280'.
Found and cleaned up 1 empty switch in `\a25_write_back.$proc$../my/arm_core.v:7109$3278'.
Removing empty process `a25_write_back.$proc$../my/arm_core.v:7109$3278'.
Removing empty process `a25_mem.$proc$../my/arm_core.v:6787$3277'.
Removing empty process `a25_mem.$proc$../my/arm_core.v:6783$3276'.
Removing empty process `a25_mem.$proc$../my/arm_core.v:6781$3275'.
Removing empty process `a25_mem.$proc$../my/arm_core.v:6777$3274'.
Removing empty process `a25_mem.$proc$../my/arm_core.v:6776$3273'.
Removing empty process `a25_mem.$proc$../my/arm_core.v:6775$3272'.
Removing empty process `a25_mem.$proc$../my/arm_core.v:6773$3271'.
Removing empty process `a25_mem.$proc$../my/arm_core.v:6772$3270'.
Removing empty process `a25_mem.$proc$../my/arm_core.v:6771$3269'.
Found and cleaned up 1 empty switch in `\a25_mem.$proc$../my/arm_core.v:7029$3266'.
Removing empty process `a25_mem.$proc$../my/arm_core.v:7029$3266'.
Removing empty process `a25_mem.$proc$../my/arm_core.v:7017$3253'.
Removing empty process `a25_mem.$proc$../my/arm_core.v:7008$3247'.
Removing empty process `a25_mem.$proc$../my/arm_core.v:7001$3241'.
Removing empty process `a25_dcache.$proc$../my/arm_core.v:5810$3116'.
Removing empty process `a25_dcache.$proc$../my/arm_core.v:5805$3115'.
Removing empty process `a25_dcache.$proc$../my/arm_core.v:5804$3114'.
Removing empty process `a25_dcache.$proc$../my/arm_core.v:5800$3113'.
Removing empty process `a25_dcache.$proc$../my/arm_core.v:5798$3112'.
Removing empty process `a25_dcache.$proc$../my/arm_core.v:5787$3111'.
Removing empty process `a25_dcache.$proc$../my/arm_core.v:5774$3110'.
Removing empty process `a25_dcache.$proc$../my/arm_core.v:5766$3109'.
Removing empty process `a25_dcache.$proc$../my/arm_core.v:5764$3108'.
Removing empty process `a25_dcache.$proc$../my/arm_core.v:5762$3107'.
Removing empty process `a25_dcache.$proc$../my/arm_core.v:5760$3106'.
Removing empty process `a25_dcache.$proc$../my/arm_core.v:5748$3105'.
Removing empty process `a25_dcache.$proc$../my/arm_core.v:5747$3104'.
Removing empty process `a25_dcache.$proc$../my/arm_core.v:5745$3103'.
Found and cleaned up 1 empty switch in `\a25_dcache.$proc$../my/arm_core.v:6371$3077'.
Removing empty process `a25_dcache.$proc$../my/arm_core.v:6371$3077'.
Found and cleaned up 1 empty switch in `\a25_dcache.$proc$../my/arm_core.v:6057$2913'.
Removing empty process `a25_dcache.$proc$../my/arm_core.v:6057$2913'.
Found and cleaned up 3 empty switches in `\a25_dcache.$proc$../my/arm_core.v:6036$2910'.
Removing empty process `a25_dcache.$proc$../my/arm_core.v:6036$2910'.
Removing empty process `a25_dcache.$proc$../my/arm_core.v:6025$2905'.
Found and cleaned up 2 empty switches in `\a25_dcache.$proc$../my/arm_core.v:6012$2898'.
Removing empty process `a25_dcache.$proc$../my/arm_core.v:6012$2898'.
Found and cleaned up 1 empty switch in `\a25_dcache.$proc$../my/arm_core.v:6000$2891'.
Removing empty process `a25_dcache.$proc$../my/arm_core.v:6000$2891'.
Found and cleaned up 1 empty switch in `\a25_dcache.$proc$../my/arm_core.v:5994$2890'.
Removing empty process `a25_dcache.$proc$../my/arm_core.v:5994$2890'.
Found and cleaned up 1 empty switch in `\a25_dcache.$proc$../my/arm_core.v:5990$2888'.
Removing empty process `a25_dcache.$proc$../my/arm_core.v:5990$2888'.
Found and cleaned up 1 empty switch in `\a25_dcache.$proc$../my/arm_core.v:5981$2887'.
Removing empty process `a25_dcache.$proc$../my/arm_core.v:5981$2887'.
Found and cleaned up 12 empty switches in `\a25_dcache.$proc$../my/arm_core.v:5854$2878'.
Removing empty process `a25_dcache.$proc$../my/arm_core.v:5854$2878'.
Removing empty process `a25_execute.$proc$../my/arm_core.v:4952$2858'.
Removing empty process `a25_execute.$proc$../my/arm_core.v:4951$2857'.
Removing empty process `a25_execute.$proc$../my/arm_core.v:4946$2856'.
Removing empty process `a25_execute.$proc$../my/arm_core.v:4937$2855'.
Removing empty process `a25_execute.$proc$../my/arm_core.v:4935$2854'.
Removing empty process `a25_execute.$proc$../my/arm_core.v:4932$2853'.
Removing empty process `a25_execute.$proc$../my/arm_core.v:4927$2852'.
Removing empty process `a25_execute.$proc$../my/arm_core.v:4925$2851'.
Removing empty process `a25_execute.$proc$../my/arm_core.v:4892$2850'.
Removing empty process `a25_execute.$proc$../my/arm_core.v:4891$2849'.
Removing empty process `a25_execute.$proc$../my/arm_core.v:4890$2848'.
Removing empty process `a25_execute.$proc$../my/arm_core.v:4889$2847'.
Removing empty process `a25_execute.$proc$../my/arm_core.v:4888$2846'.
Removing empty process `a25_execute.$proc$../my/arm_core.v:4887$2845'.
Removing empty process `a25_execute.$proc$../my/arm_core.v:4886$2844'.
Removing empty process `a25_execute.$proc$../my/arm_core.v:4884$2843'.
Removing empty process `a25_execute.$proc$../my/arm_core.v:4883$2842'.
Removing empty process `a25_execute.$proc$../my/arm_core.v:4881$2841'.
Removing empty process `a25_execute.$proc$../my/arm_core.v:4880$2840'.
Removing empty process `a25_execute.$proc$../my/arm_core.v:4879$2839'.
Removing empty process `a25_execute.$proc$../my/arm_core.v:5325$2820'.
Found and cleaned up 1 empty switch in `\a25_execute.$proc$../my/arm_core.v:5281$2776'.
Removing empty process `a25_execute.$proc$../my/arm_core.v:5281$2776'.
Cleaned up 376 empty switches.

7.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module a25_alu.
<suppressed ~5 debug messages>
Optimizing module a25_multiply.
<suppressed ~6 debug messages>
Optimizing module a25_register_bank.
<suppressed ~9 debug messages>
Optimizing module a25_barrel_shift.
Optimizing module a25_shifter_full.
<suppressed ~6 debug messages>
Optimizing module a25_shifter_quick.
<suppressed ~5 debug messages>
Optimizing module a25_decode.
<suppressed ~148 debug messages>
Optimizing module a25_fetch.
<suppressed ~3 debug messages>
Optimizing module a25_icache.
<suppressed ~14 debug messages>
Optimizing module single_port_ram_128_8.
Optimizing module single_port_ram_21_8.
Optimizing module arm_core.
Optimizing module a25_coprocessor.
<suppressed ~8 debug messages>
Optimizing module a25_wishbone.
Optimizing module a25_wishbone_buf.
<suppressed ~26 debug messages>
Optimizing module a25_write_back.
<suppressed ~3 debug messages>
Optimizing module a25_mem.
<suppressed ~3 debug messages>
Optimizing module a25_dcache.
<suppressed ~19 debug messages>
Optimizing module a25_execute.
<suppressed ~26 debug messages>

8. Executing OPT pass (performing simple optimizations).

8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module a25_alu.
Optimizing module a25_multiply.
Optimizing module a25_register_bank.
Optimizing module a25_barrel_shift.
Optimizing module a25_shifter_full.
Optimizing module a25_shifter_quick.
Optimizing module a25_decode.
Optimizing module a25_fetch.
Optimizing module a25_icache.
Optimizing module single_port_ram_128_8.
Optimizing module single_port_ram_21_8.
Optimizing module arm_core.
Optimizing module a25_coprocessor.
Optimizing module a25_wishbone.
Optimizing module a25_wishbone_buf.
Optimizing module a25_write_back.
Optimizing module a25_mem.
Optimizing module a25_dcache.
Optimizing module a25_execute.

8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a25_alu'.
<suppressed ~3 debug messages>
Finding identical cells in module `\a25_multiply'.
<suppressed ~6 debug messages>
Finding identical cells in module `\a25_register_bank'.
<suppressed ~105 debug messages>
Finding identical cells in module `\a25_barrel_shift'.
Finding identical cells in module `\a25_shifter_full'.
<suppressed ~198 debug messages>
Finding identical cells in module `\a25_shifter_quick'.
<suppressed ~18 debug messages>
Finding identical cells in module `\a25_decode'.
<suppressed ~2292 debug messages>
Finding identical cells in module `\a25_fetch'.
<suppressed ~24 debug messages>
Finding identical cells in module `\a25_icache'.
<suppressed ~84 debug messages>
Finding identical cells in module `\single_port_ram_128_8'.
Finding identical cells in module `\single_port_ram_21_8'.
Finding identical cells in module `\arm_core'.
Finding identical cells in module `\a25_coprocessor'.
<suppressed ~24 debug messages>
Finding identical cells in module `\a25_wishbone'.
<suppressed ~6 debug messages>
Finding identical cells in module `\a25_wishbone_buf'.
<suppressed ~33 debug messages>
Finding identical cells in module `\a25_write_back'.
Finding identical cells in module `\a25_mem'.
<suppressed ~48 debug messages>
Finding identical cells in module `\a25_dcache'.
<suppressed ~180 debug messages>
Finding identical cells in module `\a25_execute'.
<suppressed ~138 debug messages>
Removed a total of 1053 cells.

8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \a25_alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_multiply..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$3425.
    dead port 1/2 on $mux $procmux$3419.
    dead port 1/2 on $mux $procmux$3416.
    dead port 1/2 on $mux $procmux$3407.
Running muxtree optimizer on module \a25_register_bank..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_barrel_shift..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_shifter_full..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_shifter_quick..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_decode..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$6189.
    dead port 2/2 on $mux $procmux$6180.
    dead port 1/2 on $mux $procmux$6174.
    dead port 1/2 on $mux $procmux$6165.
    dead port 1/2 on $mux $procmux$6159.
    dead port 1/2 on $mux $procmux$6156.
    dead port 2/2 on $mux $procmux$6147.
    dead port 2/2 on $mux $procmux$6141.
    dead port 1/2 on $mux $procmux$6139.
    dead port 1/2 on $mux $procmux$6132.
    dead port 1/2 on $mux $procmux$6126.
    dead port 2/2 on $mux $procmux$6123.
    dead port 1/2 on $mux $procmux$6117.
    dead port 1/2 on $mux $procmux$6114.
    dead port 1/2 on $mux $procmux$6108.
    dead port 1/2 on $mux $procmux$6105.
    dead port 1/2 on $mux $procmux$6102.
    dead port 1/2 on $mux $procmux$6096.
    dead port 1/2 on $mux $procmux$6093.
    dead port 1/2 on $mux $procmux$6090.
    dead port 1/2 on $mux $procmux$6087.
    dead port 1/2 on $mux $procmux$6078.
    dead port 1/2 on $mux $procmux$6072.
    dead port 1/2 on $mux $procmux$6069.
    dead port 2/2 on $mux $procmux$6060.
    dead port 2/2 on $mux $procmux$6054.
    dead port 1/2 on $mux $procmux$6052.
    dead port 2/2 on $mux $procmux$6042.
    dead port 2/2 on $mux $procmux$6036.
    dead port 2/2 on $mux $procmux$6034.
    dead port 2/2 on $mux $procmux$6027.
    dead port 2/2 on $mux $procmux$6025.
    dead port 1/2 on $mux $procmux$6023.
    dead port 2/2 on $mux $procmux$6015.
    dead port 2/2 on $mux $procmux$6013.
    dead port 1/2 on $mux $procmux$6011.
    dead port 1/2 on $mux $procmux$6008.
    dead port 2/2 on $mux $procmux$6000.
    dead port 2/2 on $mux $procmux$5998.
    dead port 1/2 on $mux $procmux$5996.
    dead port 1/2 on $mux $procmux$5993.
    dead port 1/2 on $mux $procmux$5990.
    dead port 2/2 on $mux $procmux$5982.
    dead port 2/2 on $mux $procmux$5980.
    dead port 1/2 on $mux $procmux$5978.
    dead port 1/2 on $mux $procmux$5975.
    dead port 1/2 on $mux $procmux$5972.
    dead port 1/2 on $mux $procmux$5969.
    dead port 2/2 on $mux $procmux$5961.
    dead port 2/2 on $mux $procmux$5959.
    dead port 1/2 on $mux $procmux$5957.
    dead port 1/2 on $mux $procmux$5954.
    dead port 1/2 on $mux $procmux$5951.
    dead port 1/2 on $mux $procmux$5948.
    dead port 1/2 on $mux $procmux$5945.
    dead port 2/2 on $mux $procmux$5937.
    dead port 1/2 on $mux $procmux$5935.
    dead port 2/2 on $mux $procmux$5928.
    dead port 1/2 on $mux $procmux$5926.
    dead port 1/2 on $mux $procmux$5923.
    dead port 2/2 on $mux $procmux$5913.
    dead port 2/2 on $mux $procmux$5907.
    dead port 2/2 on $mux $procmux$5905.
    dead port 2/2 on $mux $procmux$5898.
    dead port 2/2 on $mux $procmux$5896.
    dead port 1/2 on $mux $procmux$5894.
    dead port 2/2 on $mux $procmux$5886.
    dead port 2/2 on $mux $procmux$5884.
    dead port 1/2 on $mux $procmux$5882.
    dead port 1/2 on $mux $procmux$5879.
    dead port 2/2 on $mux $procmux$5871.
    dead port 2/2 on $mux $procmux$5869.
    dead port 1/2 on $mux $procmux$5867.
    dead port 1/2 on $mux $procmux$5864.
    dead port 1/2 on $mux $procmux$5861.
    dead port 2/2 on $mux $procmux$5853.
    dead port 2/2 on $mux $procmux$5851.
    dead port 1/2 on $mux $procmux$5849.
    dead port 1/2 on $mux $procmux$5846.
    dead port 1/2 on $mux $procmux$5843.
    dead port 1/2 on $mux $procmux$5840.
    dead port 2/2 on $mux $procmux$5832.
    dead port 1/2 on $mux $procmux$5830.
    dead port 2/2 on $mux $procmux$5823.
    dead port 1/2 on $mux $procmux$5821.
    dead port 1/2 on $mux $procmux$5818.
    dead port 2/2 on $mux $procmux$5808.
    dead port 2/2 on $mux $procmux$5802.
    dead port 1/2 on $mux $procmux$5800.
    dead port 2/2 on $mux $procmux$5793.
    dead port 1/2 on $mux $procmux$5791.
    dead port 1/2 on $mux $procmux$5788.
    dead port 2/2 on $mux $procmux$5781.
    dead port 1/2 on $mux $procmux$5779.
    dead port 1/2 on $mux $procmux$5776.
    dead port 1/2 on $mux $procmux$5773.
    dead port 2/2 on $mux $procmux$5766.
    dead port 1/2 on $mux $procmux$5764.
    dead port 1/2 on $mux $procmux$5761.
    dead port 1/2 on $mux $procmux$5758.
    dead port 1/2 on $mux $procmux$5755.
    dead port 2/2 on $mux $procmux$5748.
    dead port 1/2 on $mux $procmux$5746.
    dead port 1/2 on $mux $procmux$5743.
    dead port 1/2 on $mux $procmux$5740.
    dead port 1/2 on $mux $procmux$5737.
    dead port 1/2 on $mux $procmux$5734.
    dead port 2/2 on $mux $procmux$5724.
    dead port 2/2 on $mux $procmux$5718.
    dead port 2/2 on $mux $procmux$5716.
    dead port 2/2 on $mux $procmux$5709.
    dead port 2/2 on $mux $procmux$5707.
    dead port 1/2 on $mux $procmux$5705.
    dead port 2/2 on $mux $procmux$5697.
    dead port 2/2 on $mux $procmux$5695.
    dead port 1/2 on $mux $procmux$5693.
    dead port 1/2 on $mux $procmux$5690.
    dead port 2/2 on $mux $procmux$5682.
    dead port 2/2 on $mux $procmux$5680.
    dead port 1/2 on $mux $procmux$5678.
    dead port 1/2 on $mux $procmux$5675.
    dead port 1/2 on $mux $procmux$5672.
    dead port 2/2 on $mux $procmux$5664.
    dead port 2/2 on $mux $procmux$5662.
    dead port 1/2 on $mux $procmux$5660.
    dead port 1/2 on $mux $procmux$5657.
    dead port 1/2 on $mux $procmux$5654.
    dead port 1/2 on $mux $procmux$5651.
    dead port 2/2 on $mux $procmux$5643.
    dead port 2/2 on $mux $procmux$5641.
    dead port 1/2 on $mux $procmux$5639.
    dead port 1/2 on $mux $procmux$5636.
    dead port 1/2 on $mux $procmux$5633.
    dead port 1/2 on $mux $procmux$5630.
    dead port 1/2 on $mux $procmux$5627.
    dead port 2/2 on $mux $procmux$5619.
    dead port 2/2 on $mux $procmux$5617.
    dead port 1/2 on $mux $procmux$5615.
    dead port 1/2 on $mux $procmux$5612.
    dead port 1/2 on $mux $procmux$5609.
    dead port 1/2 on $mux $procmux$5606.
    dead port 1/2 on $mux $procmux$5603.
    dead port 1/2 on $mux $procmux$5600.
    dead port 2/2 on $mux $procmux$5592.
    dead port 2/2 on $mux $procmux$5590.
    dead port 1/2 on $mux $procmux$5588.
    dead port 1/2 on $mux $procmux$5585.
    dead port 1/2 on $mux $procmux$5582.
    dead port 1/2 on $mux $procmux$5579.
    dead port 1/2 on $mux $procmux$5576.
    dead port 1/2 on $mux $procmux$5573.
    dead port 1/2 on $mux $procmux$5570.
    dead port 2/2 on $mux $procmux$5562.
    dead port 2/2 on $mux $procmux$5560.
    dead port 1/2 on $mux $procmux$5558.
    dead port 1/2 on $mux $procmux$5555.
    dead port 1/2 on $mux $procmux$5552.
    dead port 1/2 on $mux $procmux$5549.
    dead port 1/2 on $mux $procmux$5546.
    dead port 1/2 on $mux $procmux$5543.
    dead port 1/2 on $mux $procmux$5540.
    dead port 1/2 on $mux $procmux$5537.
    dead port 2/2 on $mux $procmux$5529.
    dead port 2/2 on $mux $procmux$5527.
    dead port 1/2 on $mux $procmux$5525.
    dead port 1/2 on $mux $procmux$5522.
    dead port 1/2 on $mux $procmux$5519.
    dead port 1/2 on $mux $procmux$5516.
    dead port 1/2 on $mux $procmux$5513.
    dead port 1/2 on $mux $procmux$5510.
    dead port 1/2 on $mux $procmux$5507.
    dead port 1/2 on $mux $procmux$5504.
    dead port 1/2 on $mux $procmux$5501.
    dead port 2/2 on $mux $procmux$5493.
    dead port 1/2 on $mux $procmux$5491.
    dead port 2/2 on $mux $procmux$5484.
    dead port 1/2 on $mux $procmux$5482.
    dead port 1/2 on $mux $procmux$5479.
    dead port 2/2 on $mux $procmux$5472.
    dead port 1/2 on $mux $procmux$5470.
    dead port 1/2 on $mux $procmux$5467.
    dead port 1/2 on $mux $procmux$5464.
    dead port 2/2 on $mux $procmux$5454.
    dead port 2/2 on $mux $procmux$5448.
    dead port 1/2 on $mux $procmux$5446.
    dead port 1/2 on $mux $procmux$5439.
    dead port 1/2 on $mux $procmux$5433.
    dead port 1/2 on $mux $procmux$5430.
    dead port 1/2 on $mux $procmux$5424.
    dead port 1/2 on $mux $procmux$5421.
    dead port 1/2 on $mux $procmux$5418.
    dead port 2/2 on $mux $procmux$5403.
    dead port 2/2 on $mux $procmux$5397.
    dead port 1/2 on $mux $procmux$5395.
    dead port 2/2 on $mux $procmux$5388.
    dead port 1/2 on $mux $procmux$5386.
    dead port 2/2 on $mux $procmux$5383.
    dead port 2/2 on $mux $procmux$5376.
    dead port 1/2 on $mux $procmux$5374.
    dead port 2/2 on $mux $procmux$5371.
    dead port 1/2 on $mux $procmux$5369.
    dead port 2/2 on $mux $procmux$5361.
    dead port 1/2 on $mux $procmux$5359.
    dead port 1/2 on $mux $procmux$5356.
    dead port 2/2 on $mux $procmux$5349.
    dead port 1/2 on $mux $procmux$5347.
    dead port 1/2 on $mux $procmux$5344.
    dead port 1/2 on $mux $procmux$5341.
    dead port 2/2 on $mux $procmux$5334.
    dead port 1/2 on $mux $procmux$5332.
    dead port 1/2 on $mux $procmux$5329.
    dead port 1/2 on $mux $procmux$5326.
    dead port 1/2 on $mux $procmux$5323.
    dead port 1/2 on $mux $procmux$5316.
    dead port 1/2 on $mux $procmux$5310.
    dead port 1/2 on $mux $procmux$5307.
    dead port 1/2 on $mux $procmux$5301.
    dead port 1/2 on $mux $procmux$5298.
    dead port 1/2 on $mux $procmux$5295.
    dead port 1/2 on $mux $procmux$5289.
    dead port 1/2 on $mux $procmux$5286.
    dead port 1/2 on $mux $procmux$5283.
    dead port 2/2 on $mux $procmux$5280.
    dead port 1/2 on $mux $procmux$5274.
    dead port 1/2 on $mux $procmux$5271.
    dead port 1/2 on $mux $procmux$5268.
    dead port 2/2 on $mux $procmux$5265.
    dead port 1/2 on $mux $procmux$5263.
    dead port 1/2 on $mux $procmux$5256.
    dead port 1/2 on $mux $procmux$5253.
    dead port 1/2 on $mux $procmux$5250.
    dead port 1/2 on $mux $procmux$5247.
    dead port 1/2 on $mux $procmux$5241.
    dead port 1/2 on $mux $procmux$5238.
    dead port 1/2 on $mux $procmux$5235.
    dead port 1/2 on $mux $procmux$5232.
    dead port 2/2 on $mux $procmux$5229.
    dead port 1/2 on $mux $procmux$5223.
    dead port 1/2 on $mux $procmux$5220.
    dead port 1/2 on $mux $procmux$5217.
    dead port 1/2 on $mux $procmux$5214.
    dead port 2/2 on $mux $procmux$5211.
    dead port 1/2 on $mux $procmux$5209.
    dead port 1/2 on $mux $procmux$5202.
    dead port 1/2 on $mux $procmux$5199.
    dead port 1/2 on $mux $procmux$5196.
    dead port 1/2 on $mux $procmux$5193.
    dead port 1/2 on $mux $procmux$5190.
    dead port 1/2 on $mux $procmux$5184.
    dead port 1/2 on $mux $procmux$5181.
    dead port 1/2 on $mux $procmux$5178.
    dead port 1/2 on $mux $procmux$5175.
    dead port 1/2 on $mux $procmux$5172.
    dead port 1/2 on $mux $procmux$5169.
    dead port 1/2 on $mux $procmux$5163.
    dead port 1/2 on $mux $procmux$5160.
    dead port 1/2 on $mux $procmux$5157.
    dead port 1/2 on $mux $procmux$5154.
    dead port 1/2 on $mux $procmux$5151.
    dead port 1/2 on $mux $procmux$5148.
    dead port 1/2 on $mux $procmux$5145.
    dead port 1/2 on $mux $procmux$5139.
    dead port 1/2 on $mux $procmux$5136.
    dead port 1/2 on $mux $procmux$5133.
    dead port 1/2 on $mux $procmux$5130.
    dead port 1/2 on $mux $procmux$5127.
    dead port 1/2 on $mux $procmux$5124.
    dead port 1/2 on $mux $procmux$5121.
    dead port 1/2 on $mux $procmux$5118.
    dead port 1/2 on $mux $procmux$5112.
    dead port 1/2 on $mux $procmux$5109.
    dead port 1/2 on $mux $procmux$5106.
    dead port 1/2 on $mux $procmux$5103.
    dead port 1/2 on $mux $procmux$5100.
    dead port 1/2 on $mux $procmux$5097.
    dead port 1/2 on $mux $procmux$5094.
    dead port 1/2 on $mux $procmux$5091.
    dead port 1/2 on $mux $procmux$5088.
    dead port 2/2 on $mux $procmux$5079.
    dead port 2/2 on $mux $procmux$5073.
    dead port 1/2 on $mux $procmux$5071.
    dead port 2/2 on $mux $procmux$5064.
    dead port 1/2 on $mux $procmux$5062.
    dead port 1/2 on $mux $procmux$5059.
    dead port 2/2 on $mux $procmux$5052.
    dead port 1/2 on $mux $procmux$5050.
    dead port 1/2 on $mux $procmux$5047.
    dead port 1/2 on $mux $procmux$5044.
    dead port 2/2 on $mux $procmux$5037.
    dead port 1/2 on $mux $procmux$5035.
    dead port 1/2 on $mux $procmux$5032.
    dead port 1/2 on $mux $procmux$5029.
    dead port 1/2 on $mux $procmux$5026.
    dead port 1/2 on $mux $procmux$5019.
    dead port 1/2 on $mux $procmux$5013.
    dead port 1/2 on $mux $procmux$5010.
    dead port 1/2 on $mux $procmux$5004.
    dead port 1/2 on $mux $procmux$5001.
    dead port 1/2 on $mux $procmux$4998.
    dead port 1/2 on $mux $procmux$4992.
    dead port 1/2 on $mux $procmux$4989.
    dead port 1/2 on $mux $procmux$4986.
    dead port 2/2 on $mux $procmux$4983.
    dead port 1/2 on $mux $procmux$4977.
    dead port 1/2 on $mux $procmux$4974.
    dead port 1/2 on $mux $procmux$4971.
    dead port 1/2 on $mux $procmux$4968.
    dead port 1/2 on $mux $procmux$4959.
    dead port 1/2 on $mux $procmux$4953.
    dead port 1/2 on $mux $procmux$4950.
    dead port 2/2 on $mux $procmux$4938.
    dead port 2/2 on $mux $procmux$4932.
    dead port 2/2 on $mux $procmux$4926.
    dead port 1/2 on $mux $procmux$4924.
    dead port 2/2 on $mux $procmux$4917.
    dead port 1/2 on $mux $procmux$4915.
    dead port 1/2 on $mux $procmux$4908.
    dead port 1/2 on $mux $procmux$4902.
    dead port 1/2 on $mux $procmux$4896.
    dead port 1/2 on $mux $procmux$4893.
    dead port 1/2 on $mux $procmux$4887.
    dead port 1/2 on $mux $procmux$4884.
    dead port 1/2 on $mux $procmux$4875.
    dead port 1/2 on $mux $procmux$4869.
    dead port 1/2 on $mux $procmux$4866.
    dead port 2/2 on $mux $procmux$4857.
    dead port 2/2 on $mux $procmux$4851.
    dead port 1/2 on $mux $procmux$4849.
    dead port 2/2 on $mux $procmux$4842.
    dead port 1/2 on $mux $procmux$4840.
    dead port 1/2 on $mux $procmux$4837.
    dead port 2/2 on $mux $procmux$4830.
    dead port 1/2 on $mux $procmux$4828.
    dead port 1/2 on $mux $procmux$4825.
    dead port 1/2 on $mux $procmux$4822.
    dead port 2/2 on $mux $procmux$4815.
    dead port 1/2 on $mux $procmux$4813.
    dead port 1/2 on $mux $procmux$4810.
    dead port 1/2 on $mux $procmux$4807.
    dead port 1/2 on $mux $procmux$4804.
    dead port 2/2 on $mux $procmux$4797.
    dead port 1/2 on $mux $procmux$4795.
    dead port 1/2 on $mux $procmux$4792.
    dead port 1/2 on $mux $procmux$4789.
    dead port 1/2 on $mux $procmux$4786.
    dead port 1/2 on $mux $procmux$4783.
    dead port 2/2 on $mux $procmux$4776.
    dead port 1/2 on $mux $procmux$4774.
    dead port 1/2 on $mux $procmux$4771.
    dead port 1/2 on $mux $procmux$4768.
    dead port 1/2 on $mux $procmux$4765.
    dead port 1/2 on $mux $procmux$4762.
    dead port 1/2 on $mux $procmux$4759.
    dead port 2/2 on $mux $procmux$4752.
    dead port 1/2 on $mux $procmux$4750.
    dead port 1/2 on $mux $procmux$4747.
    dead port 1/2 on $mux $procmux$4744.
    dead port 1/2 on $mux $procmux$4741.
    dead port 1/2 on $mux $procmux$4738.
    dead port 1/2 on $mux $procmux$4735.
    dead port 1/2 on $mux $procmux$4732.
    dead port 1/2 on $mux $procmux$4725.
    dead port 1/2 on $mux $procmux$4719.
    dead port 1/2 on $mux $procmux$4716.
    dead port 1/2 on $mux $procmux$4710.
    dead port 1/2 on $mux $procmux$4707.
    dead port 1/2 on $mux $procmux$4704.
    dead port 1/2 on $mux $procmux$4698.
    dead port 1/2 on $mux $procmux$4695.
    dead port 1/2 on $mux $procmux$4692.
    dead port 1/2 on $mux $procmux$4689.
    dead port 1/2 on $mux $procmux$4683.
    dead port 1/2 on $mux $procmux$4680.
    dead port 1/2 on $mux $procmux$4677.
    dead port 1/2 on $mux $procmux$4674.
    dead port 1/2 on $mux $procmux$4671.
    dead port 1/2 on $mux $procmux$4665.
    dead port 1/2 on $mux $procmux$4662.
    dead port 1/2 on $mux $procmux$4659.
    dead port 1/2 on $mux $procmux$4656.
    dead port 1/2 on $mux $procmux$4653.
    dead port 1/2 on $mux $procmux$4650.
    dead port 1/2 on $mux $procmux$4644.
    dead port 1/2 on $mux $procmux$4641.
    dead port 1/2 on $mux $procmux$4638.
    dead port 1/2 on $mux $procmux$4635.
    dead port 1/2 on $mux $procmux$4632.
    dead port 1/2 on $mux $procmux$4629.
    dead port 1/2 on $mux $procmux$4626.
    dead port 1/2 on $mux $procmux$4620.
    dead port 1/2 on $mux $procmux$4617.
    dead port 1/2 on $mux $procmux$4614.
    dead port 1/2 on $mux $procmux$4611.
    dead port 1/2 on $mux $procmux$4608.
    dead port 1/2 on $mux $procmux$4605.
    dead port 1/2 on $mux $procmux$4602.
    dead port 1/2 on $mux $procmux$4599.
    dead port 1/2 on $mux $procmux$4593.
    dead port 1/2 on $mux $procmux$4590.
    dead port 1/2 on $mux $procmux$4587.
    dead port 1/2 on $mux $procmux$4584.
    dead port 1/2 on $mux $procmux$4581.
    dead port 1/2 on $mux $procmux$4578.
    dead port 1/2 on $mux $procmux$4575.
    dead port 1/2 on $mux $procmux$4572.
    dead port 1/2 on $mux $procmux$4569.
    dead port 1/2 on $mux $procmux$4563.
    dead port 1/2 on $mux $procmux$4560.
    dead port 1/2 on $mux $procmux$4557.
    dead port 1/2 on $mux $procmux$4554.
    dead port 1/2 on $mux $procmux$4551.
    dead port 1/2 on $mux $procmux$4548.
    dead port 1/2 on $mux $procmux$4545.
    dead port 1/2 on $mux $procmux$4542.
    dead port 1/2 on $mux $procmux$4539.
    dead port 1/2 on $mux $procmux$4536.
    dead port 1/2 on $mux $procmux$4530.
    dead port 1/2 on $mux $procmux$4527.
    dead port 1/2 on $mux $procmux$4524.
    dead port 1/2 on $mux $procmux$4521.
    dead port 1/2 on $mux $procmux$4518.
    dead port 1/2 on $mux $procmux$4515.
    dead port 1/2 on $mux $procmux$4512.
    dead port 1/2 on $mux $procmux$4509.
    dead port 1/2 on $mux $procmux$4506.
    dead port 1/2 on $mux $procmux$4503.
    dead port 1/2 on $mux $procmux$4500.
    dead port 1/2 on $mux $procmux$4494.
    dead port 1/2 on $mux $procmux$4491.
    dead port 1/2 on $mux $procmux$4488.
    dead port 1/2 on $mux $procmux$4485.
    dead port 1/2 on $mux $procmux$4482.
    dead port 1/2 on $mux $procmux$4479.
    dead port 1/2 on $mux $procmux$4476.
    dead port 1/2 on $mux $procmux$4473.
    dead port 1/2 on $mux $procmux$4470.
    dead port 1/2 on $mux $procmux$4467.
    dead port 1/2 on $mux $procmux$4464.
    dead port 1/2 on $mux $procmux$4461.
    dead port 1/2 on $mux $procmux$4455.
    dead port 1/2 on $mux $procmux$4452.
    dead port 1/2 on $mux $procmux$4449.
    dead port 1/2 on $mux $procmux$4446.
    dead port 1/2 on $mux $procmux$4443.
    dead port 1/2 on $mux $procmux$4440.
    dead port 1/2 on $mux $procmux$4437.
    dead port 1/2 on $mux $procmux$4434.
    dead port 1/2 on $mux $procmux$4431.
    dead port 1/2 on $mux $procmux$4428.
    dead port 1/2 on $mux $procmux$4425.
    dead port 1/2 on $mux $procmux$4422.
    dead port 1/2 on $mux $procmux$4419.
    dead port 1/2 on $mux $procmux$4413.
    dead port 1/2 on $mux $procmux$4410.
    dead port 1/2 on $mux $procmux$4407.
    dead port 1/2 on $mux $procmux$4404.
    dead port 1/2 on $mux $procmux$4401.
    dead port 1/2 on $mux $procmux$4398.
    dead port 1/2 on $mux $procmux$4395.
    dead port 1/2 on $mux $procmux$4392.
    dead port 1/2 on $mux $procmux$4389.
    dead port 1/2 on $mux $procmux$4386.
    dead port 1/2 on $mux $procmux$4383.
    dead port 1/2 on $mux $procmux$4380.
    dead port 1/2 on $mux $procmux$4377.
    dead port 2/2 on $mux $procmux$4374.
    dead port 1/2 on $mux $procmux$4368.
    dead port 1/2 on $mux $procmux$4365.
    dead port 1/2 on $mux $procmux$4362.
    dead port 1/2 on $mux $procmux$4359.
    dead port 1/2 on $mux $procmux$4356.
    dead port 1/2 on $mux $procmux$4353.
    dead port 1/2 on $mux $procmux$4350.
    dead port 1/2 on $mux $procmux$4347.
    dead port 1/2 on $mux $procmux$4344.
    dead port 1/2 on $mux $procmux$4341.
    dead port 1/2 on $mux $procmux$4338.
    dead port 1/2 on $mux $procmux$4335.
    dead port 1/2 on $mux $procmux$4332.
    dead port 1/2 on $mux $procmux$4329.
    dead port 1/2 on $mux $procmux$4323.
    dead port 1/2 on $mux $procmux$4320.
    dead port 1/2 on $mux $procmux$4317.
    dead port 1/2 on $mux $procmux$4314.
    dead port 1/2 on $mux $procmux$4311.
    dead port 1/2 on $mux $procmux$4308.
    dead port 1/2 on $mux $procmux$4305.
    dead port 1/2 on $mux $procmux$4302.
    dead port 1/2 on $mux $procmux$4299.
    dead port 1/2 on $mux $procmux$4296.
    dead port 1/2 on $mux $procmux$4293.
    dead port 1/2 on $mux $procmux$4290.
    dead port 1/2 on $mux $procmux$4287.
    dead port 1/2 on $mux $procmux$4284.
    dead port 2/2 on $mux $procmux$4281.
    dead port 1/2 on $mux $procmux$4275.
    dead port 1/2 on $mux $procmux$4272.
    dead port 1/2 on $mux $procmux$4269.
    dead port 1/2 on $mux $procmux$4266.
    dead port 1/2 on $mux $procmux$4263.
    dead port 1/2 on $mux $procmux$4260.
    dead port 1/2 on $mux $procmux$4257.
    dead port 1/2 on $mux $procmux$4254.
    dead port 1/2 on $mux $procmux$4251.
    dead port 1/2 on $mux $procmux$4248.
    dead port 1/2 on $mux $procmux$4245.
    dead port 1/2 on $mux $procmux$4242.
    dead port 1/2 on $mux $procmux$4239.
    dead port 1/2 on $mux $procmux$4236.
    dead port 2/2 on $mux $procmux$4233.
    dead port 1/2 on $mux $procmux$4231.
    dead port 1/2 on $mux $procmux$4224.
    dead port 1/2 on $mux $procmux$4221.
    dead port 1/2 on $mux $procmux$4218.
    dead port 1/2 on $mux $procmux$4215.
    dead port 1/2 on $mux $procmux$4212.
    dead port 1/2 on $mux $procmux$4209.
    dead port 1/2 on $mux $procmux$4206.
    dead port 1/2 on $mux $procmux$4203.
    dead port 1/2 on $mux $procmux$4200.
    dead port 1/2 on $mux $procmux$4197.
    dead port 1/2 on $mux $procmux$4194.
    dead port 1/2 on $mux $procmux$4191.
    dead port 1/2 on $mux $procmux$4188.
    dead port 1/2 on $mux $procmux$4185.
    dead port 2/2 on $mux $procmux$4182.
    dead port 1/2 on $mux $procmux$4180.
    dead port 1/2 on $mux $procmux$4177.
    dead port 1/2 on $mux $procmux$4170.
    dead port 1/2 on $mux $procmux$4167.
    dead port 1/2 on $mux $procmux$4164.
    dead port 1/2 on $mux $procmux$4161.
    dead port 1/2 on $mux $procmux$4158.
    dead port 1/2 on $mux $procmux$4155.
    dead port 1/2 on $mux $procmux$4152.
    dead port 1/2 on $mux $procmux$4149.
    dead port 1/2 on $mux $procmux$4146.
    dead port 1/2 on $mux $procmux$4143.
    dead port 1/2 on $mux $procmux$4140.
    dead port 1/2 on $mux $procmux$4137.
    dead port 1/2 on $mux $procmux$4134.
    dead port 1/2 on $mux $procmux$4131.
    dead port 1/2 on $mux $procmux$4128.
    dead port 1/2 on $mux $procmux$4122.
    dead port 1/2 on $mux $procmux$4119.
    dead port 1/2 on $mux $procmux$4116.
    dead port 1/2 on $mux $procmux$4113.
    dead port 1/2 on $mux $procmux$4110.
    dead port 1/2 on $mux $procmux$4107.
    dead port 1/2 on $mux $procmux$4104.
    dead port 1/2 on $mux $procmux$4101.
    dead port 1/2 on $mux $procmux$4098.
    dead port 1/2 on $mux $procmux$4095.
    dead port 1/2 on $mux $procmux$4092.
    dead port 1/2 on $mux $procmux$4089.
    dead port 1/2 on $mux $procmux$4086.
    dead port 1/2 on $mux $procmux$4083.
    dead port 1/2 on $mux $procmux$4080.
    dead port 2/2 on $mux $procmux$4077.
    dead port 1/2 on $mux $procmux$4071.
    dead port 1/2 on $mux $procmux$4068.
    dead port 1/2 on $mux $procmux$4065.
    dead port 1/2 on $mux $procmux$4062.
    dead port 1/2 on $mux $procmux$4059.
    dead port 1/2 on $mux $procmux$4056.
    dead port 1/2 on $mux $procmux$4053.
    dead port 1/2 on $mux $procmux$4050.
    dead port 1/2 on $mux $procmux$4047.
    dead port 1/2 on $mux $procmux$4044.
    dead port 1/2 on $mux $procmux$4041.
    dead port 1/2 on $mux $procmux$4038.
    dead port 1/2 on $mux $procmux$4035.
    dead port 1/2 on $mux $procmux$4032.
    dead port 1/2 on $mux $procmux$4029.
    dead port 2/2 on $mux $procmux$4026.
    dead port 1/2 on $mux $procmux$4024.
    dead port 1/2 on $mux $procmux$4017.
    dead port 1/2 on $mux $procmux$4014.
    dead port 1/2 on $mux $procmux$4011.
    dead port 1/2 on $mux $procmux$4008.
    dead port 1/2 on $mux $procmux$4005.
    dead port 1/2 on $mux $procmux$4002.
    dead port 1/2 on $mux $procmux$3999.
    dead port 1/2 on $mux $procmux$3996.
    dead port 1/2 on $mux $procmux$3993.
    dead port 1/2 on $mux $procmux$3990.
    dead port 1/2 on $mux $procmux$3987.
    dead port 1/2 on $mux $procmux$3984.
    dead port 1/2 on $mux $procmux$3981.
    dead port 1/2 on $mux $procmux$3978.
    dead port 1/2 on $mux $procmux$3975.
    dead port 1/2 on $mux $procmux$3972.
    dead port 1/2 on $mux $procmux$3966.
    dead port 1/2 on $mux $procmux$3963.
    dead port 1/2 on $mux $procmux$3960.
    dead port 1/2 on $mux $procmux$3957.
    dead port 1/2 on $mux $procmux$3954.
    dead port 1/2 on $mux $procmux$3951.
    dead port 1/2 on $mux $procmux$3948.
    dead port 1/2 on $mux $procmux$3945.
    dead port 1/2 on $mux $procmux$3942.
    dead port 1/2 on $mux $procmux$3939.
    dead port 1/2 on $mux $procmux$3936.
    dead port 1/2 on $mux $procmux$3933.
    dead port 1/2 on $mux $procmux$3930.
    dead port 1/2 on $mux $procmux$3927.
    dead port 1/2 on $mux $procmux$3924.
    dead port 1/2 on $mux $procmux$3921.
    dead port 2/2 on $mux $procmux$3918.
    dead port 1/2 on $mux $procmux$3912.
    dead port 1/2 on $mux $procmux$3909.
    dead port 1/2 on $mux $procmux$3906.
    dead port 1/2 on $mux $procmux$3903.
    dead port 1/2 on $mux $procmux$3900.
    dead port 1/2 on $mux $procmux$3897.
    dead port 1/2 on $mux $procmux$3894.
    dead port 1/2 on $mux $procmux$3891.
    dead port 1/2 on $mux $procmux$3888.
    dead port 1/2 on $mux $procmux$3885.
    dead port 1/2 on $mux $procmux$3882.
    dead port 1/2 on $mux $procmux$3879.
    dead port 1/2 on $mux $procmux$3876.
    dead port 1/2 on $mux $procmux$3873.
    dead port 1/2 on $mux $procmux$3870.
    dead port 1/2 on $mux $procmux$3867.
    dead port 1/2 on $mux $procmux$3864.
    dead port 1/2 on $mux $procmux$3858.
    dead port 1/2 on $mux $procmux$3855.
    dead port 1/2 on $mux $procmux$3852.
    dead port 1/2 on $mux $procmux$3849.
    dead port 1/2 on $mux $procmux$3846.
    dead port 1/2 on $mux $procmux$3843.
    dead port 1/2 on $mux $procmux$3840.
    dead port 1/2 on $mux $procmux$3837.
    dead port 1/2 on $mux $procmux$3834.
    dead port 1/2 on $mux $procmux$3831.
    dead port 1/2 on $mux $procmux$3828.
    dead port 1/2 on $mux $procmux$3825.
    dead port 1/2 on $mux $procmux$3822.
    dead port 1/2 on $mux $procmux$3819.
    dead port 1/2 on $mux $procmux$3816.
    dead port 1/2 on $mux $procmux$3813.
    dead port 1/2 on $mux $procmux$3810.
    dead port 2/2 on $mux $procmux$3807.
    dead port 1/2 on $mux $procmux$3801.
    dead port 1/2 on $mux $procmux$3798.
    dead port 1/2 on $mux $procmux$3795.
    dead port 1/2 on $mux $procmux$3792.
    dead port 1/2 on $mux $procmux$3789.
    dead port 1/2 on $mux $procmux$3786.
    dead port 1/2 on $mux $procmux$3783.
    dead port 1/2 on $mux $procmux$3780.
    dead port 1/2 on $mux $procmux$3777.
    dead port 1/2 on $mux $procmux$3774.
    dead port 1/2 on $mux $procmux$3771.
    dead port 1/2 on $mux $procmux$3768.
    dead port 1/2 on $mux $procmux$3765.
    dead port 1/2 on $mux $procmux$3762.
    dead port 1/2 on $mux $procmux$3759.
    dead port 1/2 on $mux $procmux$3756.
    dead port 1/2 on $mux $procmux$3753.
    dead port 2/2 on $mux $procmux$3750.
    dead port 2/2 on $mux $procmux$3748.
    dead port 1/2 on $mux $procmux$3741.
    dead port 1/2 on $mux $procmux$3738.
    dead port 1/2 on $mux $procmux$3735.
    dead port 1/2 on $mux $procmux$3732.
    dead port 1/2 on $mux $procmux$3729.
    dead port 1/2 on $mux $procmux$3726.
    dead port 1/2 on $mux $procmux$3723.
    dead port 1/2 on $mux $procmux$3720.
    dead port 1/2 on $mux $procmux$3717.
    dead port 1/2 on $mux $procmux$3714.
    dead port 1/2 on $mux $procmux$3711.
    dead port 1/2 on $mux $procmux$3708.
    dead port 1/2 on $mux $procmux$3705.
    dead port 1/2 on $mux $procmux$3702.
    dead port 1/2 on $mux $procmux$3699.
    dead port 1/2 on $mux $procmux$3696.
    dead port 1/2 on $mux $procmux$3693.
    dead port 1/2 on $mux $procmux$3690.
    dead port 1/2 on $mux $procmux$6401.
    dead port 1/2 on $mux $procmux$6222.
    dead port 2/2 on $mux $procmux$6393.
    dead port 1/2 on $mux $procmux$6772.
    dead port 1/2 on $mux $procmux$6391.
    dead port 1/2 on $mux $procmux$6388.
    dead port 1/2 on $mux $procmux$6765.
    dead port 2/2 on $mux $procmux$6756.
    dead port 1/2 on $mux $procmux$6219.
    dead port 1/2 on $mux $procmux$6381.
    dead port 2/2 on $mux $procmux$6750.
    dead port 1/2 on $mux $procmux$6748.
    dead port 1/2 on $mux $procmux$8205.
    dead port 1/2 on $mux $procmux$8199.
    dead port 1/2 on $mux $procmux$8196.
    dead port 1/2 on $mux $procmux$8190.
    dead port 1/2 on $mux $procmux$8187.
    dead port 1/2 on $mux $procmux$8184.
    dead port 1/2 on $mux $procmux$8178.
    dead port 1/2 on $mux $procmux$8175.
    dead port 1/2 on $mux $procmux$8172.
    dead port 1/2 on $mux $procmux$8169.
    dead port 1/2 on $mux $procmux$8163.
    dead port 1/2 on $mux $procmux$8160.
    dead port 1/2 on $mux $procmux$8157.
    dead port 1/2 on $mux $procmux$8154.
    dead port 1/2 on $mux $procmux$8151.
    dead port 1/2 on $mux $procmux$8145.
    dead port 1/2 on $mux $procmux$8142.
    dead port 1/2 on $mux $procmux$8139.
    dead port 1/2 on $mux $procmux$8136.
    dead port 1/2 on $mux $procmux$8133.
    dead port 1/2 on $mux $procmux$8130.
    dead port 1/2 on $mux $procmux$8124.
    dead port 1/2 on $mux $procmux$8121.
    dead port 1/2 on $mux $procmux$8118.
    dead port 1/2 on $mux $procmux$8115.
    dead port 1/2 on $mux $procmux$8112.
    dead port 1/2 on $mux $procmux$8109.
    dead port 1/2 on $mux $procmux$8106.
    dead port 1/2 on $mux $procmux$8100.
    dead port 1/2 on $mux $procmux$8097.
    dead port 2/2 on $mux $procmux$6741.
    dead port 1/2 on $mux $procmux$8094.
    dead port 1/2 on $mux $procmux$8091.
    dead port 1/2 on $mux $procmux$8088.
    dead port 1/2 on $mux $procmux$8085.
    dead port 1/2 on $mux $procmux$8082.
    dead port 1/2 on $mux $procmux$8079.
    dead port 1/2 on $mux $procmux$8073.
    dead port 1/2 on $mux $procmux$8070.
    dead port 1/2 on $mux $procmux$8067.
    dead port 1/2 on $mux $procmux$6375.
    dead port 1/2 on $mux $procmux$8064.
    dead port 1/2 on $mux $procmux$8061.
    dead port 1/2 on $mux $procmux$6216.
    dead port 1/2 on $mux $procmux$8058.
    dead port 1/2 on $mux $procmux$6372.
    dead port 1/2 on $mux $procmux$8055.
    dead port 1/2 on $mux $procmux$8052.
    dead port 1/2 on $mux $procmux$6729.
    dead port 1/2 on $mux $procmux$8049.
    dead port 1/2 on $mux $procmux$8043.
    dead port 1/2 on $mux $procmux$8040.
    dead port 1/2 on $mux $procmux$8037.
    dead port 1/2 on $mux $procmux$6723.
    dead port 1/2 on $mux $procmux$8034.
    dead port 1/2 on $mux $procmux$6720.
    dead port 1/2 on $mux $procmux$8031.
    dead port 1/2 on $mux $procmux$8028.
    dead port 1/2 on $mux $procmux$8025.
    dead port 1/2 on $mux $procmux$8022.
    dead port 1/2 on $mux $procmux$6366.
    dead port 1/2 on $mux $procmux$8019.
    dead port 1/2 on $mux $procmux$6714.
    dead port 1/2 on $mux $procmux$8016.
    dead port 1/2 on $mux $procmux$8010.
    dead port 1/2 on $mux $procmux$8007.
    dead port 1/2 on $mux $procmux$6711.
    dead port 1/2 on $mux $procmux$6363.
    dead port 1/2 on $mux $procmux$8004.
    dead port 1/2 on $mux $procmux$8001.
    dead port 1/2 on $mux $procmux$6708.
    dead port 1/2 on $mux $procmux$7998.
    dead port 1/2 on $mux $procmux$7995.
    dead port 1/2 on $mux $procmux$7992.
    dead port 1/2 on $mux $procmux$6360.
    dead port 1/2 on $mux $procmux$7989.
    dead port 1/2 on $mux $procmux$7986.
    dead port 1/2 on $mux $procmux$6702.
    dead port 1/2 on $mux $procmux$7983.
    dead port 1/2 on $mux $procmux$7980.
    dead port 1/2 on $mux $procmux$6699.
    dead port 1/2 on $mux $procmux$7974.
    dead port 1/2 on $mux $procmux$7971.
    dead port 1/2 on $mux $procmux$6696.
    dead port 1/2 on $mux $procmux$7968.
    dead port 1/2 on $mux $procmux$7965.
    dead port 1/2 on $mux $procmux$6213.
    dead port 1/2 on $mux $procmux$7962.
    dead port 1/2 on $mux $procmux$7959.
    dead port 1/2 on $mux $procmux$7956.
    dead port 1/2 on $mux $procmux$6693.
    dead port 1/2 on $mux $procmux$7953.
    dead port 1/2 on $mux $procmux$7950.
    dead port 1/2 on $mux $procmux$7947.
    dead port 1/2 on $mux $procmux$7944.
    dead port 1/2 on $mux $procmux$7941.
    dead port 2/2 on $mux $procmux$6684.
    dead port 1/2 on $mux $procmux$7935.
    dead port 1/2 on $mux $procmux$7932.
    dead port 1/2 on $mux $procmux$7929.
    dead port 1/2 on $mux $procmux$7926.
    dead port 1/2 on $mux $procmux$7923.
    dead port 1/2 on $mux $procmux$7920.
    dead port 1/2 on $mux $procmux$7917.
    dead port 1/2 on $mux $procmux$7914.
    dead port 2/2 on $mux $procmux$6678.
    dead port 1/2 on $mux $procmux$7911.
    dead port 1/2 on $mux $procmux$7908.
    dead port 1/2 on $mux $procmux$7905.
    dead port 1/2 on $mux $procmux$7902.
    dead port 1/2 on $mux $procmux$7899.
    dead port 1/2 on $mux $procmux$7893.
    dead port 1/2 on $mux $procmux$7890.
    dead port 1/2 on $mux $procmux$7887.
    dead port 2/2 on $mux $procmux$6351.
    dead port 1/2 on $mux $procmux$7884.
    dead port 1/2 on $mux $procmux$7881.
    dead port 1/2 on $mux $procmux$6676.
    dead port 1/2 on $mux $procmux$7878.
    dead port 1/2 on $mux $procmux$6210.
    dead port 1/2 on $mux $procmux$7875.
    dead port 1/2 on $mux $procmux$7872.
    dead port 1/2 on $mux $procmux$7869.
    dead port 2/2 on $mux $procmux$6669.
    dead port 1/2 on $mux $procmux$7866.
    dead port 1/2 on $mux $procmux$7863.
    dead port 1/2 on $mux $procmux$6667.
    dead port 1/2 on $mux $procmux$6664.
    dead port 1/2 on $mux $procmux$7860.
    dead port 1/2 on $mux $procmux$7857.
    dead port 1/2 on $mux $procmux$7854.
    dead port 2/2 on $mux $procmux$6345.
    dead port 1/2 on $mux $procmux$7845.
    dead port 1/2 on $mux $procmux$6343.
    dead port 2/2 on $mux $procmux$6657.
    dead port 1/2 on $mux $procmux$7839.
    dead port 1/2 on $mux $procmux$7836.
    dead port 1/2 on $mux $procmux$7830.
    dead port 1/2 on $mux $procmux$6655.
    dead port 1/2 on $mux $procmux$7827.
    dead port 2/2 on $mux $procmux$6336.
    dead port 1/2 on $mux $procmux$7824.
    dead port 1/2 on $mux $procmux$6652.
    dead port 1/2 on $mux $procmux$6649.
    dead port 1/2 on $mux $procmux$7818.
    dead port 2/2 on $mux $procmux$6642.
    dead port 1/2 on $mux $procmux$7815.
    dead port 1/2 on $mux $procmux$7812.
    dead port 1/2 on $mux $procmux$7809.
    dead port 1/2 on $mux $procmux$7803.
    dead port 1/2 on $mux $procmux$6334.
    dead port 1/2 on $mux $procmux$7800.
    dead port 1/2 on $mux $procmux$6640.
    dead port 1/2 on $mux $procmux$7797.
    dead port 1/2 on $mux $procmux$7794.
    dead port 1/2 on $mux $procmux$7791.
    dead port 1/2 on $mux $procmux$7785.
    dead port 1/2 on $mux $procmux$7782.
    dead port 1/2 on $mux $procmux$7779.
    dead port 1/2 on $mux $procmux$6331.
    dead port 1/2 on $mux $procmux$7776.
    dead port 1/2 on $mux $procmux$6637.
    dead port 1/2 on $mux $procmux$7773.
    dead port 1/2 on $mux $procmux$6634.
    dead port 1/2 on $mux $procmux$7770.
    dead port 1/2 on $mux $procmux$6631.
    dead port 1/2 on $mux $procmux$7764.
    dead port 1/2 on $mux $procmux$7761.
    dead port 1/2 on $mux $procmux$7758.
    dead port 1/2 on $mux $procmux$7755.
    dead port 1/2 on $mux $procmux$7752.
    dead port 1/2 on $mux $procmux$7749.
    dead port 1/2 on $mux $procmux$7746.
    dead port 1/2 on $mux $procmux$7740.
    dead port 1/2 on $mux $procmux$6624.
    dead port 1/2 on $mux $procmux$6618.
    dead port 1/2 on $mux $procmux$6615.
    dead port 1/2 on $mux $procmux$7737.
    dead port 1/2 on $mux $procmux$7734.
    dead port 1/2 on $mux $procmux$7731.
    dead port 1/2 on $mux $procmux$7728.
    dead port 1/2 on $mux $procmux$7725.
    dead port 2/2 on $mux $procmux$6324.
    dead port 1/2 on $mux $procmux$7722.
    dead port 1/2 on $mux $procmux$7719.
    dead port 1/2 on $mux $procmux$6609.
    dead port 1/2 on $mux $procmux$7713.
    dead port 1/2 on $mux $procmux$7710.
    dead port 1/2 on $mux $procmux$6606.
    dead port 1/2 on $mux $procmux$7707.
    dead port 1/2 on $mux $procmux$7704.
    dead port 1/2 on $mux $procmux$6322.
    dead port 1/2 on $mux $procmux$6603.
    dead port 1/2 on $mux $procmux$7701.
    dead port 1/2 on $mux $procmux$7698.
    dead port 1/2 on $mux $procmux$7695.
    dead port 1/2 on $mux $procmux$7692.
    dead port 1/2 on $mux $procmux$7689.
    dead port 1/2 on $mux $procmux$6204.
    dead port 1/2 on $mux $procmux$6319.
    dead port 1/2 on $mux $procmux$6597.
    dead port 1/2 on $mux $procmux$7683.
    dead port 1/2 on $mux $procmux$7680.
    dead port 1/2 on $mux $procmux$6316.
    dead port 1/2 on $mux $procmux$7677.
    dead port 1/2 on $mux $procmux$6594.
    dead port 1/2 on $mux $procmux$6591.
    dead port 1/2 on $mux $procmux$7674.
    dead port 1/2 on $mux $procmux$7671.
    dead port 1/2 on $mux $procmux$6588.
    dead port 1/2 on $mux $procmux$7668.
    dead port 1/2 on $mux $procmux$7665.
    dead port 1/2 on $mux $procmux$7662.
    dead port 1/2 on $mux $procmux$7659.
    dead port 1/2 on $mux $procmux$7656.
    dead port 1/2 on $mux $procmux$6582.
    dead port 1/2 on $mux $procmux$6579.
    dead port 1/2 on $mux $procmux$7650.
    dead port 1/2 on $mux $procmux$6576.
    dead port 1/2 on $mux $procmux$7647.
    dead port 1/2 on $mux $procmux$7644.
    dead port 1/2 on $mux $procmux$6309.
    dead port 1/2 on $mux $procmux$7641.
    dead port 1/2 on $mux $procmux$6573.
    dead port 1/2 on $mux $procmux$7638.
    dead port 1/2 on $mux $procmux$7635.
    dead port 1/2 on $mux $procmux$6570.
    dead port 1/2 on $mux $procmux$7632.
    dead port 1/2 on $mux $procmux$7629.
    dead port 1/2 on $mux $procmux$7626.
    dead port 1/2 on $mux $procmux$7623.
    dead port 1/2 on $mux $procmux$7620.
    dead port 1/2 on $mux $procmux$6564.
    dead port 1/2 on $mux $procmux$6561.
    dead port 1/2 on $mux $procmux$7614.
    dead port 1/2 on $mux $procmux$7611.
    dead port 1/2 on $mux $procmux$7608.
    dead port 1/2 on $mux $procmux$7605.
    dead port 1/2 on $mux $procmux$7602.
    dead port 1/2 on $mux $procmux$7599.
    dead port 1/2 on $mux $procmux$7596.
    dead port 1/2 on $mux $procmux$6201.
    dead port 1/2 on $mux $procmux$6303.
    dead port 1/2 on $mux $procmux$6558.
    dead port 1/2 on $mux $procmux$7593.
    dead port 1/2 on $mux $procmux$7590.
    dead port 1/2 on $mux $procmux$7587.
    dead port 1/2 on $mux $procmux$7584.
    dead port 1/2 on $mux $procmux$7581.
    dead port 1/2 on $mux $procmux$7575.
    dead port 1/2 on $mux $procmux$7572.
    dead port 1/2 on $mux $procmux$6555.
    dead port 1/2 on $mux $procmux$6552.
    dead port 1/2 on $mux $procmux$6300.
    dead port 1/2 on $mux $procmux$6549.
    dead port 1/2 on $mux $procmux$7569.
    dead port 1/2 on $mux $procmux$7566.
    dead port 1/2 on $mux $procmux$7563.
    dead port 1/2 on $mux $procmux$7560.
    dead port 1/2 on $mux $procmux$7557.
    dead port 1/2 on $mux $procmux$7554.
    dead port 1/2 on $mux $procmux$7551.
    dead port 1/2 on $mux $procmux$6543.
    dead port 1/2 on $mux $procmux$7548.
    dead port 1/2 on $mux $procmux$6540.
    dead port 1/2 on $mux $procmux$7545.
    dead port 1/2 on $mux $procmux$7542.
    dead port 1/2 on $mux $procmux$7539.
    dead port 1/2 on $mux $procmux$7533.
    dead port 1/2 on $mux $procmux$7530.
    dead port 1/2 on $mux $procmux$7527.
    dead port 1/2 on $mux $procmux$6537.
    dead port 1/2 on $mux $procmux$7524.
    dead port 1/2 on $mux $procmux$7521.
    dead port 1/2 on $mux $procmux$6534.
    dead port 1/2 on $mux $procmux$7518.
    dead port 1/2 on $mux $procmux$6294.
    dead port 1/2 on $mux $procmux$7515.
    dead port 1/2 on $mux $procmux$7512.
    dead port 1/2 on $mux $procmux$6531.
    dead port 1/2 on $mux $procmux$7509.
    dead port 1/2 on $mux $procmux$7506.
    dead port 1/2 on $mux $procmux$7503.
    dead port 1/2 on $mux $procmux$6291.
    dead port 1/2 on $mux $procmux$7500.
    dead port 1/2 on $mux $procmux$6528.
    dead port 1/2 on $mux $procmux$7497.
    dead port 1/2 on $mux $procmux$6198.
    dead port 1/2 on $mux $procmux$7494.
    dead port 1/2 on $mux $procmux$6288.
    dead port 1/2 on $mux $procmux$6525.
    dead port 1/2 on $mux $procmux$7485.
    dead port 1/2 on $mux $procmux$7479.
    dead port 1/2 on $mux $procmux$7476.
    dead port 1/2 on $mux $procmux$6519.
    dead port 1/2 on $mux $procmux$7470.
    dead port 1/2 on $mux $procmux$7467.
    dead port 1/2 on $mux $procmux$7464.
    dead port 1/2 on $mux $procmux$6516.
    dead port 1/2 on $mux $procmux$7458.
    dead port 1/2 on $mux $procmux$7455.
    dead port 1/2 on $mux $procmux$6513.
    dead port 1/2 on $mux $procmux$7452.
    dead port 1/2 on $mux $procmux$7449.
    dead port 1/2 on $mux $procmux$6510.
    dead port 1/2 on $mux $procmux$7443.
    dead port 1/2 on $mux $procmux$7440.
    dead port 1/2 on $mux $procmux$6507.
    dead port 1/2 on $mux $procmux$7437.
    dead port 1/2 on $mux $procmux$7434.
    dead port 1/2 on $mux $procmux$7431.
    dead port 1/2 on $mux $procmux$7425.
    dead port 2/2 on $mux $procmux$6279.
    dead port 1/2 on $mux $procmux$7422.
    dead port 1/2 on $mux $procmux$7419.
    dead port 1/2 on $mux $procmux$6504.
    dead port 1/2 on $mux $procmux$7416.
    dead port 1/2 on $mux $procmux$7413.
    dead port 1/2 on $mux $procmux$7410.
    dead port 1/2 on $mux $procmux$7404.
    dead port 1/2 on $mux $procmux$7401.
    dead port 1/2 on $mux $procmux$7398.
    dead port 1/2 on $mux $procmux$7395.
    dead port 1/2 on $mux $procmux$7392.
    dead port 1/2 on $mux $procmux$7389.
    dead port 1/2 on $mux $procmux$7386.
    dead port 1/2 on $mux $procmux$7380.
    dead port 1/2 on $mux $procmux$7377.
    dead port 1/2 on $mux $procmux$7374.
    dead port 1/2 on $mux $procmux$7371.
    dead port 1/2 on $mux $procmux$6501.
    dead port 1/2 on $mux $procmux$7368.
    dead port 1/2 on $mux $procmux$7365.
    dead port 1/2 on $mux $procmux$7362.
    dead port 2/2 on $mux $procmux$6273.
    dead port 1/2 on $mux $procmux$7359.
    dead port 1/2 on $mux $procmux$6498.
    dead port 1/2 on $mux $procmux$6271.
    dead port 1/2 on $mux $procmux$7353.
    dead port 1/2 on $mux $procmux$7350.
    dead port 1/2 on $mux $procmux$6492.
    dead port 1/2 on $mux $procmux$7347.
    dead port 1/2 on $mux $procmux$7344.
    dead port 1/2 on $mux $procmux$7341.
    dead port 1/2 on $mux $procmux$6489.
    dead port 1/2 on $mux $procmux$7338.
    dead port 1/2 on $mux $procmux$7335.
    dead port 1/2 on $mux $procmux$7332.
    dead port 1/2 on $mux $procmux$7329.
    dead port 1/2 on $mux $procmux$7323.
    dead port 1/2 on $mux $procmux$6486.
    dead port 1/2 on $mux $procmux$6483.
    dead port 1/2 on $mux $procmux$7320.
    dead port 1/2 on $mux $procmux$6480.
    dead port 1/2 on $mux $procmux$7317.
    dead port 1/2 on $mux $procmux$7314.
    dead port 1/2 on $mux $procmux$6264.
    dead port 1/2 on $mux $procmux$7311.
    dead port 1/2 on $mux $procmux$6477.
    dead port 1/2 on $mux $procmux$6474.
    dead port 1/2 on $mux $procmux$7308.
    dead port 1/2 on $mux $procmux$7305.
    dead port 1/2 on $mux $procmux$7302.
    dead port 1/2 on $mux $procmux$7299.
    dead port 1/2 on $mux $procmux$7296.
    dead port 1/2 on $mux $procmux$6471.
    dead port 1/2 on $mux $procmux$7290.
    dead port 1/2 on $mux $procmux$7287.
    dead port 1/2 on $mux $procmux$7284.
    dead port 1/2 on $mux $procmux$7281.
    dead port 1/2 on $mux $procmux$6468.
    dead port 1/2 on $mux $procmux$7278.
    dead port 1/2 on $mux $procmux$7275.
    dead port 1/2 on $mux $procmux$7272.
    dead port 1/2 on $mux $procmux$7269.
    dead port 1/2 on $mux $procmux$7266.
    dead port 1/2 on $mux $procmux$7263.
    dead port 1/2 on $mux $procmux$7260.
    dead port 1/2 on $mux $procmux$7254.
    dead port 1/2 on $mux $procmux$7251.
    dead port 1/2 on $mux $procmux$6258.
    dead port 2/2 on $mux $procmux$6459.
    dead port 1/2 on $mux $procmux$7248.
    dead port 1/2 on $mux $procmux$7245.
    dead port 1/2 on $mux $procmux$7242.
    dead port 1/2 on $mux $procmux$6195.
    dead port 1/2 on $mux $procmux$7239.
    dead port 1/2 on $mux $procmux$7236.
    dead port 1/2 on $mux $procmux$7233.
    dead port 1/2 on $mux $procmux$7230.
    dead port 1/2 on $mux $procmux$6255.
    dead port 1/2 on $mux $procmux$7227.
    dead port 2/2 on $mux $procmux$6453.
    dead port 1/2 on $mux $procmux$7224.
    dead port 2/2 on $mux $procmux$6451.
    dead port 1/2 on $mux $procmux$7221.
    dead port 1/2 on $mux $procmux$7215.
    dead port 1/2 on $mux $procmux$7212.
    dead port 1/2 on $mux $procmux$7209.
    dead port 1/2 on $mux $procmux$6249.
    dead port 1/2 on $mux $procmux$7206.
    dead port 1/2 on $mux $procmux$7203.
    dead port 1/2 on $mux $procmux$6246.
    dead port 1/2 on $mux $procmux$7200.
    dead port 2/2 on $mux $procmux$6444.
    dead port 1/2 on $mux $procmux$7197.
    dead port 1/2 on $mux $procmux$7194.
    dead port 1/2 on $mux $procmux$7191.
    dead port 1/2 on $mux $procmux$6442.
    dead port 1/2 on $mux $procmux$7188.
    dead port 1/2 on $mux $procmux$7185.
    dead port 1/2 on $mux $procmux$7182.
    dead port 1/2 on $mux $procmux$6243.
    dead port 1/2 on $mux $procmux$7179.
    dead port 2/2 on $mux $procmux$6435.
    dead port 1/2 on $mux $procmux$6433.
    dead port 2/2 on $mux $procmux$6430.
    dead port 1/2 on $mux $procmux$7173.
    dead port 1/2 on $mux $procmux$7170.
    dead port 1/2 on $mux $procmux$7167.
    dead port 1/2 on $mux $procmux$7164.
    dead port 1/2 on $mux $procmux$7161.
    dead port 1/2 on $mux $procmux$7158.
    dead port 1/2 on $mux $procmux$7155.
    dead port 1/2 on $mux $procmux$7152.
    dead port 1/2 on $mux $procmux$7149.
    dead port 1/2 on $mux $procmux$7146.
    dead port 1/2 on $mux $procmux$7143.
    dead port 1/2 on $mux $procmux$7140.
    dead port 1/2 on $mux $procmux$6237.
    dead port 1/2 on $mux $procmux$7137.
    dead port 2/2 on $mux $procmux$6423.
    dead port 1/2 on $mux $procmux$7134.
    dead port 2/2 on $mux $procmux$7125.
    dead port 1/2 on $mux $procmux$6421.
    dead port 1/2 on $mux $procmux$7119.
    dead port 1/2 on $mux $procmux$7113.
    dead port 1/2 on $mux $procmux$7110.
    dead port 2/2 on $mux $procmux$7101.
    dead port 1/2 on $mux $procmux$7095.
    dead port 2/2 on $mux $procmux$7080.
    dead port 2/2 on $mux $procmux$7074.
    dead port 1/2 on $mux $procmux$7072.
    dead port 2/2 on $mux $procmux$7065.
    dead port 1/2 on $mux $procmux$7063.
    dead port 1/2 on $mux $procmux$7060.
    dead port 1/2 on $mux $procmux$7053.
    dead port 1/2 on $mux $procmux$7047.
    dead port 1/2 on $mux $procmux$7044.
    dead port 1/2 on $mux $procmux$7038.
    dead port 1/2 on $mux $procmux$7035.
    dead port 1/2 on $mux $procmux$7032.
    dead port 1/2 on $mux $procmux$7023.
    dead port 1/2 on $mux $procmux$7017.
    dead port 1/2 on $mux $procmux$7014.
    dead port 2/2 on $mux $procmux$6418.
    dead port 1/2 on $mux $procmux$7008.
    dead port 1/2 on $mux $procmux$7005.
    dead port 1/2 on $mux $procmux$7002.
    dead port 1/2 on $mux $procmux$6234.
    dead port 2/2 on $mux $procmux$6993.
    dead port 2/2 on $mux $procmux$6987.
    dead port 2/2 on $mux $procmux$6985.
    dead port 1/2 on $mux $procmux$6231.
    dead port 1/2 on $mux $procmux$6978.
    dead port 2/2 on $mux $procmux$6416.
    dead port 2/2 on $mux $procmux$6969.
    dead port 2/2 on $mux $procmux$6963.
    dead port 1/2 on $mux $procmux$6961.
    dead port 2/2 on $mux $procmux$6954.
    dead port 1/2 on $mux $procmux$6952.
    dead port 1/2 on $mux $procmux$6949.
    dead port 2/2 on $mux $procmux$6942.
    dead port 1/2 on $mux $procmux$6940.
    dead port 1/2 on $mux $procmux$6937.
    dead port 1/2 on $mux $procmux$6934.
    dead port 2/2 on $mux $procmux$6927.
    dead port 1/2 on $mux $procmux$6925.
    dead port 1/2 on $mux $procmux$6922.
    dead port 1/2 on $mux $procmux$6919.
    dead port 1/2 on $mux $procmux$6916.
    dead port 1/2 on $mux $procmux$6909.
    dead port 1/2 on $mux $procmux$6903.
    dead port 1/2 on $mux $procmux$6900.
    dead port 1/2 on $mux $procmux$6894.
    dead port 1/2 on $mux $procmux$6891.
    dead port 1/2 on $mux $procmux$6192.
    dead port 1/2 on $mux $procmux$6228.
    dead port 2/2 on $mux $procmux$6408.
    dead port 1/2 on $mux $procmux$6888.
    dead port 1/2 on $mux $procmux$6879.
    dead port 1/2 on $mux $procmux$6873.
    dead port 1/2 on $mux $procmux$6870.
    dead port 1/2 on $mux $procmux$6406.
    dead port 1/2 on $mux $procmux$6864.
    dead port 1/2 on $mux $procmux$6861.
    dead port 1/2 on $mux $procmux$6858.
    dead port 1/2 on $mux $procmux$6852.
    dead port 2/2 on $mux $procmux$6403.
    dead port 1/2 on $mux $procmux$6849.
    dead port 1/2 on $mux $procmux$6846.
    dead port 1/2 on $mux $procmux$6843.
    dead port 2/2 on $mux $procmux$6831.
    dead port 2/2 on $mux $procmux$6825.
    dead port 2/2 on $mux $procmux$6823.
    dead port 2/2 on $mux $procmux$6816.
    dead port 2/2 on $mux $procmux$6814.
    dead port 1/2 on $mux $procmux$6812.
    dead port 2/2 on $mux $procmux$6804.
    dead port 1/2 on $mux $procmux$6802.
    dead port 2/2 on $mux $procmux$6792.
    dead port 2/2 on $mux $procmux$6786.
    dead port 1/2 on $mux $procmux$6784.
    dead port 2/2 on $mux $procmux$6777.
    dead port 1/2 on $mux $procmux$6775.
Running muxtree optimizer on module \a25_fetch..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_icache..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \single_port_ram_128_8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \single_port_ram_21_8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \arm_core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_coprocessor..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_wishbone..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_wishbone_buf..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$8516.
    dead port 2/2 on $mux $procmux$8504.
    dead port 2/2 on $mux $procmux$8492.
    dead port 2/2 on $mux $procmux$8478.
Running muxtree optimizer on module \a25_write_back..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_dcache..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_execute..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 1216 multiplexer ports.
<suppressed ~308 debug messages>

8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \a25_alu.
  Optimizing cells in module \a25_multiply.
  Optimizing cells in module \a25_register_bank.
  Optimizing cells in module \a25_barrel_shift.
  Optimizing cells in module \a25_shifter_full.
  Optimizing cells in module \a25_shifter_quick.
  Optimizing cells in module \a25_decode.
  Optimizing cells in module \a25_fetch.
  Optimizing cells in module \a25_icache.
    New ctrl vector for $pmux cell $procmux$8266: { $procmux$8288_CMP $auto$opt_reduce.cc:134:opt_pmux$8916 }
  Optimizing cells in module \a25_icache.
  Optimizing cells in module \single_port_ram_128_8.
    Consolidated identical input bits for $mux cell $procmux$8313:
      Old ports: A=128'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, B=128'11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111, Y=$procmux$8313_Y
      New ports: A=1'0, B=1'1, Y=$procmux$8313_Y [0]
      New connections: $procmux$8313_Y [127:1] = { $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] $procmux$8313_Y [0] }
  Optimizing cells in module \single_port_ram_128_8.
  Optimizing cells in module \single_port_ram_21_8.
    Consolidated identical input bits for $mux cell $procmux$8325:
      Old ports: A=21'000000000000000000000, B=21'111111111111111111111, Y=$procmux$8325_Y
      New ports: A=1'0, B=1'1, Y=$procmux$8325_Y [0]
      New connections: $procmux$8325_Y [20:1] = { $procmux$8325_Y [0] $procmux$8325_Y [0] $procmux$8325_Y [0] $procmux$8325_Y [0] $procmux$8325_Y [0] $procmux$8325_Y [0] $procmux$8325_Y [0] $procmux$8325_Y [0] $procmux$8325_Y [0] $procmux$8325_Y [0] $procmux$8325_Y [0] $procmux$8325_Y [0] $procmux$8325_Y [0] $procmux$8325_Y [0] $procmux$8325_Y [0] $procmux$8325_Y [0] $procmux$8325_Y [0] $procmux$8325_Y [0] $procmux$8325_Y [0] $procmux$8325_Y [0] }
  Optimizing cells in module \single_port_ram_21_8.
  Optimizing cells in module \arm_core.
  Optimizing cells in module \a25_coprocessor.
  Optimizing cells in module \a25_wishbone.
  Optimizing cells in module \a25_wishbone_buf.
  Optimizing cells in module \a25_write_back.
  Optimizing cells in module \a25_mem.
  Optimizing cells in module \a25_dcache.
    New ctrl vector for $pmux cell $procmux$8660: { $procmux$8692_CMP $procmux$8688_CMP $procmux$8673_CMP $procmux$8669_CMP $auto$opt_reduce.cc:134:opt_pmux$8918 $procmux$8667_CMP $procmux$8664_CMP $procmux$8661_CMP }
    New ctrl vector for $pmux cell $procmux$8633: { $procmux$8692_CMP $procmux$8688_CMP $procmux$8673_CMP $auto$opt_reduce.cc:134:opt_pmux$8920 }
  Optimizing cells in module \a25_dcache.
  Optimizing cells in module \a25_execute.
Performed a total of 5 changes.

8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a25_alu'.
Finding identical cells in module `\a25_multiply'.
Finding identical cells in module `\a25_register_bank'.
Finding identical cells in module `\a25_barrel_shift'.
Finding identical cells in module `\a25_shifter_full'.
Finding identical cells in module `\a25_shifter_quick'.
Finding identical cells in module `\a25_decode'.
<suppressed ~219 debug messages>
Finding identical cells in module `\a25_fetch'.
Finding identical cells in module `\a25_icache'.
Finding identical cells in module `\single_port_ram_128_8'.
Finding identical cells in module `\single_port_ram_21_8'.
Finding identical cells in module `\arm_core'.
Finding identical cells in module `\a25_coprocessor'.
Finding identical cells in module `\a25_wishbone'.
<suppressed ~9 debug messages>
Finding identical cells in module `\a25_wishbone_buf'.
<suppressed ~6 debug messages>
Finding identical cells in module `\a25_write_back'.
Finding identical cells in module `\a25_mem'.
Finding identical cells in module `\a25_dcache'.
<suppressed ~9 debug messages>
Finding identical cells in module `\a25_execute'.
<suppressed ~6 debug messages>
Removed a total of 83 cells.

8.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$8701 ($dff) from module a25_multiply (D = \count_nxt, Q = \count).
Adding EN signal on $procdff$8702 ($dff) from module a25_multiply (D = \product_nxt, Q = \product).
Adding EN signal on $procdff$8700 ($dff) from module a25_multiply (D = \o_done_$mux_A_B, Q = \o_done).
Adding EN signal on $procdff$8703 ($dff) from module a25_register_bank (D = \reg_bank_wen_c_$mux_S_Y, Q = \r0).
Adding EN signal on $procdff$8704 ($dff) from module a25_register_bank (D = \reg_bank_wen_c_$mux_S_1_Y, Q = \r1).
Adding EN signal on $procdff$8705 ($dff) from module a25_register_bank (D = \reg_bank_wen_c_$mux_S_2_Y, Q = \r2).
Adding EN signal on $procdff$8706 ($dff) from module a25_register_bank (D = \reg_bank_wen_c_$mux_S_3_Y, Q = \r3).
Adding EN signal on $procdff$8707 ($dff) from module a25_register_bank (D = \reg_bank_wen_c_$mux_S_4_Y, Q = \r4).
Adding EN signal on $procdff$8708 ($dff) from module a25_register_bank (D = \reg_bank_wen_c_$mux_S_5_Y, Q = \r5).
Adding EN signal on $procdff$8709 ($dff) from module a25_register_bank (D = \reg_bank_wen_c_$mux_S_6_Y, Q = \r6).
Adding EN signal on $procdff$8710 ($dff) from module a25_register_bank (D = \reg_bank_wen_c_$mux_S_7_Y, Q = \r7).
Adding EN signal on $procdff$8711 ($dff) from module a25_register_bank (D = \firq_idec_$logic_not_A_Y_$logic_and_B_Y_$mux_S_Y, Q = \r8).
Adding EN signal on $procdff$8712 ($dff) from module a25_register_bank (D = \firq_idec_$logic_not_A_1_Y_$logic_and_B_Y_$mux_S_Y, Q = \r9).
Adding EN signal on $procdff$8713 ($dff) from module a25_register_bank (D = \firq_idec_$logic_not_A_2_Y_$logic_and_B_Y_$mux_S_Y, Q = \r10).
Adding EN signal on $procdff$8714 ($dff) from module a25_register_bank (D = \firq_idec_$logic_not_A_3_Y_$logic_and_B_Y_$mux_S_Y, Q = \r11).
Adding EN signal on $procdff$8715 ($dff) from module a25_register_bank (D = \firq_idec_$logic_not_A_4_Y_$logic_and_B_Y_$mux_S_Y, Q = \r12).
Adding EN signal on $procdff$8716 ($dff) from module a25_register_bank (D = \usr_idec_$logic_and_B_Y_$mux_S_Y, Q = \r13).
Adding EN signal on $procdff$8717 ($dff) from module a25_register_bank (D = \usr_idec_$logic_and_B_1_Y_$mux_S_Y, Q = \r14).
Adding EN signal on $procdff$8718 ($dff) from module a25_register_bank (D = \pc_wen_c_$mux_S_Y, Q = \r15).
Adding EN signal on $procdff$8719 ($dff) from module a25_register_bank (D = \svc_idec_$logic_and_B_Y_$mux_S_Y, Q = \r13_svc).
Adding EN signal on $procdff$8720 ($dff) from module a25_register_bank (D = \svc_idec_$logic_and_B_1_Y_$mux_S_Y, Q = \r14_svc).
Adding EN signal on $procdff$8721 ($dff) from module a25_register_bank (D = \irq_idec_$logic_and_B_Y_$mux_S_Y, Q = \r13_irq).
Adding EN signal on $procdff$8722 ($dff) from module a25_register_bank (D = \irq_idec_$logic_and_B_1_Y_$mux_S_Y, Q = \r14_irq).
Adding EN signal on $procdff$8723 ($dff) from module a25_register_bank (D = \firq_idec_$logic_and_B_Y_$mux_S_Y, Q = \r8_firq).
Adding EN signal on $procdff$8724 ($dff) from module a25_register_bank (D = \firq_idec_$logic_and_B_1_Y_$mux_S_Y, Q = \r9_firq).
Adding EN signal on $procdff$8725 ($dff) from module a25_register_bank (D = \firq_idec_$logic_and_B_2_Y_$mux_S_Y, Q = \r10_firq).
Adding EN signal on $procdff$8726 ($dff) from module a25_register_bank (D = \firq_idec_$logic_and_B_3_Y_$mux_S_Y, Q = \r11_firq).
Adding EN signal on $procdff$8727 ($dff) from module a25_register_bank (D = \firq_idec_$logic_and_B_4_Y_$mux_S_Y, Q = \r12_firq).
Adding EN signal on $procdff$8728 ($dff) from module a25_register_bank (D = \firq_idec_$logic_and_B_5_Y_$mux_S_Y, Q = \r13_firq).
Adding EN signal on $procdff$8729 ($dff) from module a25_register_bank (D = \firq_idec_$logic_and_B_6_Y_$mux_S_Y, Q = \r14_firq).
Adding EN signal on $procdff$8752 ($dff) from module a25_decode (D = \adex_reg_$mux_B_Y, Q = \hold_instruction_adex).
Adding EN signal on $procdff$8743 ($dff) from module a25_decode (D = \fetch_instruction_r, Q = \pre_fetch_instruction).
Adding EN signal on $procdff$8740 ($dff) from module a25_decode (D = $procmux$3545_Y, Q = \saved_current_instruction_adex).
Adding EN signal on $procdff$8763 ($dff) from module a25_decode (D = \status_bits_irq_mask_nxt, Q = \o_status_bits_irq_mask).
Adding EN signal on $procdff$8764 ($dff) from module a25_decode (D = \status_bits_firq_mask_nxt, Q = \o_status_bits_firq_mask).
Adding EN signal on $procdff$8765 ($dff) from module a25_decode (D = \fetch_instruction_r_$mux_B_Y [3:0], Q = \o_rm_sel).
Adding EN signal on $procdff$8737 ($dff) from module a25_decode (D = $procmux$3566_Y, Q = \saved_current_instruction).
Adding EN signal on $procdff$8753 ($dff) from module a25_decode (D = \fetch_address_r_$mux_B_Y, Q = \hold_instruction_address).
Adding EN signal on $procdff$8744 ($dff) from module a25_decode (D = \fetch_instruction_type_r, Q = \pre_fetch_instruction_type).
Adding EN signal on $procdff$8746 ($dff) from module a25_decode (D = \adex_reg, Q = \pre_fetch_instruction_adex).
Adding EN signal on $procdff$8745 ($dff) from module a25_decode (D = \iabt_reg, Q = \pre_fetch_instruction_iabt).
Adding EN signal on $procdff$8741 ($dff) from module a25_decode (D = $procmux$3538_Y, Q = \saved_current_instruction_address).
Adding EN signal on $procdff$8766 ($dff) from module a25_decode (D = \branch_$mux_S_1_Y_$mux_A_Y_$mux_A_Y, Q = \o_rs_sel).
Adding EN signal on $procdff$8767 ($dff) from module a25_decode (D = { \rs_sel_nxt_$eq_A_Y_$logic_and_B_Y_$logic_and_A_Y_$logic_and_A_Y \rs_sel_nxt_$eq_A_1_Y_$logic_and_B_Y_$logic_and_A_Y_$logic_and_A_Y_$logic_and_A_Y \type_$eq_A_Y_$logic_and_A_Y \type_$eq_A_2_Y_$logic_or_B_Y_$logic_and_A_Y \branch_$mux_S_1_Y_$mux_A_Y_$mux_A_Y }, Q = \o_load_rd).
Adding EN signal on $procdff$8768 ($dff) from module a25_decode (D = \branch_$mux_S_Y, Q = \o_rn_sel).
Adding EN signal on $procdff$8769 ($dff) from module a25_decode (D = \barrel_shift_amount_sel_nxt, Q = \o_barrel_shift_amount_sel).
Adding EN signal on $procdff$8770 ($dff) from module a25_decode (D = \barrel_shift_data_sel_nxt, Q = \o_barrel_shift_data_sel).
Adding EN signal on $procdff$8771 ($dff) from module a25_decode (D = \barrel_shift_function_nxt, Q = \o_barrel_shift_function).
Adding EN signal on $procdff$8816 ($dff) from module a25_decode (D = \rd_conflict1_$logic_and_A_Y, Q = \rd_conflict1_r).
Adding EN signal on $procdff$8754 ($dff) from module a25_decode (D = \abt_status_reg_$mux_B_Y, Q = \hold_instruction_iabt_status).
Adding EN signal on $procdff$8772 ($dff) from module a25_decode (D = { \alu_swap_sel_nxt \alu_not_sel_nxt \alu_cin_sel_nxt \alu_cout_sel_nxt \alu_out_sel_nxt }, Q = \o_alu_function).
Adding EN signal on $procdff$8773 ($dff) from module a25_decode (D = \multiply_function_nxt, Q = \o_multiply_function).
Adding EN signal on $procdff$8774 ($dff) from module a25_decode (D = \dabt_request_$mux_S_Y, Q = \o_interrupt_vector_sel).
Adding EN signal on $procdff$8815 ($dff) from module a25_decode (D = \rs_conflict1_$logic_and_A_Y, Q = \rs_conflict1_r).
Adding EN signal on $procdff$8738 ($dff) from module a25_decode (D = $procmux$3559_Y, Q = \saved_current_instruction_type).
Adding EN signal on $procdff$8775 ($dff) from module a25_decode (D = \iaddress_sel_nxt, Q = \o_iaddress_sel).
Adding EN signal on $procdff$8776 ($dff) from module a25_decode (D = \daddress_sel_nxt, Q = \o_daddress_sel).
Adding EN signal on $procdff$8777 ($dff) from module a25_decode (D = \pc_sel_nxt, Q = \o_pc_sel).
Adding EN signal on $procdff$8778 ($dff) from module a25_decode (D = \byte_enable_sel_nxt, Q = \o_byte_enable_sel).
Adding EN signal on $procdff$8814 ($dff) from module a25_decode (D = \rm_conflict1_$logic_and_A_Y, Q = \rm_conflict1_r).
Adding EN signal on $procdff$8779 ($dff) from module a25_decode (D = \status_bits_sel_nxt, Q = \o_status_bits_sel).
Adding EN signal on $procdff$8780 ($dff) from module a25_decode (D = \reg_write_sel_nxt, Q = \o_reg_write_sel).
Adding EN signal on $procdff$8781 ($dff) from module a25_decode (D = \status_bits_mode_nxt_$eq_A_Y, Q = \o_firq_not_user_mode).
Adding EN signal on $procdff$8782 ($dff) from module a25_decode (D = \write_data_wen_nxt, Q = \o_write_data_wen).
Adding EN signal on $procdff$8783 ($dff) from module a25_decode (D = \base_address_wen_nxt, Q = \o_base_address_wen).
Adding EN signal on $procdff$8784 ($dff) from module a25_decode (D = \pc_wen_nxt, Q = \o_pc_wen).
Adding EN signal on $procdff$8785 ($dff) from module a25_decode (D = \reg_bank_wen_nxt, Q = \o_reg_bank_wen).
Adding EN signal on $procdff$8786 ($dff) from module a25_decode (D = \status_bits_flags_wen_nxt, Q = \o_status_bits_flags_wen).
Adding EN signal on $procdff$8787 ($dff) from module a25_decode (D = \status_bits_mode_wen_nxt, Q = \o_status_bits_mode_wen).
Adding EN signal on $procdff$8788 ($dff) from module a25_decode (D = \status_bits_irq_mask_wen_nxt, Q = \o_status_bits_irq_mask_wen).
Adding EN signal on $procdff$8789 ($dff) from module a25_decode (D = \status_bits_firq_mask_wen_nxt, Q = \o_status_bits_firq_mask_wen).
Adding EN signal on $procdff$8790 ($dff) from module a25_decode (D = \fetch_instruction_r_$mux_B_Y [23:21], Q = \o_copro_opcode1).
Adding EN signal on $procdff$8791 ($dff) from module a25_decode (D = \fetch_instruction_r_$mux_B_Y [7:5], Q = \o_copro_opcode2).
Adding EN signal on $procdff$8792 ($dff) from module a25_decode (D = \fetch_instruction_r_$mux_B_Y [19:16], Q = \o_copro_crn).
Adding EN signal on $procdff$8793 ($dff) from module a25_decode (D = \fetch_instruction_r_$mux_B_Y [3:0], Q = \o_copro_crm).
Adding EN signal on $procdff$8794 ($dff) from module a25_decode (D = \fetch_instruction_r_$mux_B_Y [11:8], Q = \o_copro_num).
Adding EN signal on $procdff$8795 ($dff) from module a25_decode (D = \copro_operation_nxt, Q = \o_copro_operation).
Adding EN signal on $procdff$8796 ($dff) from module a25_decode (D = \copro_write_data_wen_nxt, Q = \o_copro_write_data_wen).
Adding EN signal on $procdff$8797 ($dff) from module a25_decode (D = \load_pc_nxt, Q = \load_pc_r).
Adding EN signal on $procdff$8798 ($dff) from module a25_decode (D = \control_state_nxt, Q = \control_state).
Adding EN signal on $procdff$8799 ($dff) from module a25_decode (D = \i_iabt, Q = \iabt_reg).
Adding EN signal on $procdff$8800 ($dff) from module a25_decode (D = \i_adex, Q = \adex_reg).
Adding EN signal on $procdff$8801 ($dff) from module a25_decode (D = \i_execute_iaddress, Q = \fetch_address_r).
Adding EN signal on $procdff$8802 ($dff) from module a25_decode (D = \i_abt_status, Q = \abt_status_reg).
Adding EN signal on $procdff$8803 ($dff) from module a25_decode (D = \i_fetch_instruction, Q = \fetch_instruction_r).
Adding EN signal on $procdff$8804 ($dff) from module a25_decode (D = \i_fetch_$eq_A_Y_$logic_and_A_Y_$mux_S_Y, Q = \fetch_instruction_type_r).
Adding SRST signal on $auto$ff.cc:262:slice$9142 ($dffe) from module a25_decode (D = \i_fetch_$eq_A_12_Y_$logic_and_B_Y_$mux_S_Y [3], Q = \fetch_instruction_type_r [3], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9142 ($dffe) from module a25_decode (D = \i_fetch_$eq_A_6_Y_$mux_S_Y [2], Q = \fetch_instruction_type_r [2], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9142 ($dffe) from module a25_decode (D = \i_fetch_$eq_A_3_Y_$logic_and_B_Y_$mux_S_Y [1:0], Q = \fetch_instruction_type_r [1:0], rval = 2'10).
Adding EN signal on $procdff$8805 ($dff) from module a25_decode (D = \restore_base_address_nxt, Q = \restore_base_address).
Adding EN signal on $procdff$8806 ($dff) from module a25_decode (D = { 2'00 \o_decode_daccess_$logic_and_A_Y \o_load_rd [3:0] }, Q = \load_rd_d1).
Adding EN signal on $procdff$8807 ($dff) from module a25_decode (D = \rn_conflict2_$logic_or_B_Y_$logic_and_B_Y, Q = \o_rn_use_read).
Adding EN signal on $procdff$8808 ($dff) from module a25_decode (D = \rm_conflict2_$logic_or_B_Y_$logic_and_B_Y, Q = \o_rm_use_read).
Adding EN signal on $procdff$8809 ($dff) from module a25_decode (D = \rs_conflict2_$logic_or_B_Y_$logic_and_B_Y, Q = \o_rs_use_read).
Adding EN signal on $procdff$8810 ($dff) from module a25_decode (D = \rd_conflict2_$logic_or_B_Y_$logic_and_B_Y, Q = \o_rd_use_read).
Adding EN signal on $procdff$8811 ($dff) from module a25_decode (D = \o_condition_$eq_A_14_Y_$logic_and_A_Y_$logic_or_B_Y, Q = \instruction_execute_r).
Adding EN signal on $procdff$8812 ($dff) from module a25_decode (D = \conflict2_$logic_or_B_Y, Q = \conflict_r).
Adding EN signal on $procdff$8813 ($dff) from module a25_decode (D = \rn_conflict1_$logic_and_A_Y, Q = \rn_conflict1_r).
Adding EN signal on $procdff$8739 ($dff) from module a25_decode (D = $procmux$3552_Y, Q = \saved_current_instruction_iabt).
Adding EN signal on $procdff$8755 ($dff) from module a25_decode (D = \mtrans_base_reg_change_$mux_B_Y_$mux_A_Y, Q = \o_imm32).
Adding SRST signal on $auto$ff.cc:262:slice$9172 ($dffe) from module a25_decode (D = \mtrans_base_reg_change_$mux_B_Y, Q = \o_imm32, rval = 0).
Adding EN signal on $procdff$8756 ($dff) from module a25_decode (D = \fetch_instruction_r_$mux_B_Y [11:7], Q = \o_imm_shift_amount).
Adding EN signal on $procdff$8757 ($dff) from module a25_decode (D = \barrel_shift_amount_sel_nxt_$eq_A_Y_$logic_and_B_Y, Q = \o_shift_imm_zero).
Adding EN signal on $procdff$8758 ($dff) from module a25_decode (D = \condition_nxt_$mux_B_Y, Q = \o_condition).
Adding SRST signal on $auto$ff.cc:262:slice$9176 ($dffe) from module a25_decode (D = \condition_nxt, Q = \o_condition, rval = 4'1110).
Adding EN signal on $procdff$8759 ($dff) from module a25_decode (D = \decode_exclusive_nxt, Q = \o_decode_exclusive).
Adding EN signal on $procdff$8760 ($dff) from module a25_decode (D = \decode_iaccess_nxt, Q = \o_decode_iaccess).
Adding EN signal on $procdff$8749 ($dff) from module a25_decode (D = \fetch_instruction_r_$mux_B_Y, Q = \hold_instruction).
Adding EN signal on $procdff$8761 ($dff) from module a25_decode (D = \decode_daccess_nxt, Q = \o_decode_daccess).
Adding EN signal on $procdff$8750 ($dff) from module a25_decode (D = \fetch_instruction_type_r_$mux_B_Y, Q = \hold_instruction_type).
Adding EN signal on $procdff$8762 ($dff) from module a25_decode (D = \status_bits_mode_nxt, Q = \o_status_bits_mode).
Adding EN signal on $procdff$8751 ($dff) from module a25_decode (D = \iabt_reg_$mux_B_Y, Q = \hold_instruction_iabt).
Adding EN signal on $procdff$8747 ($dff) from module a25_decode (D = \fetch_address_r, Q = \pre_fetch_instruction_address).
Adding EN signal on $procdff$8748 ($dff) from module a25_decode (D = \abt_status_reg, Q = \pre_fetch_instruction_iabt_status).
Adding EN signal on $procdff$8742 ($dff) from module a25_decode (D = $procmux$3531_Y, Q = \saved_current_instruction_iabt_status).
Adding EN signal on $procdff$8733 ($dff) from module a25_decode (D = $procmux$3488_Y, Q = \dabt_reg).
Adding SRST signal on $auto$ff.cc:262:slice$9202 ($dffe) from module a25_decode (D = \i_dabt_$logic_or_B_Y, Q = \dabt_reg, rval = 1'0).
Adding EN signal on $procdff$8734 ($dff) from module a25_decode (D = \dabt_reg, Q = \dabt_reg_d1).
Adding EN signal on $procdff$8735 ($dff) from module a25_decode (D = \i_irq, Q = \irq).
Adding EN signal on $procdff$8736 ($dff) from module a25_decode (D = \i_firq, Q = \firq).
Setting constant 0-bit at position 5 on $auto$ff.cc:262:slice$9157 ($dffe) from module a25_decode.
Setting constant 0-bit at position 6 on $auto$ff.cc:262:slice$9157 ($dffe) from module a25_decode.
Adding EN signal on $procdff$8818 ($dff) from module a25_icache (D = { \tag_rdata_way3 [20] \tag_rdata_way2 [20] \tag_rdata_way1 [20] \tag_rdata_way0 [20] }, Q = \valid_bits_r).
Adding EN signal on $procdff$8819 ($dff) from module a25_icache (D = $procmux$8235_Y [3:0], Q = \wb_address [3:0]).
Adding EN signal on $procdff$8819 ($dff) from module a25_icache (D = $procmux$8235_Y [31:4], Q = \wb_address [31:4]).
Adding EN signal on $procdff$8821 ($dff) from module a25_icache (D = \i_address, Q = \miss_address).
Adding SRST signal on $procdff$8822 ($dff) from module a25_icache (D = $procmux$8276_Y, Q = \c_state, rval = 4'0000).
Adding EN signal on $auto$ff.cc:262:slice$9220 ($sdff) from module a25_icache (D = $procmux$8276_Y, Q = \c_state).
Adding SRST signal on $procdff$8823 ($dff) from module a25_icache (D = $procmux$8266_Y, Q = \source_sel, rval = 4'0001).
Adding EN signal on $auto$ff.cc:262:slice$9232 ($sdff) from module a25_icache (D = $procmux$8266_Y, Q = \source_sel).
Adding SRST signal on $procdff$8824 ($dff) from module a25_icache (D = $procmux$8260_Y, Q = \init_count, rval = 9'000000000).
Adding EN signal on $auto$ff.cc:262:slice$9236 ($sdff) from module a25_icache (D = \init_count_$add_A_Y, Q = \init_count).
Adding EN signal on $procdff$8825 ($dff) from module a25_icache (D = \valid_bits_r_$eq_A_Y_$mux_S_Y, Q = \select_way).
Adding SRST signal on $auto$ff.cc:262:slice$9240 ($dffe) from module a25_icache (D = \valid_bits_r_$eq_A_1_Y_$mux_S_Y [1:0], Q = \select_way [1:0], rval = 2'01).
Adding SRST signal on $auto$ff.cc:262:slice$9240 ($dffe) from module a25_icache (D = \valid_bits_r_$eq_A_2_Y_$mux_S_Y [2], Q = \select_way [2], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9240 ($dffe) from module a25_icache (D = \valid_bits_r_$eq_A_3_Y_$mux_S_Y [3], Q = \select_way [3], rval = 1'0).
Adding EN signal on $procdff$8826 ($dff) from module a25_icache (D = { \random_num [2:0] \random_num_$xor_B_Y }, Q = \random_num).
Adding EN signal on $procdff$8827 ($dff) from module a25_icache (D = \i_wb_read_data, Q = \read_buf_data_r).
Adding EN signal on $procdff$8828 ($dff) from module a25_icache (D = \miss_address, Q = \read_buf_addr_r).
Adding SRST signal on $procdff$8829 ($dff) from module a25_icache (D = $procmux$8295_Y, Q = \read_buf_valid_r, rval = 1'0).
Adding EN signal on $auto$ff.cc:262:slice$9267 ($sdff) from module a25_icache (D = $procmux$8295_Y, Q = \read_buf_valid_r).
Adding EN signal on $procdff$8831 ($dff) from module single_port_ram_128_8 (D = \addr_$memrd_ADDR_DATA, Q = \out).
Adding EN signal on $procdff$8835 ($dff) from module single_port_ram_21_8 (D = \addr_$memrd_ADDR_DATA, Q = \out).
Adding EN signal on $procdff$8839 ($dff) from module a25_coprocessor (D = $procmux$8337_Y, Q = \o_copro_read_data).
Adding EN signal on $procdff$8840 ($dff) from module a25_coprocessor (D = \i_copro_write_data [2:0], Q = \cache_control).
Adding EN signal on $procdff$8841 ($dff) from module a25_coprocessor (D = \i_copro_write_data, Q = \cacheable_area).
Adding EN signal on $procdff$8842 ($dff) from module a25_coprocessor (D = \i_copro_write_data, Q = \updateable_area).
Adding EN signal on $procdff$8843 ($dff) from module a25_coprocessor (D = \i_copro_write_data, Q = \disruptive_area).
Adding EN signal on $procdff$8844 ($dff) from module a25_coprocessor (D = \i_fault_status, Q = \fault_status).
Adding EN signal on $procdff$8845 ($dff) from module a25_coprocessor (D = \i_fault_address, Q = \fault_address).
Adding EN signal on $procdff$8851 ($dff) from module a25_wishbone (D = $procmux$8407_Y, Q = \o_wb_stb).
Adding EN signal on $procdff$8852 ($dff) from module a25_wishbone (D = $procmux$8396_Y, Q = \serving_port).
Adding SRST signal on $auto$ff.cc:262:slice$9305 ($dffe) from module a25_wishbone (D = $procmux$8390_Y [2], Q = \serving_port [2], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9305 ($dffe) from module a25_wishbone (D = $procmux$8393_Y [1:0], Q = \serving_port [1:0], rval = 2'01).
Adding EN signal on $procdff$8850 ($dff) from module a25_wishbone (D = $procmux$8418_Y, Q = \o_wb_cyc).
Adding EN signal on $procdff$8849 ($dff) from module a25_wishbone (D = $procmux$8429_Y, Q = \o_wb_dat).
Adding EN signal on $procdff$8848 ($dff) from module a25_wishbone (D = $procmux$8440_Y, Q = \o_wb_we).
Adding EN signal on $procdff$8846 ($dff) from module a25_wishbone (D = $procmux$8462_Y, Q = \o_wb_adr).
Adding EN signal on $procdff$8847 ($dff) from module a25_wishbone (D = $procmux$8451_Y, Q = \o_wb_sel).
Adding EN signal on $procdff$8855 ($dff) from module a25_wishbone_buf (D = \wbuf_rp_r_$logic_not_A_Y, Q = \wbuf_rp_r).
Adding EN signal on $procdff$8856 ($dff) from module a25_wishbone_buf (D = \i_addr, Q = \wbuf_addr_r0).
Adding EN signal on $procdff$8857 ($dff) from module a25_wishbone_buf (D = $procmux$8516_Y, Q = \wbuf_addr_r1).
Adding EN signal on $procdff$8858 ($dff) from module a25_wishbone_buf (D = \i_wdata, Q = \wbuf_wdata_r0).
Adding EN signal on $procdff$8865 ($dff) from module a25_wishbone_buf (D = $procmux$8536_Y, Q = \wbuf_used_r).
Adding SRST signal on $procdff$8854 ($dff) from module a25_wishbone_buf (D = $procmux$8471_Y, Q = \busy_reading_r, rval = 1'1).
Adding EN signal on $auto$ff.cc:262:slice$9340 ($sdff) from module a25_wishbone_buf (D = 1'0, Q = \busy_reading_r).
Adding EN signal on $procdff$8859 ($dff) from module a25_wishbone_buf (D = $procmux$8504_Y, Q = \wbuf_wdata_r1).
Adding EN signal on $procdff$8860 ($dff) from module a25_wishbone_buf (D = \i_write_$mux_S_Y, Q = \wbuf_be_r0).
Adding EN signal on $procdff$8861 ($dff) from module a25_wishbone_buf (D = $procmux$8492_Y, Q = \wbuf_be_r1).
Adding EN signal on $procdff$8862 ($dff) from module a25_wishbone_buf (D = \i_write, Q = \wbuf_write_r [0]).
Adding EN signal on $procdff$8862 ($dff) from module a25_wishbone_buf (D = $procmux$8478_Y, Q = \wbuf_write_r [1]).
Adding EN signal on $procdff$8863 ($dff) from module a25_wishbone_buf (D = \wbuf_wp_r_$logic_not_A_Y, Q = \wbuf_wp_r).
Adding SRST signal on $procdff$8864 ($dff) from module a25_wishbone_buf (D = $procmux$8528_Y, Q = \ack_owed_r, rval = 1'1).
Adding EN signal on $auto$ff.cc:262:slice$9362 ($sdff) from module a25_wishbone_buf (D = 1'0, Q = \ack_owed_r).
Adding SRST signal on $procdff$8853 ($dff) from module a25_wishbone_buf (D = $procmux$8466_Y, Q = \wait_rdata_valid_r, rval = 1'1).
Adding EN signal on $auto$ff.cc:262:slice$9364 ($sdff) from module a25_wishbone_buf (D = 1'0, Q = \wait_rdata_valid_r).
Adding EN signal on $procdff$8866 ($dff) from module a25_write_back (D = \i_mem_read_data, Q = \mem_read_data_r).
Adding EN signal on $procdff$8867 ($dff) from module a25_write_back (D = \i_mem_read_data_valid, Q = \mem_read_data_valid_r).
Adding EN signal on $procdff$8868 ($dff) from module a25_write_back (D = \i_mem_load_rd, Q = \mem_load_rd_r).
Adding EN signal on $procdff$8869 ($dff) from module a25_mem (D = \sel_cache_$mux_S_Y, Q = \mem_read_data_r).
Adding EN signal on $procdff$8870 ($dff) from module a25_mem (D = \i_write_enable_$logic_not_A_Y_$logic_and_B_Y_$logic_and_A_Y, Q = \mem_read_data_valid_r).
Adding EN signal on $procdff$8871 ($dff) from module a25_mem (D = { \i_daddress [1:0] \i_exec_load_rd }, Q = \mem_load_rd_r).
Adding EN signal on $procdff$8884 ($dff) from module a25_dcache (D = \write_hit_$logic_and_A_Y_$mux_S_Y, Q = \data_wdata_r).
Adding EN signal on $procdff$8885 ($dff) from module a25_dcache (D = { \tag_rdata_way3_$logic_and_A_Y_$logic_and_A_Y \tag_rdata_way2_$logic_and_A_Y_$logic_and_A_Y \tag_rdata_way1_$logic_and_A_Y_$logic_and_A_Y \tag_rdata_way0_$logic_and_A_Y_$logic_and_A_Y }, Q = \data_hit_way_r).
Adding EN signal on $procdff$8886 ($dff) from module a25_dcache (D = \i_address, Q = \miss_address).
Adding EN signal on $procdff$8887 ($dff) from module a25_dcache (D = \i_wb_cached_rdata, Q = \wb_rdata_burst).
Adding SRST signal on $procdff$8888 ($dff) from module a25_dcache (D = $procmux$8660_Y, Q = \c_state, rval = 4'0000).
Adding EN signal on $auto$ff.cc:262:slice$9376 ($sdff) from module a25_dcache (D = $procmux$8660_Y, Q = \c_state).
Adding EN signal on $procdff$8883 ($dff) from module a25_dcache (D = $procmux$8574_Y [3:0], Q = \wb_address [3:0]).
Adding EN signal on $procdff$8883 ($dff) from module a25_dcache (D = $procmux$8574_Y [31:4], Q = \wb_address [31:4]).
Adding SRST signal on $procdff$8889 ($dff) from module a25_dcache (D = $procmux$8633_Y, Q = \source_sel, rval = 4'0001).
Adding EN signal on $auto$ff.cc:262:slice$9400 ($sdff) from module a25_dcache (D = $procmux$8633_Y, Q = \source_sel).
Adding SRST signal on $procdff$8890 ($dff) from module a25_dcache (D = $procmux$8625_Y, Q = \init_count, rval = 9'000000000).
Adding EN signal on $auto$ff.cc:262:slice$9410 ($sdff) from module a25_dcache (D = \init_count_$add_A_Y, Q = \init_count).
Adding EN signal on $procdff$8891 ($dff) from module a25_dcache (D = $procmux$8605_Y, Q = \select_way).
Adding EN signal on $procdff$8892 ($dff) from module a25_dcache (D = { \random_num [2:0] \random_num_$xor_B_Y }, Q = \random_num).
Adding EN signal on $procdff$8878 ($dff) from module a25_dcache (D = { \tag_rdata_way3 [20] \tag_rdata_way2 [20] \tag_rdata_way1 [20] \tag_rdata_way0 [20] }, Q = \valid_bits_r).
Adding EN signal on $procdff$8879 ($dff) from module a25_dcache (D = \i_address [11:4], Q = \ex_read_address).
Adding SRST signal on $procdff$8880 ($dff) from module a25_dcache (D = $procmux$8566_Y, Q = \ex_read_hit_r, rval = 1'0).
Adding EN signal on $auto$ff.cc:262:slice$9432 ($sdff) from module a25_dcache (D = 1'1, Q = \ex_read_hit_r).
Adding SRST signal on $procdff$8881 ($dff) from module a25_dcache (D = $procmux$8560_Y, Q = \ex_read_hit_way, rval = 4'0000).
Adding EN signal on $auto$ff.cc:262:slice$9434 ($sdff) from module a25_dcache (D = $procmux$8560_Y, Q = \ex_read_hit_way).
Adding EN signal on $procdff$8893 ($dff) from module a25_execute (D = \write_data_nxt, Q = \o_copro_write_data).
Adding EN signal on $procdff$8894 ($dff) from module a25_execute (D = \write_data_nxt, Q = \o_write_data).
Adding EN signal on $procdff$8895 ($dff) from module a25_execute (D = \o_iaddress_nxt, Q = \o_iaddress).
Adding EN signal on $procdff$8896 ($dff) from module a25_execute (D = \iaddress_valid_nxt, Q = \o_iaddress_valid).
Adding EN signal on $procdff$8897 ($dff) from module a25_execute (D = \o_daddress_nxt, Q = \o_daddress).
Adding EN signal on $procdff$8898 ($dff) from module a25_execute (D = \daddress_valid_nxt, Q = \o_daddress_valid).
Adding EN signal on $procdff$8899 ($dff) from module a25_execute (D = \adex_nxt, Q = \o_adex).
Adding EN signal on $procdff$8900 ($dff) from module a25_execute (D = \priviledged_nxt, Q = \o_priviledged).
Adding EN signal on $procdff$8901 ($dff) from module a25_execute (D = \i_decode_exclusive, Q = \o_exclusive).
Adding EN signal on $procdff$8902 ($dff) from module a25_execute (D = \write_enable_nxt, Q = \o_write_enable).
Adding EN signal on $procdff$8903 ($dff) from module a25_execute (D = \byte_enable_nxt, Q = \o_byte_enable).
Adding EN signal on $procdff$8904 ($dff) from module a25_execute (D = \exec_load_rd_nxt, Q = \o_exec_load_rd).
Adding EN signal on $procdff$8905 ($dff) from module a25_execute (D = \status_bits_flags_nxt, Q = \status_bits_flags).
Adding EN signal on $procdff$8906 ($dff) from module a25_execute (D = \status_bits_mode_nxt, Q = \status_bits_mode).
Adding EN signal on $procdff$8907 ($dff) from module a25_execute (D = \status_bits_mode_rds_oh_nxt, Q = \status_bits_mode_rds_oh).
Adding EN signal on $procdff$8908 ($dff) from module a25_execute (D = \status_bits_irq_mask_nxt, Q = \status_bits_irq_mask).
Adding EN signal on $procdff$8909 ($dff) from module a25_execute (D = \status_bits_firq_mask_nxt, Q = \status_bits_firq_mask).
Adding EN signal on $procdff$8910 ($dff) from module a25_execute (D = \rn, Q = \base_address).

8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a25_alu..
Finding unused cells or wires in module \a25_multiply..
Finding unused cells or wires in module \a25_register_bank..
Finding unused cells or wires in module \a25_barrel_shift..
Finding unused cells or wires in module \a25_shifter_full..
Finding unused cells or wires in module \a25_shifter_quick..
Finding unused cells or wires in module \a25_decode..
Finding unused cells or wires in module \a25_fetch..
Finding unused cells or wires in module \a25_icache..
Finding unused cells or wires in module \single_port_ram_128_8..
Finding unused cells or wires in module \single_port_ram_21_8..
Finding unused cells or wires in module \arm_core..
Finding unused cells or wires in module \a25_coprocessor..
Finding unused cells or wires in module \a25_wishbone..
Finding unused cells or wires in module \a25_wishbone_buf..
Finding unused cells or wires in module \a25_write_back..
Finding unused cells or wires in module \a25_mem..
Finding unused cells or wires in module \a25_dcache..
Finding unused cells or wires in module \a25_execute..
Removed 238 unused cells and 4098 unused wires.
<suppressed ~292 debug messages>

8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module a25_alu.
Optimizing module a25_barrel_shift.
Optimizing module a25_coprocessor.
Optimizing module a25_dcache.
<suppressed ~6 debug messages>
Optimizing module a25_decode.
<suppressed ~7 debug messages>
Optimizing module a25_execute.
Optimizing module a25_fetch.
Optimizing module a25_icache.
<suppressed ~5 debug messages>
Optimizing module a25_mem.
Optimizing module a25_multiply.
Optimizing module a25_register_bank.
<suppressed ~27 debug messages>
Optimizing module a25_shifter_full.
Optimizing module a25_shifter_quick.
Optimizing module a25_wishbone.
<suppressed ~1 debug messages>
Optimizing module a25_wishbone_buf.
<suppressed ~1 debug messages>
Optimizing module a25_write_back.
Optimizing module arm_core.
Optimizing module single_port_ram_128_8.
Optimizing module single_port_ram_21_8.

8.9. Rerunning OPT passes. (Maybe there is more to do..)

8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \a25_alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_barrel_shift..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_coprocessor..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_dcache..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_decode..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_execute..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_fetch..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_icache..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_multiply..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_register_bank..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_shifter_full..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_shifter_quick..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_wishbone..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_wishbone_buf..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_write_back..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \arm_core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \single_port_ram_128_8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \single_port_ram_21_8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~218 debug messages>

8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \a25_alu.
  Optimizing cells in module \a25_barrel_shift.
  Optimizing cells in module \a25_coprocessor.
  Optimizing cells in module \a25_dcache.
    New ctrl vector for $pmux cell $procmux$8660: { \fill_state_$logic_and_A_Y_$logic_or_B_A_$logic_or_Y_B \c_state_$eq_A_2_Y \fill_state \fill_state_$logic_and_A_Y_$logic_or_B_A_$logic_or_Y_A_$logic_or_Y_B $auto$opt_reduce.cc:134:opt_pmux$8918 \c_state_$eq_A_3_Y $auto$opt_reduce.cc:134:opt_pmux$9457 }
  Optimizing cells in module \a25_dcache.
  Optimizing cells in module \a25_decode.
  Optimizing cells in module \a25_execute.
  Optimizing cells in module \a25_fetch.
  Optimizing cells in module \a25_icache.
  Optimizing cells in module \a25_mem.
  Optimizing cells in module \a25_multiply.
  Optimizing cells in module \a25_register_bank.
  Optimizing cells in module \a25_shifter_full.
  Optimizing cells in module \a25_shifter_quick.
  Optimizing cells in module \a25_wishbone.
  Optimizing cells in module \a25_wishbone_buf.
  Optimizing cells in module \a25_write_back.
  Optimizing cells in module \arm_core.
  Optimizing cells in module \single_port_ram_128_8.
  Optimizing cells in module \single_port_ram_21_8.
Performed a total of 1 changes.

8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a25_alu'.
Finding identical cells in module `\a25_barrel_shift'.
Finding identical cells in module `\a25_coprocessor'.
<suppressed ~18 debug messages>
Finding identical cells in module `\a25_dcache'.
<suppressed ~15 debug messages>
Finding identical cells in module `\a25_decode'.
<suppressed ~138 debug messages>
Finding identical cells in module `\a25_execute'.
Finding identical cells in module `\a25_fetch'.
Finding identical cells in module `\a25_icache'.
<suppressed ~21 debug messages>
Finding identical cells in module `\a25_mem'.
Finding identical cells in module `\a25_multiply'.
<suppressed ~12 debug messages>
Finding identical cells in module `\a25_register_bank'.
Finding identical cells in module `\a25_shifter_full'.
Finding identical cells in module `\a25_shifter_quick'.
Finding identical cells in module `\a25_wishbone'.
<suppressed ~3 debug messages>
Finding identical cells in module `\a25_wishbone_buf'.
<suppressed ~27 debug messages>
Finding identical cells in module `\a25_write_back'.
Finding identical cells in module `\arm_core'.
Finding identical cells in module `\single_port_ram_128_8'.
Finding identical cells in module `\single_port_ram_21_8'.
Removed a total of 78 cells.

8.13. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:262:slice$9377 ($sdffe) from module a25_dcache (D = $procmux$8660_Y, Q = \c_state).
Adding SRST signal on $auto$ff.cc:262:slice$9097 ($dffe) from module a25_decode (D = $3\status_bits_firq_mask_wen_nxt[0:0], Q = \o_status_bits_firq_mask_wen, rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9094 ($dffe) from module a25_decode (D = $3\status_bits_flags_wen_nxt[0:0], Q = \o_status_bits_flags_wen, rval = 1'1).
Adding SRST signal on $auto$ff.cc:262:slice$9087 ($dffe) from module a25_decode (D = $3\status_bits_sel_nxt[2:0] [1], Q = \o_status_bits_sel [1], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9087 ($dffe) from module a25_decode (D = { $2\status_bits_sel_nxt[2:0] [2] $2\status_bits_sel_nxt[2:0] [0] }, Q = { \o_status_bits_sel [2] \o_status_bits_sel [0] }, rval = 2'01).
Adding SRST signal on $auto$ff.cc:262:slice$9072 ($dffe) from module a25_decode (D = $3\multiply_function_nxt[1:0] [0], Q = \o_multiply_function [0], rval = 1'1).
Adding EN signal on $auto$ff.cc:262:slice$9072 ($dffe) from module a25_decode (D = \multiply_function_nxt [1], Q = \o_multiply_function [1]).
Adding SRST signal on $auto$ff.cc:262:slice$9071 ($dffe) from module a25_decode (D = { $2\alu_swap_sel_nxt[0:0] $2\alu_cout_sel_nxt[0:0] }, Q = { \o_alu_function [8] \o_alu_function [4] }, rval = 2'00).
Adding SRST signal on $auto$ff.cc:262:slice$9071 ($dffe) from module a25_decode (D = { $2\alu_not_sel_nxt[0:0] $2\alu_cin_sel_nxt[1:0] $2\alu_out_sel_nxt[3:0] }, Q = { \o_alu_function [7:5] \o_alu_function [3:0] }, rval = 7'0000000).
Adding SRST signal on $auto$ff.cc:262:slice$9068 ($dffe) from module a25_decode (D = $2\barrel_shift_function_nxt[1:0], Q = \o_barrel_shift_function, rval = 2'00).
Adding EN signal on $auto$ff.cc:262:slice$9031 ($dffe) from module a25_decode (D = 1'1, Q = \o_status_bits_firq_mask).
Adding EN signal on $auto$ff.cc:262:slice$9030 ($dffe) from module a25_decode (D = \status_bits_irq_mask_nxt, Q = \o_status_bits_irq_mask).
Adding SRST signal on $auto$ff.cc:262:slice$9179 ($dffe) from module a25_decode (D = $4\decode_iaccess_nxt[0:0], Q = \o_decode_iaccess, rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$9173 ($sdffce) from module a25_decode (D = \offset12_$mux_B_Y [1:0], Q = \o_imm32 [1:0], rval = 2'00).
Adding SRST signal on $auto$ff.cc:262:slice$9173 ($sdffce) from module a25_decode (D = \offset24_$mux_B_Y [31:7], Q = \o_imm32 [31:7], rval = 25'0000000000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$9156 ($dffe) from module a25_decode (D = \instruction_$logic_and_A_Y, Q = \restore_base_address).
Adding EN signal on $auto$ff.cc:262:slice$9106 ($dffe) from module a25_decode (D = \control_state_nxt, Q = \control_state).
Setting constant 1-bit at position 0 on $auto$ff.cc:262:slice$9491 ($dffe) from module a25_decode.
Adding SRST signal on $auto$ff.cc:262:slice$9452 ($dffe) from module a25_execute (D = \status_bits_mode_update_$mux_S_Y, Q = \status_bits_mode_rds_oh, rval = 4'0001).
Adding EN signal on $auto$ff.cc:262:slice$9450 ($dffe) from module a25_execute (D = \ldm_flags_$mux_S_Y [1:0], Q = \status_bits_flags [1:0]).
Adding SRST signal on $auto$ff.cc:262:slice$9449 ($dffe) from module a25_execute (D = \status_bits_mode, Q = \o_exec_load_rd [6:5], rval = 2'00).
Adding SRST signal on $auto$ff.cc:262:slice$9448 ($dffe) from module a25_execute (D = \i_byte_enable_sel_$eq_A_1_Y_$mux_S_Y, Q = \o_byte_enable, rval = 4'1111).
Adding SRST signal on $auto$ff.cc:262:slice$8926 ($dffe) from module a25_multiply (D = { $2\product_nxt[67:0] [67:33] $2\product_nxt[67:0] [0] }, Q = { \product [67:33] \product [0] }, rval = 36'000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$8926 ($dffe) from module a25_multiply (D = \product_nxt [32:1], Q = \product [32:1]).
Adding SRST signal on $auto$ff.cc:262:slice$9304 ($dffe) from module a25_wishbone (D = $procmux$8401_Y, Q = \o_wb_stb, rval = 1'1).

8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a25_alu..
Finding unused cells or wires in module \a25_barrel_shift..
Finding unused cells or wires in module \a25_coprocessor..
Finding unused cells or wires in module \a25_dcache..
Finding unused cells or wires in module \a25_decode..
Finding unused cells or wires in module \a25_execute..
Finding unused cells or wires in module \a25_fetch..
Finding unused cells or wires in module \a25_icache..
Finding unused cells or wires in module \a25_mem..
Finding unused cells or wires in module \a25_multiply..
Finding unused cells or wires in module \a25_register_bank..
Finding unused cells or wires in module \a25_shifter_full..
Finding unused cells or wires in module \a25_shifter_quick..
Finding unused cells or wires in module \a25_wishbone..
Finding unused cells or wires in module \a25_wishbone_buf..
Finding unused cells or wires in module \a25_write_back..
Finding unused cells or wires in module \arm_core..
Finding unused cells or wires in module \single_port_ram_128_8..
Finding unused cells or wires in module \single_port_ram_21_8..
Removed 24 unused cells and 110 unused wires.
<suppressed ~60 debug messages>

8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module a25_alu.
Optimizing module a25_barrel_shift.
Optimizing module a25_coprocessor.
Optimizing module a25_dcache.
Optimizing module a25_decode.
<suppressed ~2 debug messages>
Optimizing module a25_execute.
<suppressed ~1 debug messages>
Optimizing module a25_fetch.
Optimizing module a25_icache.
Optimizing module a25_mem.
Optimizing module a25_multiply.
<suppressed ~1 debug messages>
Optimizing module a25_register_bank.
Optimizing module a25_shifter_full.
Optimizing module a25_shifter_quick.
Optimizing module a25_wishbone.
Optimizing module a25_wishbone_buf.
Optimizing module a25_write_back.
Optimizing module arm_core.
Optimizing module single_port_ram_128_8.
Optimizing module single_port_ram_21_8.

8.16. Rerunning OPT passes. (Maybe there is more to do..)

8.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \a25_alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_barrel_shift..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_coprocessor..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_dcache..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_decode..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_execute..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_fetch..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_icache..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_multiply..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_register_bank..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_shifter_full..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_shifter_quick..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_wishbone..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_wishbone_buf..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_write_back..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \arm_core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \single_port_ram_128_8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \single_port_ram_21_8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~217 debug messages>

8.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \a25_alu.
  Optimizing cells in module \a25_barrel_shift.
  Optimizing cells in module \a25_coprocessor.
  Optimizing cells in module \a25_dcache.
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$9462: { $auto$opt_dff.cc:194:make_patterns_logic$9386 $auto$opt_dff.cc:194:make_patterns_logic$9384 $auto$opt_dff.cc:194:make_patterns_logic$9382 $auto$opt_dff.cc:194:make_patterns_logic$9378 $auto$opt_dff.cc:194:make_patterns_logic$9459 $auto$opt_dff.cc:194:make_patterns_logic$9380 }
  Optimizing cells in module \a25_dcache.
  Optimizing cells in module \a25_decode.
  Optimizing cells in module \a25_execute.
  Optimizing cells in module \a25_fetch.
  Optimizing cells in module \a25_icache.
  Optimizing cells in module \a25_mem.
  Optimizing cells in module \a25_multiply.
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$9545: { $auto$opt_dff.cc:194:make_patterns_logic$9542 $auto$rtlil.cc:2367:Not$8923 \i_execute }
  Optimizing cells in module \a25_multiply.
  Optimizing cells in module \a25_register_bank.
  Optimizing cells in module \a25_shifter_full.
  Optimizing cells in module \a25_shifter_quick.
  Optimizing cells in module \a25_wishbone.
  Optimizing cells in module \a25_wishbone_buf.
  Optimizing cells in module \a25_write_back.
  Optimizing cells in module \arm_core.
  Optimizing cells in module \single_port_ram_128_8.
  Optimizing cells in module \single_port_ram_21_8.
Performed a total of 2 changes.

8.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a25_alu'.
Finding identical cells in module `\a25_barrel_shift'.
Finding identical cells in module `\a25_coprocessor'.
Finding identical cells in module `\a25_dcache'.
Finding identical cells in module `\a25_decode'.
<suppressed ~12 debug messages>
Finding identical cells in module `\a25_execute'.
Finding identical cells in module `\a25_fetch'.
Finding identical cells in module `\a25_icache'.
Finding identical cells in module `\a25_mem'.
Finding identical cells in module `\a25_multiply'.
Finding identical cells in module `\a25_register_bank'.
Finding identical cells in module `\a25_shifter_full'.
Finding identical cells in module `\a25_shifter_quick'.
Finding identical cells in module `\a25_wishbone'.
<suppressed ~3 debug messages>
Finding identical cells in module `\a25_wishbone_buf'.
Finding identical cells in module `\a25_write_back'.
Finding identical cells in module `\arm_core'.
Finding identical cells in module `\single_port_ram_128_8'.
Finding identical cells in module `\single_port_ram_21_8'.
Removed a total of 5 cells.

8.20. Executing OPT_DFF pass (perform DFF optimizations).

8.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a25_alu..
Finding unused cells or wires in module \a25_barrel_shift..
Finding unused cells or wires in module \a25_coprocessor..
Finding unused cells or wires in module \a25_dcache..
Finding unused cells or wires in module \a25_decode..
Finding unused cells or wires in module \a25_execute..
Finding unused cells or wires in module \a25_fetch..
Finding unused cells or wires in module \a25_icache..
Finding unused cells or wires in module \a25_mem..
Finding unused cells or wires in module \a25_multiply..
Finding unused cells or wires in module \a25_register_bank..
Finding unused cells or wires in module \a25_shifter_full..
Finding unused cells or wires in module \a25_shifter_quick..
Finding unused cells or wires in module \a25_wishbone..
Finding unused cells or wires in module \a25_wishbone_buf..
Finding unused cells or wires in module \a25_write_back..
Finding unused cells or wires in module \arm_core..
Finding unused cells or wires in module \single_port_ram_128_8..
Finding unused cells or wires in module \single_port_ram_21_8..
Removed 1 unused cells and 6 unused wires.
<suppressed ~4 debug messages>

8.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module a25_alu.
Optimizing module a25_barrel_shift.
Optimizing module a25_coprocessor.
Optimizing module a25_dcache.
Optimizing module a25_decode.
Optimizing module a25_execute.
Optimizing module a25_fetch.
Optimizing module a25_icache.
Optimizing module a25_mem.
Optimizing module a25_multiply.
Optimizing module a25_register_bank.
Optimizing module a25_shifter_full.
Optimizing module a25_shifter_quick.
Optimizing module a25_wishbone.
Optimizing module a25_wishbone_buf.
Optimizing module a25_write_back.
Optimizing module arm_core.
Optimizing module single_port_ram_128_8.
Optimizing module single_port_ram_21_8.

8.23. Rerunning OPT passes. (Maybe there is more to do..)

8.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \a25_alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_barrel_shift..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_coprocessor..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_dcache..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_decode..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_execute..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_fetch..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_icache..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_multiply..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_register_bank..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_shifter_full..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_shifter_quick..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_wishbone..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_wishbone_buf..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_write_back..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \arm_core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \single_port_ram_128_8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \single_port_ram_21_8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~217 debug messages>

8.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \a25_alu.
  Optimizing cells in module \a25_barrel_shift.
  Optimizing cells in module \a25_coprocessor.
  Optimizing cells in module \a25_dcache.
  Optimizing cells in module \a25_decode.
  Optimizing cells in module \a25_execute.
  Optimizing cells in module \a25_fetch.
  Optimizing cells in module \a25_icache.
  Optimizing cells in module \a25_mem.
  Optimizing cells in module \a25_multiply.
  Optimizing cells in module \a25_register_bank.
  Optimizing cells in module \a25_shifter_full.
  Optimizing cells in module \a25_shifter_quick.
  Optimizing cells in module \a25_wishbone.
  Optimizing cells in module \a25_wishbone_buf.
  Optimizing cells in module \a25_write_back.
  Optimizing cells in module \arm_core.
  Optimizing cells in module \single_port_ram_128_8.
  Optimizing cells in module \single_port_ram_21_8.
Performed a total of 0 changes.

8.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a25_alu'.
Finding identical cells in module `\a25_barrel_shift'.
Finding identical cells in module `\a25_coprocessor'.
Finding identical cells in module `\a25_dcache'.
Finding identical cells in module `\a25_decode'.
Finding identical cells in module `\a25_execute'.
Finding identical cells in module `\a25_fetch'.
Finding identical cells in module `\a25_icache'.
Finding identical cells in module `\a25_mem'.
Finding identical cells in module `\a25_multiply'.
Finding identical cells in module `\a25_register_bank'.
Finding identical cells in module `\a25_shifter_full'.
Finding identical cells in module `\a25_shifter_quick'.
Finding identical cells in module `\a25_wishbone'.
Finding identical cells in module `\a25_wishbone_buf'.
Finding identical cells in module `\a25_write_back'.
Finding identical cells in module `\arm_core'.
Finding identical cells in module `\single_port_ram_128_8'.
Finding identical cells in module `\single_port_ram_21_8'.
Removed a total of 0 cells.

8.27. Executing OPT_DFF pass (perform DFF optimizations).

8.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a25_alu..
Finding unused cells or wires in module \a25_barrel_shift..
Finding unused cells or wires in module \a25_coprocessor..
Finding unused cells or wires in module \a25_dcache..
Finding unused cells or wires in module \a25_decode..
Finding unused cells or wires in module \a25_execute..
Finding unused cells or wires in module \a25_fetch..
Finding unused cells or wires in module \a25_icache..
Finding unused cells or wires in module \a25_mem..
Finding unused cells or wires in module \a25_multiply..
Finding unused cells or wires in module \a25_register_bank..
Finding unused cells or wires in module \a25_shifter_full..
Finding unused cells or wires in module \a25_shifter_quick..
Finding unused cells or wires in module \a25_wishbone..
Finding unused cells or wires in module \a25_wishbone_buf..
Finding unused cells or wires in module \a25_write_back..
Finding unused cells or wires in module \arm_core..
Finding unused cells or wires in module \single_port_ram_128_8..
Finding unused cells or wires in module \single_port_ram_21_8..

8.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module a25_alu.
Optimizing module a25_barrel_shift.
Optimizing module a25_coprocessor.
Optimizing module a25_dcache.
Optimizing module a25_decode.
Optimizing module a25_execute.
Optimizing module a25_fetch.
Optimizing module a25_icache.
Optimizing module a25_mem.
Optimizing module a25_multiply.
Optimizing module a25_register_bank.
Optimizing module a25_shifter_full.
Optimizing module a25_shifter_quick.
Optimizing module a25_wishbone.
Optimizing module a25_wishbone_buf.
Optimizing module a25_write_back.
Optimizing module arm_core.
Optimizing module single_port_ram_128_8.
Optimizing module single_port_ram_21_8.

8.30. Finished OPT passes. (There is nothing left to do.)

9. Executing FSM pass (extract and optimize FSM).

9.1. Executing FSM_DETECT pass (finding FSMs in design).

9.2. Executing FSM_EXTRACT pass (extracting FSM from design).

9.3. Executing FSM_OPT pass (simple optimizations of FSMs).

9.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a25_alu..
Finding unused cells or wires in module \a25_barrel_shift..
Finding unused cells or wires in module \a25_coprocessor..
Finding unused cells or wires in module \a25_dcache..
Finding unused cells or wires in module \a25_decode..
Finding unused cells or wires in module \a25_execute..
Finding unused cells or wires in module \a25_fetch..
Finding unused cells or wires in module \a25_icache..
Finding unused cells or wires in module \a25_mem..
Finding unused cells or wires in module \a25_multiply..
Finding unused cells or wires in module \a25_register_bank..
Finding unused cells or wires in module \a25_shifter_full..
Finding unused cells or wires in module \a25_shifter_quick..
Finding unused cells or wires in module \a25_wishbone..
Finding unused cells or wires in module \a25_wishbone_buf..
Finding unused cells or wires in module \a25_write_back..
Finding unused cells or wires in module \arm_core..
Finding unused cells or wires in module \single_port_ram_128_8..
Finding unused cells or wires in module \single_port_ram_21_8..

9.5. Executing FSM_OPT pass (simple optimizations of FSMs).

9.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

9.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

9.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

10. Executing OPT pass (performing simple optimizations).

10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module a25_alu.
Optimizing module a25_barrel_shift.
Optimizing module a25_coprocessor.
Optimizing module a25_dcache.
Optimizing module a25_decode.
Optimizing module a25_execute.
Optimizing module a25_fetch.
Optimizing module a25_icache.
Optimizing module a25_mem.
Optimizing module a25_multiply.
Optimizing module a25_register_bank.
Optimizing module a25_shifter_full.
Optimizing module a25_shifter_quick.
Optimizing module a25_wishbone.
Optimizing module a25_wishbone_buf.
Optimizing module a25_write_back.
Optimizing module arm_core.
Optimizing module single_port_ram_128_8.
Optimizing module single_port_ram_21_8.

10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a25_alu'.
Finding identical cells in module `\a25_barrel_shift'.
Finding identical cells in module `\a25_coprocessor'.
Finding identical cells in module `\a25_dcache'.
Finding identical cells in module `\a25_decode'.
Finding identical cells in module `\a25_execute'.
Finding identical cells in module `\a25_fetch'.
Finding identical cells in module `\a25_icache'.
Finding identical cells in module `\a25_mem'.
Finding identical cells in module `\a25_multiply'.
Finding identical cells in module `\a25_register_bank'.
Finding identical cells in module `\a25_shifter_full'.
Finding identical cells in module `\a25_shifter_quick'.
Finding identical cells in module `\a25_wishbone'.
Finding identical cells in module `\a25_wishbone_buf'.
Finding identical cells in module `\a25_write_back'.
Finding identical cells in module `\arm_core'.
Finding identical cells in module `\single_port_ram_128_8'.
Finding identical cells in module `\single_port_ram_21_8'.
Removed a total of 0 cells.

10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \a25_alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_barrel_shift..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_coprocessor..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_dcache..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_decode..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_execute..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_fetch..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_icache..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_multiply..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_register_bank..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_shifter_full..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_shifter_quick..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_wishbone..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_wishbone_buf..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_write_back..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \arm_core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \single_port_ram_128_8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \single_port_ram_21_8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~217 debug messages>

10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \a25_alu.
  Optimizing cells in module \a25_barrel_shift.
  Optimizing cells in module \a25_coprocessor.
  Optimizing cells in module \a25_dcache.
  Optimizing cells in module \a25_decode.
  Optimizing cells in module \a25_execute.
  Optimizing cells in module \a25_fetch.
  Optimizing cells in module \a25_icache.
  Optimizing cells in module \a25_mem.
  Optimizing cells in module \a25_multiply.
  Optimizing cells in module \a25_register_bank.
  Optimizing cells in module \a25_shifter_full.
  Optimizing cells in module \a25_shifter_quick.
  Optimizing cells in module \a25_wishbone.
  Optimizing cells in module \a25_wishbone_buf.
  Optimizing cells in module \a25_write_back.
  Optimizing cells in module \arm_core.
  Optimizing cells in module \single_port_ram_128_8.
  Optimizing cells in module \single_port_ram_21_8.
Performed a total of 0 changes.

10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a25_alu'.
Finding identical cells in module `\a25_barrel_shift'.
Finding identical cells in module `\a25_coprocessor'.
Finding identical cells in module `\a25_dcache'.
Finding identical cells in module `\a25_decode'.
Finding identical cells in module `\a25_execute'.
Finding identical cells in module `\a25_fetch'.
Finding identical cells in module `\a25_icache'.
Finding identical cells in module `\a25_mem'.
Finding identical cells in module `\a25_multiply'.
Finding identical cells in module `\a25_register_bank'.
Finding identical cells in module `\a25_shifter_full'.
Finding identical cells in module `\a25_shifter_quick'.
Finding identical cells in module `\a25_wishbone'.
Finding identical cells in module `\a25_wishbone_buf'.
Finding identical cells in module `\a25_write_back'.
Finding identical cells in module `\arm_core'.
Finding identical cells in module `\single_port_ram_128_8'.
Finding identical cells in module `\single_port_ram_21_8'.
Removed a total of 0 cells.

10.6. Executing OPT_DFF pass (perform DFF optimizations).

10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a25_alu..
Finding unused cells or wires in module \a25_barrel_shift..
Finding unused cells or wires in module \a25_coprocessor..
Finding unused cells or wires in module \a25_dcache..
Finding unused cells or wires in module \a25_decode..
Finding unused cells or wires in module \a25_execute..
Finding unused cells or wires in module \a25_fetch..
Finding unused cells or wires in module \a25_icache..
Finding unused cells or wires in module \a25_mem..
Finding unused cells or wires in module \a25_multiply..
Finding unused cells or wires in module \a25_register_bank..
Finding unused cells or wires in module \a25_shifter_full..
Finding unused cells or wires in module \a25_shifter_quick..
Finding unused cells or wires in module \a25_wishbone..
Finding unused cells or wires in module \a25_wishbone_buf..
Finding unused cells or wires in module \a25_write_back..
Finding unused cells or wires in module \arm_core..
Finding unused cells or wires in module \single_port_ram_128_8..
Finding unused cells or wires in module \single_port_ram_21_8..

10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module a25_alu.
Optimizing module a25_barrel_shift.
Optimizing module a25_coprocessor.
Optimizing module a25_dcache.
Optimizing module a25_decode.
Optimizing module a25_execute.
Optimizing module a25_fetch.
Optimizing module a25_icache.
Optimizing module a25_mem.
Optimizing module a25_multiply.
Optimizing module a25_register_bank.
Optimizing module a25_shifter_full.
Optimizing module a25_shifter_quick.
Optimizing module a25_wishbone.
Optimizing module a25_wishbone_buf.
Optimizing module a25_write_back.
Optimizing module arm_core.
Optimizing module single_port_ram_128_8.
Optimizing module single_port_ram_21_8.

10.9. Finished OPT passes. (There is nothing left to do.)

11. Executing MEMORY_COLLECT pass (generating $mem cells).

12. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `\RAM'[0] in module `\single_port_ram_128_8': merging output FF to cell.
    Write port 0: non-transparent.
Checking read port `\RAM'[0] in module `\single_port_ram_21_8': merging output FF to cell.
    Write port 0: non-transparent.

13. Executing OPT pass (performing simple optimizations).

13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module a25_alu.
Optimizing module a25_barrel_shift.
Optimizing module a25_coprocessor.
Optimizing module a25_dcache.
Optimizing module a25_decode.
Optimizing module a25_execute.
Optimizing module a25_fetch.
Optimizing module a25_icache.
Optimizing module a25_mem.
Optimizing module a25_multiply.
Optimizing module a25_register_bank.
Optimizing module a25_shifter_full.
Optimizing module a25_shifter_quick.
Optimizing module a25_wishbone.
Optimizing module a25_wishbone_buf.
Optimizing module a25_write_back.
Optimizing module arm_core.
Optimizing module single_port_ram_128_8.
Optimizing module single_port_ram_21_8.

13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a25_alu'.
Finding identical cells in module `\a25_barrel_shift'.
Finding identical cells in module `\a25_coprocessor'.
Finding identical cells in module `\a25_dcache'.
Finding identical cells in module `\a25_decode'.
Finding identical cells in module `\a25_execute'.
Finding identical cells in module `\a25_fetch'.
Finding identical cells in module `\a25_icache'.
Finding identical cells in module `\a25_mem'.
Finding identical cells in module `\a25_multiply'.
Finding identical cells in module `\a25_register_bank'.
Finding identical cells in module `\a25_shifter_full'.
Finding identical cells in module `\a25_shifter_quick'.
Finding identical cells in module `\a25_wishbone'.
Finding identical cells in module `\a25_wishbone_buf'.
Finding identical cells in module `\a25_write_back'.
Finding identical cells in module `\arm_core'.
Finding identical cells in module `\single_port_ram_128_8'.
Finding identical cells in module `\single_port_ram_21_8'.
Removed a total of 0 cells.

13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \a25_alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_barrel_shift..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_coprocessor..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_dcache..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_decode..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_execute..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_fetch..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_icache..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_multiply..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_register_bank..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_shifter_full..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_shifter_quick..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_wishbone..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_wishbone_buf..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_write_back..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \arm_core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \single_port_ram_128_8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \single_port_ram_21_8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~217 debug messages>

13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \a25_alu.
  Optimizing cells in module \a25_barrel_shift.
  Optimizing cells in module \a25_coprocessor.
  Optimizing cells in module \a25_dcache.
  Optimizing cells in module \a25_decode.
  Optimizing cells in module \a25_execute.
  Optimizing cells in module \a25_fetch.
  Optimizing cells in module \a25_icache.
  Optimizing cells in module \a25_mem.
  Optimizing cells in module \a25_multiply.
  Optimizing cells in module \a25_register_bank.
  Optimizing cells in module \a25_shifter_full.
  Optimizing cells in module \a25_shifter_quick.
  Optimizing cells in module \a25_wishbone.
  Optimizing cells in module \a25_wishbone_buf.
  Optimizing cells in module \a25_write_back.
  Optimizing cells in module \arm_core.
  Optimizing cells in module \single_port_ram_128_8.
  Optimizing cells in module \single_port_ram_21_8.
Performed a total of 0 changes.

13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a25_alu'.
Finding identical cells in module `\a25_barrel_shift'.
Finding identical cells in module `\a25_coprocessor'.
Finding identical cells in module `\a25_dcache'.
Finding identical cells in module `\a25_decode'.
Finding identical cells in module `\a25_execute'.
Finding identical cells in module `\a25_fetch'.
Finding identical cells in module `\a25_icache'.
Finding identical cells in module `\a25_mem'.
Finding identical cells in module `\a25_multiply'.
Finding identical cells in module `\a25_register_bank'.
Finding identical cells in module `\a25_shifter_full'.
Finding identical cells in module `\a25_shifter_quick'.
Finding identical cells in module `\a25_wishbone'.
Finding identical cells in module `\a25_wishbone_buf'.
Finding identical cells in module `\a25_write_back'.
Finding identical cells in module `\arm_core'.
Finding identical cells in module `\single_port_ram_128_8'.
Finding identical cells in module `\single_port_ram_21_8'.
Removed a total of 0 cells.

13.6. Executing OPT_DFF pass (perform DFF optimizations).

13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a25_alu..
Finding unused cells or wires in module \a25_barrel_shift..
Finding unused cells or wires in module \a25_coprocessor..
Finding unused cells or wires in module \a25_dcache..
Finding unused cells or wires in module \a25_decode..
Finding unused cells or wires in module \a25_execute..
Finding unused cells or wires in module \a25_fetch..
Finding unused cells or wires in module \a25_icache..
Finding unused cells or wires in module \a25_mem..
Finding unused cells or wires in module \a25_multiply..
Finding unused cells or wires in module \a25_register_bank..
Finding unused cells or wires in module \a25_shifter_full..
Finding unused cells or wires in module \a25_shifter_quick..
Finding unused cells or wires in module \a25_wishbone..
Finding unused cells or wires in module \a25_wishbone_buf..
Finding unused cells or wires in module \a25_write_back..
Finding unused cells or wires in module \arm_core..
Finding unused cells or wires in module \single_port_ram_128_8..
Finding unused cells or wires in module \single_port_ram_21_8..
Removed 2 unused cells and 151 unused wires.
<suppressed ~6 debug messages>

13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module a25_alu.
Optimizing module a25_barrel_shift.
Optimizing module a25_coprocessor.
Optimizing module a25_dcache.
Optimizing module a25_decode.
Optimizing module a25_execute.
Optimizing module a25_fetch.
Optimizing module a25_icache.
Optimizing module a25_mem.
Optimizing module a25_multiply.
Optimizing module a25_register_bank.
Optimizing module a25_shifter_full.
Optimizing module a25_shifter_quick.
Optimizing module a25_wishbone.
Optimizing module a25_wishbone_buf.
Optimizing module a25_write_back.
Optimizing module arm_core.
Optimizing module single_port_ram_128_8.
Optimizing module single_port_ram_21_8.

13.9. Rerunning OPT passes. (Maybe there is more to do..)

13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \a25_alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_barrel_shift..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_coprocessor..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_dcache..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_decode..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_execute..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_fetch..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_icache..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_multiply..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_register_bank..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_shifter_full..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_shifter_quick..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_wishbone..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_wishbone_buf..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_write_back..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \arm_core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \single_port_ram_128_8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \single_port_ram_21_8..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~217 debug messages>

13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \a25_alu.
  Optimizing cells in module \a25_barrel_shift.
  Optimizing cells in module \a25_coprocessor.
  Optimizing cells in module \a25_dcache.
  Optimizing cells in module \a25_decode.
  Optimizing cells in module \a25_execute.
  Optimizing cells in module \a25_fetch.
  Optimizing cells in module \a25_icache.
  Optimizing cells in module \a25_mem.
  Optimizing cells in module \a25_multiply.
  Optimizing cells in module \a25_register_bank.
  Optimizing cells in module \a25_shifter_full.
  Optimizing cells in module \a25_shifter_quick.
  Optimizing cells in module \a25_wishbone.
  Optimizing cells in module \a25_wishbone_buf.
  Optimizing cells in module \a25_write_back.
  Optimizing cells in module \arm_core.
  Optimizing cells in module \single_port_ram_128_8.
  Optimizing cells in module \single_port_ram_21_8.
Performed a total of 0 changes.

13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a25_alu'.
Finding identical cells in module `\a25_barrel_shift'.
Finding identical cells in module `\a25_coprocessor'.
Finding identical cells in module `\a25_dcache'.
Finding identical cells in module `\a25_decode'.
Finding identical cells in module `\a25_execute'.
Finding identical cells in module `\a25_fetch'.
Finding identical cells in module `\a25_icache'.
Finding identical cells in module `\a25_mem'.
Finding identical cells in module `\a25_multiply'.
Finding identical cells in module `\a25_register_bank'.
Finding identical cells in module `\a25_shifter_full'.
Finding identical cells in module `\a25_shifter_quick'.
Finding identical cells in module `\a25_wishbone'.
Finding identical cells in module `\a25_wishbone_buf'.
Finding identical cells in module `\a25_write_back'.
Finding identical cells in module `\arm_core'.
Finding identical cells in module `\single_port_ram_128_8'.
Finding identical cells in module `\single_port_ram_21_8'.
Removed a total of 0 cells.

13.13. Executing OPT_DFF pass (perform DFF optimizations).

13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a25_alu..
Finding unused cells or wires in module \a25_barrel_shift..
Finding unused cells or wires in module \a25_coprocessor..
Finding unused cells or wires in module \a25_dcache..
Finding unused cells or wires in module \a25_decode..
Finding unused cells or wires in module \a25_execute..
Finding unused cells or wires in module \a25_fetch..
Finding unused cells or wires in module \a25_icache..
Finding unused cells or wires in module \a25_mem..
Finding unused cells or wires in module \a25_multiply..
Finding unused cells or wires in module \a25_register_bank..
Finding unused cells or wires in module \a25_shifter_full..
Finding unused cells or wires in module \a25_shifter_quick..
Finding unused cells or wires in module \a25_wishbone..
Finding unused cells or wires in module \a25_wishbone_buf..
Finding unused cells or wires in module \a25_write_back..
Finding unused cells or wires in module \arm_core..
Finding unused cells or wires in module \single_port_ram_128_8..
Finding unused cells or wires in module \single_port_ram_21_8..

13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module a25_alu.
Optimizing module a25_barrel_shift.
Optimizing module a25_coprocessor.
Optimizing module a25_dcache.
Optimizing module a25_decode.
Optimizing module a25_execute.
Optimizing module a25_fetch.
Optimizing module a25_icache.
Optimizing module a25_mem.
Optimizing module a25_multiply.
Optimizing module a25_register_bank.
Optimizing module a25_shifter_full.
Optimizing module a25_shifter_quick.
Optimizing module a25_wishbone.
Optimizing module a25_wishbone_buf.
Optimizing module a25_write_back.
Optimizing module arm_core.
Optimizing module single_port_ram_128_8.
Optimizing module single_port_ram_21_8.

13.16. Finished OPT passes. (There is nothing left to do.)

14. Executing CHECK pass (checking for obvious problems).
Checking module a25_alu...
Checking module a25_barrel_shift...
Checking module a25_coprocessor...
Checking module a25_dcache...
Checking module a25_decode...
Checking module a25_execute...
Checking module a25_fetch...
Checking module a25_icache...
Checking module a25_mem...
Checking module a25_multiply...
Checking module a25_register_bank...
Checking module a25_shifter_full...
Checking module a25_shifter_quick...
Checking module a25_wishbone...
Checking module a25_wishbone_buf...
Checking module a25_write_back...
Checking module arm_core...
Checking module single_port_ram_128_8...
Checking module single_port_ram_21_8...
Found and reported 0 problems.

15. Executing TECHMAP pass (map to technology primitives).

15.1. Executing Verilog-2005 frontend: libs/ODIN_II/techlib/adff2dff.v
Parsing Verilog input from `libs/ODIN_II/techlib/adff2dff.v' to AST representation.
Generating RTLIL representation for module `\adff2dff'.
Successfully finished Verilog frontend.

15.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

16. Executing TECHMAP pass (map to technology primitives).

16.1. Executing Verilog-2005 frontend: libs/ODIN_II/techlib/adffe2dff.v
Parsing Verilog input from `libs/ODIN_II/techlib/adffe2dff.v' to AST representation.
Generating RTLIL representation for module `\adffe2dff'.
Successfully finished Verilog frontend.

16.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

17. Executing TECHMAP pass (map to technology primitives).

17.1. Executing Verilog-2005 frontend: /home/casa/Desktop/poname/yosys/share/techmap.v
Parsing Verilog input from `/home/casa/Desktop/poname/yosys/share/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

17.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

18. Executing FLATTEN pass (flatten design).
Deleting now unused module a25_alu.
Deleting now unused module a25_barrel_shift.
Deleting now unused module a25_coprocessor.
Deleting now unused module a25_dcache.
Deleting now unused module a25_decode.
Deleting now unused module a25_execute.
Deleting now unused module a25_fetch.
Deleting now unused module a25_icache.
Deleting now unused module a25_mem.
Deleting now unused module a25_multiply.
Deleting now unused module a25_register_bank.
Deleting now unused module a25_shifter_full.
Deleting now unused module a25_shifter_quick.
Deleting now unused module a25_wishbone.
Deleting now unused module a25_wishbone_buf.
Deleting now unused module a25_write_back.
Deleting now unused module single_port_ram_128_8.
Deleting now unused module single_port_ram_21_8.
<suppressed ~34 debug messages>

19. Executing PMUXTREE pass.

20. Executing WREDUCE pass (reducing word size of cells).
Removed cell arm_core.$auto$pmuxtree.cc:101:execute$9786 ($not).
Removed top 1 bits (of 32) from mux cell arm_core.$auto$pmuxtree.cc:65:recursive_mux_generator$9798 ($mux).
Removed cell arm_core.$flatten\u_fetch.\u_cache.\u_tag2.$procmux$8331 ($mux).
Removed top 2 bits (of 5) from port B of cell arm_core.u_fetch.i_cacheable_area_$mux_B_25_S_$eq_Y ($eq).
Removed cell arm_core.$flatten\u_fetch.\u_cache.\u_tag2.$procmux$8328 ($mux).
Removed cell arm_core.$flatten\u_fetch.\u_cache.\u_tag1.$procmux$8328 ($mux).
Removed cell arm_core.$flatten\u_fetch.\u_cache.\u_tag1.$procmux$8331 ($mux).
Removed cell arm_core.$flatten\u_fetch.\u_cache.\u_tag0.$procmux$8328 ($mux).
Removed cell arm_core.$flatten\u_fetch.\u_cache.\u_tag0.$procmux$8331 ($mux).
Removed top 1 bits (of 5) from port B of cell arm_core.u_fetch.i_cacheable_area_$mux_B_17_S_$eq_Y ($eq).
Removed cell arm_core.$flatten\u_fetch.\u_cache.\u_data1.$procmux$8316 ($mux).
Removed cell arm_core.$flatten\u_fetch.\u_cache.\u_data1.$procmux$8319 ($mux).
Removed top 2 bits (of 4) from mux cell arm_core.$flatten\u_fetch.\u_cache.$procmux$8270 ($mux).
Removed top 1 bits (of 5) from port B of cell arm_core.u_fetch.i_cacheable_area_$mux_B_15_S_$eq_Y ($eq).
Removed top 2 bits (of 5) from port B of cell arm_core.u_fetch.i_cacheable_area_$mux_B_23_S_$eq_Y ($eq).
Removed top 1 bits (of 5) from port B of cell arm_core.u_fetch.i_cacheable_area_$mux_B_20_S_$eq_Y ($eq).
Removed cell arm_core.$flatten\u_fetch.\u_cache.\u_data0.$procmux$8319 ($mux).
Removed top 2 bits (of 5) from port B of cell arm_core.u_fetch.i_cacheable_area_$mux_B_26_S_$eq_Y ($eq).
Removed top 1 bits (of 5) from port B of cell arm_core.u_fetch.i_cacheable_area_$mux_B_19_S_$eq_Y ($eq).
Removed top 2 bits (of 5) from port B of cell arm_core.u_fetch.i_cacheable_area_$mux_B_24_S_$eq_Y ($eq).
Removed top 3 bits (of 5) from port B of cell arm_core.u_fetch.i_cacheable_area_$mux_B_27_S_$eq_Y ($eq).
Removed top 3 bits (of 5) from port B of cell arm_core.u_fetch.i_cacheable_area_$mux_B_28_S_$eq_Y ($eq).
Removed cell arm_core.$flatten\u_fetch.\u_cache.$procmux$8292 ($mux).
Removed top 4 bits (of 32) from port B of cell arm_core.u_fetch.i_cacheable_area_$mux_B_30_Y_$logic_and_B_A_$logic_or_Y_B_$logic_and_Y_A_$logic_and_Y_B_$lt_Y ($lt).
Removed top 1 bits (of 5) from port B of cell arm_core.u_fetch.i_cacheable_area_$mux_B_16_S_$eq_Y ($eq).
Removed cell arm_core.$flatten\u_fetch.\u_cache.\u_data0.$procmux$8316 ($mux).
Removed cell arm_core.$flatten\u_wishbone.$procmux$8445 ($mux).
Removed top 31 bits (of 32) from port B of cell arm_core.u_fetch.i_cacheable_area_$mux_B_30_Y_$logic_and_B_A_$logic_or_Y_B_$logic_and_Y_B_$logic_not_Y_A_$logic_or_Y_A_$logic_and_Y_A_$ge_Y ($ge).
Removed top 17 bits (of 32) from port B of cell arm_core.u_fetch.i_cacheable_area_$mux_B_30_Y_$logic_and_B_A_$logic_or_Y_B_$logic_and_Y_B_$logic_not_Y_A_$logic_or_Y_A_$logic_and_Y_B_$lt_Y ($lt).
Removed top 2 bits (of 18) from port B of cell arm_core.u_fetch.i_cacheable_area_$mux_B_30_Y_$logic_and_B_A_$logic_or_Y_B_$logic_and_Y_B_$logic_not_Y_A_$logic_or_Y_B_$eq_Y ($eq).
Removed top 1 bits (of 2) from port B of cell arm_core.u_fetch.i_iaddress_$eq_A_4 ($eq).
Removed top 1 bits (of 3) from mux cell arm_core.$flatten\u_wishbone.$procmux$8393 ($mux).
Removed top 2 bits (of 3) from port B of cell arm_core.u_fetch.u_cache.valid_bits_r_$eq_A_3_Y_$mux_S_A_$mux_Y_A_$mux_Y_S_$eq_Y ($eq).
Removed cell arm_core.$flatten\u_wishbone.\u_wishbone_buf_p2.$auto$ff.cc:262:slice$9328 ($dffe).
Removed cell arm_core.$flatten\u_wishbone.\u_wishbone_buf_p2.$auto$ff.cc:262:slice$9342 ($dffe).
Removed cell arm_core.$flatten\u_wishbone.\u_wishbone_buf_p2.$auto$ff.cc:262:slice$9353 ($dffe).
Removed cell arm_core.$flatten\u_wishbone.\u_wishbone_buf_p2.$auto$ff.cc:262:slice$9358 ($dffe).
Removed cell arm_core.$flatten\u_fetch.\u_cache.\u_data2.$procmux$8319 ($mux).
Removed cell arm_core.$flatten\u_fetch.\u_cache.$procmux$8279 ($mux).
Removed cell arm_core.$flatten\u_fetch.\u_cache.$procmux$8282 ($mux).
Removed top 1 bits (of 5) from port B of cell arm_core.u_fetch.i_cacheable_area_$mux_B_21_S_$eq_Y ($eq).
Removed cell arm_core.$flatten\u_wishbone.\u_wishbone_buf_p2.$procmux$8533 ($mux).
Removed top 4 bits (of 5) from port B of cell arm_core.u_fetch.i_cacheable_area_$mux_B_29_S_$eq_Y ($eq).
Removed cell arm_core.$flatten\u_fetch.\u_cache.$procmux$8286 ($mux).
Removed top 3 bits (of 4) from port B of cell arm_core.$flatten\u_fetch.\u_cache.$procmux$8284_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.$flatten\u_fetch.\u_cache.$procmux$8278_CMP0 ($eq).
Removed top 1 bits (of 2) from port B of cell arm_core.u_wishbone.u_wishbone_buf_p2.i_accepted_$logic_not_A_Y_$logic_and_B_Y_$logic_or_B_A_$eq_Y ($eq).
Removed top 1 bits (of 5) from port B of cell arm_core.u_fetch.i_cacheable_area_$mux_B_18_S_$eq_Y ($eq).
Removed cell arm_core.u_wishbone.u_wishbone_buf_p2.wbuf_rp_r_$eq_A_Y_$mux_S ($mux).
Removed cell arm_core.$flatten\u_fetch.\u_cache.\u_data3.$procmux$8319 ($mux).
Removed cell arm_core.u_wishbone.u_wishbone_buf_p2.wbuf_used_r_$ne_A_Y_$mux_S ($mux).
Removed cell arm_core.u_wishbone.u_wishbone_buf_p2.wbuf_write_r_$mux_B ($mux).
Removed cell arm_core.u_wishbone.u_wishbone_buf_p2.wbuf_write_r_$mux_B_Y_$mux_B ($mux).
Removed cell arm_core.$flatten\u_fetch.\u_cache.\u_data2.$procmux$8316 ($mux).
Removed top 23 bits (of 32) from port B of cell arm_core.u_fetch.u_cache.init_count_$lt_A ($lt).
Removed cell arm_core.$flatten\u_fetch.\u_cache.\u_data3.$procmux$8316 ($mux).
Removed top 2 bits (of 4) from mux cell arm_core.u_fetch.u_cache.valid_bits_r_$eq_A_1_Y_$mux_S ($mux).
Removed top 1 bits (of 4) from port B of cell arm_core.$flatten\u_fetch.\u_cache.$procmux$8281_CMP0 ($eq).
Removed cell arm_core.$flatten\u_fetch.\u_cache.$procmux$8232 ($mux).
Removed cell arm_core.$flatten\u_wishbone.\u_wishbone_buf_p1.$procmux$8533 ($mux).
Removed top 1 bits (of 2) from port B of cell arm_core.u_wishbone.u_wishbone_buf_p1.i_accepted_$logic_not_A_Y_$logic_and_B_Y_$logic_or_B_A_$eq_Y ($eq).
Removed top 2 bits (of 4) from mux cell arm_core.u_fetch.u_cache.valid_bits_r_$eq_A_3_Y_$mux_S_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y ($mux).
Removed cell arm_core.$flatten\u_wishbone.\u_wishbone_buf_p0.$procmux$8533 ($mux).
Removed cell arm_core.$flatten\u_fetch.\u_cache.\u_tag3.$procmux$8331 ($mux).
Removed top 1 bits (of 2) from port B of cell arm_core.u_wishbone.u_wishbone_buf_p0.i_accepted_$logic_not_A_Y_$logic_and_B_Y_$logic_or_B_A_$eq_Y ($eq).
Removed top 1 bits (of 5) from port B of cell arm_core.u_fetch.i_cacheable_area_$mux_B_22_S_$eq_Y ($eq).
Removed cell arm_core.$auto$pmuxtree.cc:101:execute$9810 ($not).
Removed cell arm_core.$auto$pmuxtree.cc:101:execute$9858 ($not).
Removed cell arm_core.$auto$pmuxtree.cc:101:execute$9906 ($not).
Removed top 14 bits (of 15) from mux cell arm_core.$auto$pmuxtree.cc:65:recursive_mux_generator$9938 ($mux).
Removed top 12 bits (of 15) from mux cell arm_core.$auto$pmuxtree.cc:65:recursive_mux_generator$9936 ($mux).
Removed top 2 bits (of 15) from mux cell arm_core.$auto$pmuxtree.cc:65:recursive_mux_generator$9910 ($mux).
Removed cell arm_core.$flatten\u_fetch.\u_cache.\u_tag3.$procmux$8328 ($mux).
Removed top 1 bits (of 3) from port B of cell arm_core.u_fetch.u_cache.valid_bits_r_$eq_A_3_Y_$mux_S_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_S_$eq_Y ($eq).
Removed top 1 bits (of 3) from port B of cell arm_core.u_fetch.u_cache.valid_bits_r_$eq_A_3_Y_$mux_S_A_$mux_Y_A_$mux_Y_A_$mux_Y_S_$eq_Y ($eq).
Removed top 2 bits (of 3) from port B of cell arm_core.u_mem.u_dcache.valid_bits_r_$eq_A_3_Y_$mux_S_A_$mux_Y_A_$mux_Y_S_$eq_Y ($eq).
Removed top 1 bits (of 3) from port B of cell arm_core.u_mem.u_dcache.valid_bits_r_$eq_A_3_Y_$mux_S_A_$mux_Y_A_$mux_Y_A_$mux_Y_S_$eq_Y ($eq).
Removed top 1 bits (of 3) from port B of cell arm_core.u_mem.u_dcache.valid_bits_r_$eq_A_3_Y_$mux_S_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_S_$eq_Y ($eq).
Removed top 2 bits (of 4) from mux cell arm_core.u_mem.u_dcache.valid_bits_r_$eq_A_3_Y_$mux_S_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y ($mux).
Removed top 2 bits (of 4) from mux cell arm_core.u_mem.u_dcache.valid_bits_r_$eq_A_3_Y_$mux_S_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y ($mux).
Removed top 23 bits (of 32) from port B of cell arm_core.u_mem.u_dcache.init_count_$lt_A ($lt).
Removed top 1 bits (of 4) from port B of cell arm_core.u_mem.u_dcache.i_byte_enable_$eq_A_8 ($eq).
Removed top 2 bits (of 4) from port B of cell arm_core.u_mem.u_dcache.i_byte_enable_$eq_A_7 ($eq).
Removed top 3 bits (of 4) from port B of cell arm_core.u_mem.u_dcache.i_byte_enable_$eq_A_6 ($eq).
Removed top 16 bits (of 32) from mux cell arm_core.u_mem.u_dcache.i_byte_enable_$eq_A_5_Y_$mux_S ($mux).
Removed top 16 bits (of 32) from mux cell arm_core.u_mem.u_dcache.i_byte_enable_$eq_A_11_Y_$mux_S ($mux).
Removed top 2 bits (of 4) from port B of cell arm_core.u_mem.u_dcache.i_byte_enable_$eq_A_10 ($eq).
Removed top 1 bits (of 2) from port B of cell arm_core.u_mem.u_dcache.i_address_$eq_A_10 ($eq).
Removed top 3 bits (of 4) from port B of cell arm_core.u_mem.u_dcache.exclusive_access_$logic_and_A_1_Y_$logic_and_A_B_$ne_Y ($ne).
Removed cell arm_core.$flatten\u_mem.\u_dcache.$procmux$8690 ($mux).
Removed top 3 bits (of 4) from port B of cell arm_core.$flatten\u_mem.\u_dcache.$procmux$8688_CMP0 ($eq).
Removed top 2 bits (of 4) from mux cell arm_core.$flatten\u_mem.\u_dcache.$procmux$8678 ($mux).
Removed cell arm_core.$flatten\u_mem.\u_dcache.$procmux$8674 ($mux).
Removed top 2 bits (of 4) from port B of cell arm_core.$flatten\u_mem.\u_dcache.$procmux$8673_CMP0 ($eq).
Removed cell arm_core.$flatten\u_mem.\u_dcache.$procmux$8671 ($mux).
Removed top 2 bits (of 4) from port B of cell arm_core.$flatten\u_mem.\u_dcache.$procmux$8670_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.$flatten\u_mem.\u_dcache.$procmux$8669_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.$flatten\u_mem.\u_dcache.$procmux$8667_CMP0 ($eq).
Removed cell arm_core.$flatten\u_mem.\u_dcache.$procmux$8665 ($mux).
Removed top 1 bits (of 4) from port B of cell arm_core.$flatten\u_mem.\u_dcache.$procmux$8664_CMP0 ($eq).
Removed cell arm_core.$flatten\u_mem.\u_dcache.$procmux$8662 ($mux).
Removed top 1 bits (of 4) from port B of cell arm_core.$flatten\u_mem.\u_dcache.$procmux$8661_CMP0 ($eq).
Removed top 2 bits (of 4) from mux cell arm_core.$flatten\u_mem.\u_dcache.$procmux$8652 ($mux).
Removed cell arm_core.$flatten\u_mem.\u_dcache.$procmux$8639 ($mux).
Removed cell arm_core.$flatten\u_mem.\u_dcache.$procmux$8636 ($mux).
Removed top 1 bits (of 4) from mux cell arm_core.$auto$pmuxtree.cc:65:recursive_mux_generator$9974 ($mux).
Removed cell arm_core.$flatten\u_mem.\u_dcache.$procmux$8608 ($mux).
Removed top 1 bits (of 4) from mux cell arm_core.$auto$pmuxtree.cc:65:recursive_mux_generator$9966 ($mux).
Removed cell arm_core.$flatten\u_mem.\u_dcache.$procmux$8603 ($mux).
Removed cell arm_core.$flatten\u_mem.\u_dcache.$procmux$8571 ($mux).
Removed cell arm_core.$flatten\u_mem.\u_dcache.$procmux$8557 ($mux).
Removed top 1 bits (of 2) from port B of cell arm_core.$flatten\u_mem.\u_dcache.$auto$opt_dff.cc:195:make_patterns_logic$9397 ($ne).
Removed cell arm_core.$flatten\u_mem.\u_dcache.\u_tag3.$procmux$8328 ($mux).
Removed cell arm_core.$flatten\u_mem.\u_dcache.\u_tag3.$procmux$8331 ($mux).
Removed cell arm_core.$flatten\u_mem.\u_dcache.\u_tag2.$procmux$8328 ($mux).
Removed cell arm_core.$flatten\u_mem.\u_dcache.\u_tag2.$procmux$8331 ($mux).
Removed cell arm_core.$flatten\u_mem.\u_dcache.\u_tag1.$procmux$8328 ($mux).
Removed cell arm_core.$flatten\u_mem.\u_dcache.\u_tag1.$procmux$8331 ($mux).
Removed cell arm_core.$flatten\u_mem.\u_dcache.\u_tag0.$procmux$8328 ($mux).
Removed cell arm_core.$flatten\u_mem.\u_dcache.\u_tag0.$procmux$8331 ($mux).
Removed cell arm_core.$flatten\u_mem.\u_dcache.\u_data3.$procmux$8316 ($mux).
Removed cell arm_core.$flatten\u_mem.\u_dcache.\u_data3.$procmux$8319 ($mux).
Removed cell arm_core.$flatten\u_mem.\u_dcache.\u_data2.$procmux$8316 ($mux).
Removed cell arm_core.$flatten\u_mem.\u_dcache.\u_data2.$procmux$8319 ($mux).
Removed cell arm_core.$flatten\u_mem.\u_dcache.\u_data1.$procmux$8316 ($mux).
Removed cell arm_core.$flatten\u_mem.\u_dcache.\u_data1.$procmux$8319 ($mux).
Removed cell arm_core.$flatten\u_mem.\u_dcache.\u_data0.$procmux$8316 ($mux).
Removed cell arm_core.$flatten\u_mem.\u_dcache.\u_data0.$procmux$8319 ($mux).
Removed top 1 bits (of 2) from port B of cell arm_core.u_mem.i_byte_enable_$mux_B_1_S_$eq_Y ($eq).
Removed top 1 bits (of 5) from port B of cell arm_core.u_mem.i_cacheable_area_$mux_B_15_S_$eq_Y ($eq).
Removed top 1 bits (of 5) from port B of cell arm_core.u_mem.i_cacheable_area_$mux_B_16_S_$eq_Y ($eq).
Removed top 1 bits (of 5) from port B of cell arm_core.u_mem.i_cacheable_area_$mux_B_17_S_$eq_Y ($eq).
Removed top 1 bits (of 5) from port B of cell arm_core.u_mem.i_cacheable_area_$mux_B_18_S_$eq_Y ($eq).
Removed top 1 bits (of 5) from port B of cell arm_core.u_mem.i_cacheable_area_$mux_B_19_S_$eq_Y ($eq).
Removed top 1 bits (of 5) from port B of cell arm_core.u_mem.i_cacheable_area_$mux_B_20_S_$eq_Y ($eq).
Removed top 1 bits (of 5) from port B of cell arm_core.u_mem.i_cacheable_area_$mux_B_21_S_$eq_Y ($eq).
Removed top 1 bits (of 5) from port B of cell arm_core.u_mem.i_cacheable_area_$mux_B_22_S_$eq_Y ($eq).
Removed top 2 bits (of 5) from port B of cell arm_core.u_mem.i_cacheable_area_$mux_B_23_S_$eq_Y ($eq).
Removed top 2 bits (of 5) from port B of cell arm_core.u_mem.i_cacheable_area_$mux_B_24_S_$eq_Y ($eq).
Removed top 2 bits (of 5) from port B of cell arm_core.u_mem.i_cacheable_area_$mux_B_25_S_$eq_Y ($eq).
Removed top 2 bits (of 5) from port B of cell arm_core.u_mem.i_cacheable_area_$mux_B_26_S_$eq_Y ($eq).
Removed top 3 bits (of 5) from port B of cell arm_core.u_mem.i_cacheable_area_$mux_B_27_S_$eq_Y ($eq).
Removed top 3 bits (of 5) from port B of cell arm_core.u_mem.i_cacheable_area_$mux_B_28_S_$eq_Y ($eq).
Removed top 4 bits (of 5) from port B of cell arm_core.u_mem.i_cacheable_area_$mux_B_29_S_$eq_Y ($eq).
Removed top 4 bits (of 32) from port B of cell arm_core.u_mem.i_cacheable_area_$mux_B_30_Y_$logic_and_B_A_$logic_or_Y_B_$logic_and_Y_A_$logic_and_Y_B_$lt_Y ($lt).
Removed top 31 bits (of 32) from port B of cell arm_core.u_mem.i_cacheable_area_$mux_B_30_Y_$logic_and_B_A_$logic_or_Y_B_$logic_and_Y_B_$logic_not_Y_A_$logic_or_Y_A_$logic_and_Y_A_$ge_Y ($ge).
Removed top 17 bits (of 32) from port B of cell arm_core.u_mem.i_cacheable_area_$mux_B_30_Y_$logic_and_B_A_$logic_or_Y_B_$logic_and_Y_B_$logic_not_Y_A_$logic_or_Y_A_$logic_and_Y_B_$lt_Y ($lt).
Removed top 2 bits (of 18) from port B of cell arm_core.u_mem.i_cacheable_area_$mux_B_30_Y_$logic_and_B_A_$logic_or_Y_B_$logic_and_Y_B_$logic_not_Y_A_$logic_or_Y_B_$eq_Y ($eq).
Removed top 8 bits (of 15) from mux cell arm_core.$auto$pmuxtree.cc:65:recursive_mux_generator$9928 ($mux).
Removed top 10 bits (of 15) from mux cell arm_core.$auto$pmuxtree.cc:65:recursive_mux_generator$9930 ($mux).
Removed top 4 bits (of 15) from mux cell arm_core.$auto$pmuxtree.cc:65:recursive_mux_generator$9916 ($mux).
Removed top 6 bits (of 15) from mux cell arm_core.$auto$pmuxtree.cc:65:recursive_mux_generator$9918 ($mux).
Removed top 1 bits (of 4) from port B of cell arm_core.u_execute.u_alu.out_sel_$eq_A_8 ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.u_execute.u_alu.out_sel_$eq_A_7 ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.u_execute.u_alu.out_sel_$eq_A_6 ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.u_execute.u_alu.out_sel_$eq_A_5 ($eq).
Removed top 2 bits (of 4) from port B of cell arm_core.u_execute.u_alu.out_sel_$eq_A_4 ($eq).
Removed top 2 bits (of 4) from port B of cell arm_core.u_execute.u_alu.out_sel_$eq_A_3 ($eq).
Removed top 3 bits (of 4) from port B of cell arm_core.u_execute.u_alu.out_sel_$eq_A_2 ($eq).
Removed top 1 bits (of 2) from port B of cell arm_core.u_execute.u_alu.cin_sel_$eq_A_1 ($eq).
Removed top 32 bits (of 33) from port B of cell arm_core.u_execute.u_alu.carry_in_$add_B ($add).
Removed top 1 bits (of 33) from port A of cell arm_core.u_execute.u_alu.a_$add_A ($add).
Removed top 1 bits (of 33) from port B of cell arm_core.u_execute.u_alu.a_$add_A ($add).
Removed top 1 bits (of 2) from port B of cell arm_core.u_execute.u_barrel_shift.u_shifter_quick.i_function_$eq_A_1 ($eq).
Removed top 1 bits (of 2) from port B of cell arm_core.u_execute.u_barrel_shift.u_shifter_quick.i_shift_amount_$eq_A ($eq).
Removed top 1 bits (of 2) from port B of cell arm_core.u_execute.u_barrel_shift.u_shifter_quick.i_shift_amount_$eq_A_6 ($eq).
Removed top 2 bits (of 8) from port B of cell arm_core.u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_S_$eq_Y ($eq).
Removed top 3 bits (of 8) from port B of cell arm_core.u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_S_$eq_Y ($eq).
Removed top 3 bits (of 8) from port B of cell arm_core.u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_S_$eq_Y ($eq).
Removed top 3 bits (of 8) from port B of cell arm_core.u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_S_$eq_Y ($eq).
Removed top 3 bits (of 8) from port B of cell arm_core.u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_S_$eq_Y ($eq).
Removed top 3 bits (of 8) from port B of cell arm_core.u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_S_$eq_Y ($eq).
Removed top 3 bits (of 8) from port B of cell arm_core.u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_S_$eq_Y ($eq).
Removed top 3 bits (of 8) from port B of cell arm_core.u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_S_$eq_Y ($eq).
Removed top 3 bits (of 8) from port B of cell arm_core.u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_S_$eq_Y ($eq).
Removed top 3 bits (of 8) from port B of cell arm_core.u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_S_$eq_Y ($eq).
Removed top 3 bits (of 8) from port B of cell arm_core.u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_S_$eq_Y ($eq).
Removed top 3 bits (of 8) from port B of cell arm_core.u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_S_$eq_Y ($eq).
Removed top 3 bits (of 8) from port B of cell arm_core.u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_S_$eq_Y ($eq).
Removed top 3 bits (of 8) from port B of cell arm_core.u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_S_$eq_Y ($eq).
Removed top 3 bits (of 8) from port B of cell arm_core.u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_S_$eq_Y ($eq).
Removed top 3 bits (of 8) from port B of cell arm_core.u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_S_$eq_Y ($eq).
Removed top 3 bits (of 8) from port B of cell arm_core.u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_S_$eq_Y ($eq).
Removed top 4 bits (of 8) from port B of cell arm_core.u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_S_$eq_Y ($eq).
Removed top 4 bits (of 8) from port B of cell arm_core.u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_S_$eq_Y ($eq).
Removed top 4 bits (of 8) from port B of cell arm_core.u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_S_$eq_Y ($eq).
Removed top 4 bits (of 8) from port B of cell arm_core.u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_S_$eq_Y ($eq).
Removed top 4 bits (of 8) from port B of cell arm_core.u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_S_$eq_Y ($eq).
Removed top 4 bits (of 8) from port B of cell arm_core.u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_S_$eq_Y ($eq).
Removed top 4 bits (of 8) from port B of cell arm_core.u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_S_$eq_Y ($eq).
Removed top 4 bits (of 8) from port B of cell arm_core.u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_S_$eq_Y ($eq).
Removed top 5 bits (of 8) from port B of cell arm_core.u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_S_$eq_Y ($eq).
Removed top 5 bits (of 8) from port B of cell arm_core.u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_S_$eq_Y ($eq).
Removed top 5 bits (of 8) from port B of cell arm_core.u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_S_$eq_Y ($eq).
Removed top 5 bits (of 8) from port B of cell arm_core.u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_S_$eq_Y ($eq).
Removed top 6 bits (of 8) from port B of cell arm_core.u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_S_$eq_Y ($eq).
Removed top 6 bits (of 8) from port B of cell arm_core.u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_S_$eq_Y ($eq).
Removed top 7 bits (of 8) from port B of cell arm_core.u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_S_$eq_Y ($eq).
Removed top 1 bits (of 5) from port B of cell arm_core.u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_S_$eq_Y ($eq).
Removed top 1 bits (of 5) from port B of cell arm_core.u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_S_$eq_Y ($eq).
Removed top 1 bits (of 5) from port B of cell arm_core.u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_S_$eq_Y ($eq).
Removed top 1 bits (of 5) from port B of cell arm_core.u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_S_$eq_Y ($eq).
Removed top 1 bits (of 5) from port B of cell arm_core.u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_S_$eq_Y ($eq).
Removed top 1 bits (of 5) from port B of cell arm_core.u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_S_$eq_Y ($eq).
Removed top 1 bits (of 5) from port B of cell arm_core.u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_S_$eq_Y ($eq).
Removed top 1 bits (of 5) from port B of cell arm_core.u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_S_$eq_Y ($eq).
Removed top 2 bits (of 5) from port B of cell arm_core.u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_S_$eq_Y ($eq).
Removed top 2 bits (of 5) from port B of cell arm_core.u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_S_$eq_Y ($eq).
Removed top 2 bits (of 5) from port B of cell arm_core.u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_S_$eq_Y ($eq).
Removed top 2 bits (of 5) from port B of cell arm_core.u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_S_$eq_Y ($eq).
Removed top 3 bits (of 5) from port B of cell arm_core.u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_S_$eq_Y ($eq).
Removed top 3 bits (of 5) from port B of cell arm_core.u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_S_$eq_Y ($eq).
Removed top 4 bits (of 5) from port B of cell arm_core.u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_S_$eq_Y ($eq).
Removed top 1 bits (of 2) from port B of cell arm_core.u_execute.u_barrel_shift.u_shifter_full.i_function_$eq_A_1 ($eq).
Removed top 1 bits (of 6) from port B of cell arm_core.u_execute.u_multiply.o_done_$mux_A_B_$eq_Y ($eq).
Removed top 1 bits (of 2) from port B of cell arm_core.u_execute.u_multiply.multiplier_$mux_B_S_$eq_Y ($eq).
Removed top 33 bits (of 34) from port B of cell arm_core.u_execute.u_multiply.i_a_in_$not_A_Y_$add_A ($add).
Removed top 2 bits (of 34) from port A of cell arm_core.u_execute.u_multiply.i_a_in_$not_A ($not).
Removed top 1 bits (of 33) from port A of cell arm_core.u_execute.u_multiply.i_a_in_$add_B ($add).
Removed top 1 bits (of 33) from port B of cell arm_core.u_execute.u_multiply.i_a_in_$add_B ($add).
Removed top 1 bits (of 33) from port Y of cell arm_core.u_execute.u_multiply.i_a_in_$add_B ($add).
Removed top 5 bits (of 6) from mux cell arm_core.u_execute.u_multiply.enable_$mux_S ($mux).
Removed top 35 bits (of 68) from mux cell arm_core.$flatten\u_execute.\u_multiply.$procmux$3428 ($mux).
Removed cell arm_core.u_execute.u_register_bank.read_data_wen_$mux_S_7 ($mux).
Removed cell arm_core.u_execute.u_register_bank.read_data_wen_$mux_S_6 ($mux).
Removed cell arm_core.u_execute.u_register_bank.read_data_wen_$mux_S_5 ($mux).
Removed cell arm_core.u_execute.u_register_bank.read_data_wen_$mux_S_4 ($mux).
Removed cell arm_core.u_execute.u_register_bank.read_data_wen_$mux_S_3 ($mux).
Removed cell arm_core.u_execute.u_register_bank.read_data_wen_$mux_S_2 ($mux).
Removed cell arm_core.u_execute.u_register_bank.read_data_wen_$mux_S_1 ($mux).
Removed cell arm_core.u_execute.u_register_bank.read_data_wen_$mux_S ($mux).
Removed cell arm_core.u_execute.u_register_bank.read_data_wen_$logic_and_A_Y_$mux_S ($mux).
Removed cell arm_core.u_execute.u_register_bank.read_data_wen_$logic_and_A_9_Y_$mux_S ($mux).
Removed cell arm_core.u_execute.u_register_bank.read_data_wen_$logic_and_A_8_Y_$mux_S ($mux).
Removed cell arm_core.u_execute.u_register_bank.read_data_wen_$logic_and_A_7_Y_$mux_S ($mux).
Removed cell arm_core.u_execute.u_register_bank.read_data_wen_$logic_and_A_6_Y_$mux_S ($mux).
Removed cell arm_core.u_execute.u_register_bank.read_data_wen_$logic_and_A_5_Y_$mux_S ($mux).
Removed cell arm_core.u_execute.u_register_bank.read_data_wen_$logic_and_A_4_Y_$mux_S ($mux).
Removed cell arm_core.u_execute.u_register_bank.read_data_wen_$logic_and_A_3_Y_$mux_S ($mux).
Removed cell arm_core.u_execute.u_register_bank.read_data_wen_$logic_and_A_2_Y_$mux_S ($mux).
Removed cell arm_core.u_execute.u_register_bank.read_data_wen_$logic_and_A_1_Y_$mux_S ($mux).
Removed cell arm_core.u_execute.u_register_bank.read_data_wen_$logic_and_A_17_Y_$mux_S ($mux).
Removed cell arm_core.u_execute.u_register_bank.read_data_wen_$logic_and_A_16_Y_$mux_S ($mux).
Removed cell arm_core.u_execute.u_register_bank.read_data_wen_$logic_and_A_15_Y_$mux_S ($mux).
Removed cell arm_core.u_execute.u_register_bank.read_data_wen_$logic_and_A_14_Y_$mux_S ($mux).
Removed cell arm_core.u_execute.u_register_bank.read_data_wen_$logic_and_A_13_Y_$mux_S ($mux).
Removed cell arm_core.u_execute.u_register_bank.read_data_wen_$logic_and_A_12_Y_$mux_S ($mux).
Removed cell arm_core.u_execute.u_register_bank.read_data_wen_$logic_and_A_11_Y_$mux_S ($mux).
Removed cell arm_core.u_execute.u_register_bank.read_data_wen_$logic_and_A_10_Y_$mux_S ($mux).
Removed cell arm_core.u_execute.u_register_bank.pc_dmem_wen_$mux_S ($mux).
Removed top 1 bits (of 2) from port B of cell arm_core.u_execute.u_register_bank.i_wb_mode_$ne_A_4 ($ne).
Removed top 1 bits (of 2) from port B of cell arm_core.u_execute.u_register_bank.i_wb_mode_$eq_A_12 ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.u_execute.u_register_bank.i_rn_sel_$eq_A_7 ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.u_execute.u_register_bank.i_rn_sel_$eq_A_6 ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.u_execute.u_register_bank.i_rn_sel_$eq_A_5 ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.u_execute.u_register_bank.i_rn_sel_$eq_A_4 ($eq).
Removed top 2 bits (of 4) from port B of cell arm_core.u_execute.u_register_bank.i_rn_sel_$eq_A_3 ($eq).
Removed top 2 bits (of 4) from port B of cell arm_core.u_execute.u_register_bank.i_rn_sel_$eq_A_2 ($eq).
Removed top 3 bits (of 4) from port B of cell arm_core.u_execute.u_register_bank.i_rn_sel_$eq_A_1 ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.u_execute.u_register_bank.i_rm_sel_$eq_A_7 ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.u_execute.u_register_bank.i_rm_sel_$eq_A_6 ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.u_execute.u_register_bank.i_rm_sel_$eq_A_5 ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.u_execute.u_register_bank.i_rm_sel_$eq_A_4 ($eq).
Removed top 2 bits (of 4) from port B of cell arm_core.u_execute.u_register_bank.i_rm_sel_$eq_A_3 ($eq).
Removed top 2 bits (of 4) from port B of cell arm_core.u_execute.u_register_bank.i_rm_sel_$eq_A_2 ($eq).
Removed top 3 bits (of 4) from port B of cell arm_core.u_execute.u_register_bank.i_rm_sel_$eq_A_1 ($eq).
Removed top 1 bits (of 2) from port B of cell arm_core.u_execute.u_register_bank.i_mode_exec_$eq_A_3 ($eq).
Removed top 3 bits (of 4) from port B of cell arm_core.$flatten\u_execute.\u_register_bank.$procmux$3479_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell arm_core.$flatten\u_execute.\u_register_bank.$procmux$3478_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell arm_core.$flatten\u_execute.\u_register_bank.$procmux$3477_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.$flatten\u_execute.\u_register_bank.$procmux$3476_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.$flatten\u_execute.\u_register_bank.$procmux$3475_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.$flatten\u_execute.\u_register_bank.$procmux$3474_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.$flatten\u_execute.\u_register_bank.$procmux$3473_CMP0 ($eq).
Removed top 2 bits (of 4) from mux cell arm_core.$auto$pmuxtree.cc:65:recursive_mux_generator$9952 ($mux).
Removed top 3 bits (of 4) from port B of cell arm_core.$flatten\u_execute.\u_register_bank.$procmux$3462_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell arm_core.$flatten\u_execute.\u_register_bank.$procmux$3461_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell arm_core.$flatten\u_execute.\u_register_bank.$procmux$3460_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.$flatten\u_execute.\u_register_bank.$procmux$3459_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.$flatten\u_execute.\u_register_bank.$procmux$3458_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.$flatten\u_execute.\u_register_bank.$procmux$3457_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.$flatten\u_execute.\u_register_bank.$procmux$3456_CMP0 ($eq).
Removed cell arm_core.$flatten\u_execute.$auto$ff.cc:262:slice$9445 ($dffe).
Removed top 29 bits (of 32) from port B of cell arm_core.u_execute.alu_out_$add_A ($add).
Removed top 6 bits (of 32) from mux cell arm_core.u_execute.execute_$logic_not_A_1_Y_$mux_S ($mux).
Removed top 1 bits (of 2) from port B of cell arm_core.u_execute.i_barrel_shift_amount_sel_$eq_A_1 ($eq).
Removed top 1 bits (of 2) from port B of cell arm_core.u_execute.i_byte_enable_sel_$eq_A_1_Y_$mux_S_A_$mux_Y_A_$mux_Y_S_$eq_Y ($eq).
Removed top 3 bits (of 4) from port B of cell arm_core.u_execute.i_daddress_sel_$eq_A ($eq).
Removed top 2 bits (of 4) from port B of cell arm_core.u_execute.i_daddress_sel_$eq_A_1 ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.u_execute.i_daddress_sel_$eq_A_2 ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.u_execute.i_daddress_sel_$eq_A_3 ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.u_execute.i_daddress_sel_$eq_A_4 ($eq).
Removed top 3 bits (of 4) from port B of cell arm_core.u_execute.i_iaddress_sel_$eq_A_1 ($eq).
Removed top 2 bits (of 4) from port B of cell arm_core.u_execute.i_iaddress_sel_$eq_A_2 ($eq).
Removed top 2 bits (of 3) from port B of cell arm_core.u_execute.i_interrupt_vector_sel_$eq_A_1 ($eq).
Removed top 1 bits (of 3) from port B of cell arm_core.u_execute.i_interrupt_vector_sel_$eq_A_2 ($eq).
Removed top 1 bits (of 3) from port B of cell arm_core.u_execute.i_interrupt_vector_sel_$eq_A_3 ($eq).
Removed top 27 bits (of 32) from mux cell arm_core.u_execute.i_interrupt_vector_sel_$eq_A_6_Y_$mux_S ($mux).
Removed top 3 bits (of 4) from port A of cell arm_core.u_execute.i_mem_stall_$pos_A_Y_$not_A ($not).
Removed top 1 bits (of 3) from port B of cell arm_core.u_execute.i_pc_sel_$eq_A_2 ($eq).
Removed top 1 bits (of 3) from port B of cell arm_core.u_execute.i_pc_sel_$eq_A_3 ($eq).
Removed top 6 bits (of 32) from mux cell arm_core.u_execute.i_pc_sel_$eq_A_Y_$mux_S ($mux).
Removed top 14 bits (of 15) from port A of cell arm_core.u_execute.i_reg_bank_wen_$and_B_1 ($and).
Removed top 2 bits (of 3) from port B of cell arm_core.u_execute.i_reg_write_sel_$eq_A_1 ($eq).
Removed top 1 bits (of 3) from port B of cell arm_core.u_execute.i_reg_write_sel_$eq_A_2 ($eq).
Removed top 1 bits (of 3) from port B of cell arm_core.u_execute.i_reg_write_sel_$eq_A_3 ($eq).
Removed top 2 bits (of 3) from port B of cell arm_core.u_execute.i_status_bits_mode_$mux_B_A_$mux_Y_S_$eq_Y ($eq).
Removed top 1 bits (of 2) from port B of cell arm_core.u_execute.i_wb_load_rd_$eq_A_1 ($eq).
Removed top 3 bits (of 4) from port B of cell arm_core.u_execute.i_wb_read_data_valid_$and_A_Y_$and_A ($and).
Removed top 1 bits (of 3) from port B of cell arm_core.u_execute.multiply_flags_$mux_A_S_$eq_Y ($eq).
Removed top 29 bits (of 32) from port B of cell arm_core.u_execute.o_daddress_$add_A ($add).
Removed top 6 bits (of 32) from port A of cell arm_core.u_execute.pc_$add_A ($add).
Removed top 29 bits (of 32) from port B of cell arm_core.u_execute.pc_$add_A ($add).
Removed top 5 bits (of 32) from port Y of cell arm_core.u_execute.pc_$add_A ($add).
Removed top 6 bits (of 32) from port A of cell arm_core.u_execute.pc_$sub_A ($sub).
Removed top 29 bits (of 32) from port B of cell arm_core.u_execute.pc_$sub_A ($sub).
Removed top 5 bits (of 32) from port Y of cell arm_core.u_execute.pc_$sub_A ($sub).
Removed top 2 bits (of 3) from port B of cell arm_core.u_execute.pc_wen_$logic_and_A_B_$eq_Y ($eq).
Removed top 29 bits (of 32) from port B of cell arm_core.u_execute.rn_$add_A ($add).
Removed top 2 bits (of 4) from port B of cell arm_core.u_execute.status_bits_flags_$logic_and_B_1_A_$eq_Y ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.u_execute.status_bits_flags_$logic_and_B_2_A_$eq_Y ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.u_execute.status_bits_flags_$logic_and_B_3_A_$eq_Y ($eq).
Removed top 2 bits (of 4) from port B of cell arm_core.u_execute.status_bits_flags_$logic_not_A_1_Y_$logic_and_B_A_$eq_Y ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.u_execute.status_bits_flags_$logic_not_A_2_Y_$logic_and_B_A_$eq_Y ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.u_execute.status_bits_flags_$logic_not_A_3_Y_$logic_and_B_A_$eq_Y ($eq).
Removed top 3 bits (of 4) from port B of cell arm_core.u_execute.status_bits_flags_$logic_not_A_Y_$logic_and_B_A_$eq_Y ($eq).
Removed top 1 bits (of 2) from port B of cell arm_core.u_execute.status_bits_mode_$eq_A_1 ($eq).
Removed top 1 bits (of 4) from mux cell arm_core.u_execute.status_bits_mode_$eq_A_1_Y_$mux_S ($mux).
Removed top 1 bits (of 2) from port B of cell arm_core.u_execute.status_bits_mode_nxt_$eq_A_2 ($eq).
Removed top 1 bits (of 4) from mux cell arm_core.u_execute.status_bits_mode_nxt_$eq_A_2_Y_$mux_S ($mux).
Removed top 1 bits (of 4) from mux cell arm_core.u_execute.status_bits_mode_update_$mux_S_A_$mux_Y_A_$mux_Y ($mux).
Removed cell arm_core.$flatten\u_decode.$auto$ff.cc:262:slice$9098 ($dffe).
Removed cell arm_core.$flatten\u_decode.$auto$ff.cc:262:slice$9099 ($dffe).
Removed cell arm_core.$flatten\u_decode.$auto$ff.cc:262:slice$9102 ($dffe).
Removed cell arm_core.$flatten\u_decode.$auto$ff.cc:262:slice$9107 ($dffe).
Removed cell arm_core.$flatten\u_decode.$auto$ff.cc:262:slice$9128 ($dffe).
Removed cell arm_core.$flatten\u_decode.$auto$ff.cc:262:slice$9190 ($dffe).
Removed top 3 bits (of 5) from port B of cell arm_core.$flatten\u_decode.$auto$opt_dff.cc:195:make_patterns_logic$9477 ($ne).
Removed top 3 bits (of 4) from port B of cell arm_core.$flatten\u_decode.$auto$opt_dff.cc:195:make_patterns_logic$9479 ($ne).
Removed top 1 bits (of 2) from port B of cell arm_core.$flatten\u_decode.$auto$opt_dff.cc:195:make_patterns_logic$9483 ($ne).
Removed top 4 bits (of 19) from port B of cell arm_core.$flatten\u_decode.$auto$opt_dff.cc:195:make_patterns_logic$9522 ($ne).
Removed cell arm_core.$flatten\u_decode.$procmux$3528 ($mux).
Removed cell arm_core.$flatten\u_decode.$procmux$3531 ($mux).
Removed cell arm_core.$flatten\u_decode.$procmux$3535 ($mux).
Removed cell arm_core.$flatten\u_decode.$procmux$3538 ($mux).
Removed cell arm_core.$flatten\u_decode.$procmux$3542 ($mux).
Removed cell arm_core.$flatten\u_decode.$procmux$3545 ($mux).
Removed cell arm_core.$flatten\u_decode.$procmux$3549 ($mux).
Removed cell arm_core.$flatten\u_decode.$procmux$3552 ($mux).
Removed cell arm_core.$flatten\u_decode.$procmux$3556 ($mux).
Removed cell arm_core.$flatten\u_decode.$procmux$3559 ($mux).
Removed cell arm_core.$flatten\u_decode.$procmux$3563 ($mux).
Removed cell arm_core.$flatten\u_decode.$procmux$3687 ($mux).
Removed cell arm_core.$flatten\u_decode.$procmux$3805 ($mux).
Removed top 1 bits (of 5) from mux cell arm_core.$flatten\u_decode.$procmux$3916 ($mux).
Removed top 3 bits (of 5) from mux cell arm_core.$flatten\u_decode.$procmux$4021 ($mux).
Removed top 1 bits (of 5) from mux cell arm_core.$flatten\u_decode.$procmux$4075 ($mux).
Removed top 1 bits (of 5) from mux cell arm_core.$flatten\u_decode.$procmux$4279 ($mux).
Removed top 1 bits (of 5) from mux cell arm_core.$flatten\u_decode.$procmux$4372 ($mux).
Removed top 1 bits (of 5) from mux cell arm_core.$flatten\u_decode.$procmux$4729 ($mux).
Removed top 1 bits (of 5) from mux cell arm_core.$flatten\u_decode.$procmux$4756 ($mux).
Removed top 3 bits (of 4) from mux cell arm_core.$flatten\u_decode.$procmux$5461 ($mux).
Removed top 3 bits (of 4) from mux cell arm_core.$flatten\u_decode.$procmux$5476 ($mux).
Removed top 3 bits (of 4) from mux cell arm_core.$flatten\u_decode.$procmux$5488 ($mux).
Removed top 1 bits (of 2) from mux cell arm_core.$flatten\u_decode.$procmux$5815 ($mux).
Removed top 1 bits (of 2) from mux cell arm_core.$flatten\u_decode.$procmux$5827 ($mux).
Removed top 2 bits (of 3) from mux cell arm_core.$flatten\u_decode.$procmux$6136 ($mux).
Removed top 2 bits (of 3) from mux cell arm_core.$flatten\u_decode.$procmux$6145 ($mux).
Removed top 1 bits (of 3) from mux cell arm_core.$flatten\u_decode.$procmux$6153 ($mux).
Removed top 1 bits (of 2) from mux cell arm_core.$flatten\u_decode.$procmux$6171 ($mux).
Removed top 1 bits (of 2) from mux cell arm_core.$flatten\u_decode.$procmux$6178 ($mux).
Removed top 1 bits (of 2) from mux cell arm_core.$flatten\u_decode.$procmux$6183 ($mux).
Removed top 1 bits (of 3) from mux cell arm_core.$flatten\u_decode.$procmux$6285 ($mux).
Removed top 1 bits (of 3) from mux cell arm_core.$flatten\u_decode.$procmux$6297 ($mux).
Removed top 1 bits (of 3) from mux cell arm_core.$flatten\u_decode.$procmux$6306 ($mux).
Removed top 1 bits (of 3) from mux cell arm_core.$flatten\u_decode.$procmux$6313 ($mux).
Removed top 1 bits (of 3) from mux cell arm_core.$flatten\u_decode.$procmux$6328 ($mux).
Removed top 1 bits (of 3) from mux cell arm_core.$flatten\u_decode.$procmux$6340 ($mux).
Removed top 1 bits (of 3) from mux cell arm_core.$flatten\u_decode.$procmux$6349 ($mux).
Removed top 1 bits (of 3) from mux cell arm_core.$flatten\u_decode.$procmux$6354 ($mux).
Removed top 1 bits (of 4) from mux cell arm_core.$flatten\u_decode.$procmux$6357 ($mux).
Removed top 1 bits (of 4) from mux cell arm_core.$flatten\u_decode.$procmux$6369 ($mux).
Removed top 1 bits (of 4) from mux cell arm_core.$flatten\u_decode.$procmux$6378 ($mux).
Removed top 1 bits (of 4) from mux cell arm_core.$flatten\u_decode.$procmux$6385 ($mux).
Removed top 1 bits (of 4) from mux cell arm_core.$flatten\u_decode.$procmux$6398 ($mux).
Removed top 2 bits (of 4) from mux cell arm_core.$flatten\u_decode.$procmux$6414 ($mux).
Removed top 1 bits (of 4) from mux cell arm_core.$flatten\u_decode.$procmux$6428 ($mux).
Removed top 1 bits (of 4) from mux cell arm_core.$flatten\u_decode.$procmux$6439 ($mux).
Removed top 1 bits (of 4) from mux cell arm_core.$flatten\u_decode.$procmux$6449 ($mux).
Removed top 1 bits (of 4) from mux cell arm_core.$flatten\u_decode.$procmux$6457 ($mux).
Removed top 1 bits (of 4) from mux cell arm_core.$flatten\u_decode.$procmux$6462 ($mux).
Removed top 2 bits (of 4) from mux cell arm_core.$flatten\u_decode.$procmux$6465 ($mux).
Removed top 2 bits (of 4) from mux cell arm_core.$flatten\u_decode.$procmux$6495 ($mux).
Removed top 2 bits (of 4) from mux cell arm_core.$flatten\u_decode.$procmux$6522 ($mux).
Removed top 2 bits (of 4) from mux cell arm_core.$flatten\u_decode.$procmux$6546 ($mux).
Removed top 2 bits (of 4) from mux cell arm_core.$flatten\u_decode.$procmux$6567 ($mux).
Removed top 2 bits (of 4) from mux cell arm_core.$flatten\u_decode.$procmux$6585 ($mux).
Removed top 2 bits (of 4) from mux cell arm_core.$flatten\u_decode.$procmux$6600 ($mux).
Removed top 2 bits (of 4) from mux cell arm_core.$flatten\u_decode.$procmux$6612 ($mux).
Removed top 2 bits (of 4) from mux cell arm_core.$flatten\u_decode.$procmux$6621 ($mux).
Removed top 2 bits (of 4) from mux cell arm_core.$flatten\u_decode.$procmux$6628 ($mux).
Removed top 2 bits (of 4) from mux cell arm_core.$flatten\u_decode.$procmux$6646 ($mux).
Removed top 2 bits (of 4) from mux cell arm_core.$flatten\u_decode.$procmux$6661 ($mux).
Removed top 2 bits (of 4) from mux cell arm_core.$flatten\u_decode.$procmux$6673 ($mux).
Removed top 2 bits (of 4) from mux cell arm_core.$flatten\u_decode.$procmux$6682 ($mux).
Removed top 2 bits (of 4) from mux cell arm_core.$flatten\u_decode.$procmux$6687 ($mux).
Removed top 1 bits (of 2) from mux cell arm_core.$flatten\u_decode.$procmux$6690 ($mux).
Removed top 1 bits (of 2) from mux cell arm_core.$flatten\u_decode.$procmux$6705 ($mux).
Removed top 1 bits (of 2) from mux cell arm_core.$flatten\u_decode.$procmux$6717 ($mux).
Removed top 1 bits (of 2) from mux cell arm_core.$flatten\u_decode.$procmux$6726 ($mux).
Removed top 1 bits (of 2) from mux cell arm_core.$flatten\u_decode.$procmux$6983 ($mux).
Removed top 1 bits (of 2) from mux cell arm_core.$flatten\u_decode.$procmux$6991 ($mux).
Removed cell arm_core.$flatten\u_decode.$procmux$7092 ($mux).
Removed cell arm_core.$flatten\u_decode.$procmux$7099 ($mux).
Removed cell arm_core.$flatten\u_decode.$procmux$7104 ($mux).
Removed top 16 bits (of 32) from mux cell arm_core.$flatten\u_decode.$procmux$7131 ($mux).
Removed top 16 bits (of 32) from mux cell arm_core.$flatten\u_decode.$procmux$7176 ($mux).
Removed top 16 bits (of 32) from mux cell arm_core.$flatten\u_decode.$procmux$7218 ($mux).
Removed top 16 bits (of 32) from mux cell arm_core.$flatten\u_decode.$procmux$7257 ($mux).
Removed top 16 bits (of 32) from mux cell arm_core.$flatten\u_decode.$procmux$7293 ($mux).
Removed top 16 bits (of 32) from mux cell arm_core.$flatten\u_decode.$procmux$7326 ($mux).
Removed top 16 bits (of 32) from mux cell arm_core.$flatten\u_decode.$procmux$7356 ($mux).
Removed top 16 bits (of 32) from mux cell arm_core.$flatten\u_decode.$procmux$7383 ($mux).
Removed top 16 bits (of 32) from mux cell arm_core.$flatten\u_decode.$procmux$7407 ($mux).
Removed top 16 bits (of 32) from mux cell arm_core.$flatten\u_decode.$procmux$7428 ($mux).
Removed top 16 bits (of 32) from mux cell arm_core.$flatten\u_decode.$procmux$7446 ($mux).
Removed top 16 bits (of 32) from mux cell arm_core.$flatten\u_decode.$procmux$7461 ($mux).
Removed top 16 bits (of 32) from mux cell arm_core.$flatten\u_decode.$procmux$7473 ($mux).
Removed top 16 bits (of 32) from mux cell arm_core.$flatten\u_decode.$procmux$7482 ($mux).
Removed top 16 bits (of 32) from mux cell arm_core.$flatten\u_decode.$procmux$7488 ($mux).
Removed top 3 bits (of 4) from mux cell arm_core.$flatten\u_decode.$procmux$7491 ($mux).
Removed top 2 bits (of 4) from mux cell arm_core.$flatten\u_decode.$procmux$7536 ($mux).
Removed top 2 bits (of 4) from mux cell arm_core.$flatten\u_decode.$procmux$7578 ($mux).
Removed top 1 bits (of 4) from mux cell arm_core.$flatten\u_decode.$procmux$7617 ($mux).
Removed top 1 bits (of 4) from mux cell arm_core.$flatten\u_decode.$procmux$7653 ($mux).
Removed top 1 bits (of 4) from mux cell arm_core.$flatten\u_decode.$procmux$7686 ($mux).
Removed top 1 bits (of 4) from mux cell arm_core.$flatten\u_decode.$procmux$7716 ($mux).
Removed top 3 bits (of 4) from mux cell arm_core.$flatten\u_decode.$procmux$7851 ($mux).
Removed top 2 bits (of 4) from mux cell arm_core.$flatten\u_decode.$procmux$7896 ($mux).
Removed top 2 bits (of 4) from mux cell arm_core.$flatten\u_decode.$procmux$7938 ($mux).
Removed top 1 bits (of 4) from mux cell arm_core.$flatten\u_decode.$procmux$7977 ($mux).
Removed top 1 bits (of 4) from mux cell arm_core.$flatten\u_decode.$procmux$8013 ($mux).
Removed top 1 bits (of 4) from mux cell arm_core.$flatten\u_decode.$procmux$8046 ($mux).
Removed top 1 bits (of 4) from mux cell arm_core.$flatten\u_decode.$procmux$8076 ($mux).
Removed top 3 bits (of 4) from port B of cell arm_core.u_decode.conflict_$logic_not_A_3_Y_$logic_and_B_A_$eq_Y ($eq).
Removed top 1 bits (of 5) from port B of cell arm_core.u_decode.control_state_$eq_A_13 ($eq).
Removed top 4 bits (of 5) from port B of cell arm_core.u_decode.control_state_$eq_A_19 ($eq).
Removed top 3 bits (of 5) from port B of cell arm_core.u_decode.control_state_$eq_A_20 ($eq).
Removed top 3 bits (of 5) from port B of cell arm_core.u_decode.control_state_$eq_A_21 ($eq).
Removed top 1 bits (of 5) from port B of cell arm_core.u_decode.control_state_$eq_A_23 ($eq).
Removed top 1 bits (of 5) from port B of cell arm_core.u_decode.control_state_$eq_A_24 ($eq).
Removed top 1 bits (of 5) from port B of cell arm_core.u_decode.control_state_$eq_A_27 ($eq).
Removed top 1 bits (of 5) from port B of cell arm_core.u_decode.control_state_$eq_A_28 ($eq).
Removed top 2 bits (of 5) from port B of cell arm_core.u_decode.control_state_$eq_A_29 ($eq).
Removed top 2 bits (of 5) from port B of cell arm_core.u_decode.control_state_$eq_A_30 ($eq).
Removed top 1 bits (of 5) from port B of cell arm_core.u_decode.control_state_$eq_A_32 ($eq).
Removed top 1 bits (of 5) from port B of cell arm_core.u_decode.control_state_$eq_A_33 ($eq).
Removed top 1 bits (of 5) from port B of cell arm_core.u_decode.control_state_$eq_A_34 ($eq).
Removed top 3 bits (of 5) from port B of cell arm_core.u_decode.i_fetch_$eq_A ($eq).
Removed top 2 bits (of 6) from port B of cell arm_core.u_decode.i_fetch_$eq_A_1 ($eq).
Removed top 3 bits (of 4) from mux cell arm_core.u_decode.i_fetch_$eq_A_12_Y_$logic_and_B_Y_$mux_S ($mux).
Removed top 2 bits (of 4) from mux cell arm_core.u_decode.i_fetch_$eq_A_3_Y_$logic_and_B_Y_$mux_S ($mux).
Removed top 2 bits (of 4) from mux cell arm_core.u_decode.i_fetch_$eq_A_4_Y_$mux_S ($mux).
Removed top 1 bits (of 2) from port B of cell arm_core.u_decode.i_fetch_$eq_A_5 ($eq).
Removed top 2 bits (of 4) from mux cell arm_core.u_decode.i_fetch_$eq_A_5_Y_$mux_S ($mux).
Removed top 1 bits (of 4) from mux cell arm_core.u_decode.i_fetch_$eq_A_6_Y_$mux_S ($mux).
Removed top 1 bits (of 4) from mux cell arm_core.u_decode.i_fetch_$eq_A_7_Y_$mux_S ($mux).
Removed top 1 bits (of 4) from mux cell arm_core.u_decode.i_fetch_$eq_A_8_Y_$mux_S ($mux).
Removed top 1 bits (of 4) from mux cell arm_core.u_decode.i_fetch_$eq_A_9_Y_$logic_and_A_Y_$mux_S ($mux).
Removed top 20 bits (of 32) from mux cell arm_core.u_decode.imm8_$mux_B ($mux).
Removed top 18 bits (of 32) from mux cell arm_core.u_decode.imm8_$mux_B_1 ($mux).
Removed top 1 bits (of 4) from port B of cell arm_core.u_decode.imm8_$mux_B_10_S_$eq_Y ($eq).
Removed top 2 bits (of 4) from port B of cell arm_core.u_decode.imm8_$mux_B_11_S_$eq_Y ($eq).
Removed top 2 bits (of 4) from port B of cell arm_core.u_decode.imm8_$mux_B_12_S_$eq_Y ($eq).
Removed top 3 bits (of 4) from port B of cell arm_core.u_decode.imm8_$mux_B_13_S_$eq_Y ($eq).
Removed top 16 bits (of 32) from mux cell arm_core.u_decode.imm8_$mux_B_2 ($mux).
Removed top 14 bits (of 32) from mux cell arm_core.u_decode.imm8_$mux_B_3 ($mux).
Removed top 12 bits (of 32) from mux cell arm_core.u_decode.imm8_$mux_B_4 ($mux).
Removed top 10 bits (of 32) from mux cell arm_core.u_decode.imm8_$mux_B_5 ($mux).
Removed top 8 bits (of 32) from mux cell arm_core.u_decode.imm8_$mux_B_6 ($mux).
Removed top 6 bits (of 32) from mux cell arm_core.u_decode.imm8_$mux_B_7 ($mux).
Removed top 1 bits (of 4) from port B of cell arm_core.u_decode.imm8_$mux_B_7_S_$eq_Y ($eq).
Removed top 4 bits (of 32) from mux cell arm_core.u_decode.imm8_$mux_B_8 ($mux).
Removed top 1 bits (of 4) from port B of cell arm_core.u_decode.imm8_$mux_B_8_S_$eq_Y ($eq).
Removed top 2 bits (of 32) from mux cell arm_core.u_decode.imm8_$mux_B_9 ($mux).
Removed top 1 bits (of 4) from port B of cell arm_core.u_decode.imm8_$mux_B_9_S_$eq_Y ($eq).
Removed top 4 bits (of 5) from port A of cell arm_core.u_decode.instruction_$add_B ($add).
Removed top 4 bits (of 5) from port B of cell arm_core.u_decode.instruction_$add_B ($add).
Removed top 3 bits (of 5) from port Y of cell arm_core.u_decode.instruction_$add_B ($add).
Removed top 3 bits (of 5) from port A of cell arm_core.u_decode.instruction_$add_B_1 ($add).
Removed top 4 bits (of 5) from port B of cell arm_core.u_decode.instruction_$add_B_1 ($add).
Removed top 2 bits (of 5) from port Y of cell arm_core.u_decode.instruction_$add_B_1 ($add).
Removed top 4 bits (of 5) from port B of cell arm_core.u_decode.instruction_$add_B_10 ($add).
Removed top 4 bits (of 5) from port B of cell arm_core.u_decode.instruction_$add_B_11 ($add).
Removed top 4 bits (of 5) from port B of cell arm_core.u_decode.instruction_$add_B_12 ($add).
Removed top 4 bits (of 5) from port B of cell arm_core.u_decode.instruction_$add_B_13 ($add).
Removed top 4 bits (of 5) from port B of cell arm_core.u_decode.instruction_$add_B_14 ($add).
Removed top 2 bits (of 5) from port A of cell arm_core.u_decode.instruction_$add_B_2 ($add).
Removed top 4 bits (of 5) from port B of cell arm_core.u_decode.instruction_$add_B_2 ($add).
Removed top 1 bits (of 5) from port Y of cell arm_core.u_decode.instruction_$add_B_2 ($add).
Removed top 1 bits (of 5) from port A of cell arm_core.u_decode.instruction_$add_B_3 ($add).
Removed top 4 bits (of 5) from port B of cell arm_core.u_decode.instruction_$add_B_3 ($add).
Removed top 4 bits (of 5) from port B of cell arm_core.u_decode.instruction_$add_B_4 ($add).
Removed top 4 bits (of 5) from port B of cell arm_core.u_decode.instruction_$add_B_5 ($add).
Removed top 4 bits (of 5) from port B of cell arm_core.u_decode.instruction_$add_B_6 ($add).
Removed top 4 bits (of 5) from port B of cell arm_core.u_decode.instruction_$add_B_7 ($add).
Removed top 4 bits (of 5) from port B of cell arm_core.u_decode.instruction_$add_B_8 ($add).
Removed top 4 bits (of 5) from port B of cell arm_core.u_decode.instruction_$add_B_9 ($add).
Removed top 3 bits (of 4) from port B of cell arm_core.u_decode.instruction_$eq_A_106 ($eq).
Removed top 2 bits (of 4) from port B of cell arm_core.u_decode.instruction_$eq_A_107 ($eq).
Removed top 2 bits (of 4) from port B of cell arm_core.u_decode.instruction_$eq_A_108 ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.u_decode.instruction_$eq_A_109 ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.u_decode.instruction_$eq_A_110 ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.u_decode.instruction_$eq_A_111 ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.u_decode.instruction_$eq_A_112 ($eq).
Removed top 3 bits (of 4) from port B of cell arm_core.u_decode.instruction_$eq_A_76 ($eq).
Removed top 2 bits (of 4) from port B of cell arm_core.u_decode.instruction_$eq_A_77 ($eq).
Removed top 2 bits (of 4) from port B of cell arm_core.u_decode.instruction_$eq_A_78 ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.u_decode.instruction_$eq_A_79 ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.u_decode.instruction_$eq_A_80 ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.u_decode.instruction_$eq_A_81 ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.u_decode.instruction_$eq_A_82 ($eq).
Removed top 2 bits (of 5) from port B of cell arm_core.u_decode.instruction_execute_$logic_not_A_Y_$logic_and_A_Y_$logic_or_B_A_$logic_or_Y_A_$eq_Y ($eq).
Removed top 2 bits (of 5) from port B of cell arm_core.u_decode.instruction_execute_$logic_not_A_Y_$logic_and_A_Y_$logic_or_B_A_$logic_or_Y_B_$eq_Y ($eq).
Removed top 1 bits (of 3) from port B of cell arm_core.u_decode.interrupt_$logic_and_B_9_Y_$logic_and_A_Y_$logic_and_A_B_$eq_Y ($eq).
Removed top 25 bits (of 32) from mux cell arm_core.u_decode.mtrans_base_reg_change_$mux_B ($mux).
Removed top 4 bits (of 5) from port B of cell arm_core.u_decode.mtrans_num_registers_$eq_A ($eq).
Removed top 2 bits (of 4) from port B of cell arm_core.u_decode.mtrans_num_registers_$gt_A_1 ($gt).
Removed top 3 bits (of 4) from port B of cell arm_core.u_decode.mtrans_num_registers_$gt_A_5 ($gt).
Removed top 3 bits (of 4) from port B of cell arm_core.u_decode.mtrans_num_registers_$ne_A_1 ($ne).
Removed top 1 bits (of 4) from port B of cell arm_core.u_decode.mtrans_num_registers_$ne_A_2_Y_$logic_and_B_A_$logic_and_Y_A_$eq_Y ($eq).
Removed top 4 bits (of 5) from port B of cell arm_core.u_decode.mtrans_num_registers_$ne_A_3 ($ne).
Removed top 14 bits (of 16) from mux cell arm_core.u_decode.mtrans_reg1_$eq_A_Y_$mux_S ($mux).
Removed top 15 bits (of 16) from port B of cell arm_core.u_decode.mtrans_reg2_mask_$not_A_10_Y_$and_A ($and).
Removed top 15 bits (of 16) from port B of cell arm_core.u_decode.mtrans_reg2_mask_$not_A_11_Y_$and_A ($and).
Removed top 15 bits (of 16) from port B of cell arm_core.u_decode.mtrans_reg2_mask_$not_A_12_Y_$and_A ($and).
Removed top 15 bits (of 16) from port B of cell arm_core.u_decode.mtrans_reg2_mask_$not_A_13_Y_$and_A ($and).
Removed top 14 bits (of 16) from port A of cell arm_core.u_decode.mtrans_reg2_mask_$not_A_14 ($not).
Removed top 15 bits (of 16) from port B of cell arm_core.u_decode.mtrans_reg2_mask_$not_A_14_Y_$and_A ($and).
Removed top 15 bits (of 16) from port B of cell arm_core.u_decode.mtrans_reg2_mask_$not_A_1_Y_$and_A ($and).
Removed top 15 bits (of 16) from port B of cell arm_core.u_decode.mtrans_reg2_mask_$not_A_2_Y_$and_A ($and).
Removed top 15 bits (of 16) from port B of cell arm_core.u_decode.mtrans_reg2_mask_$not_A_3_Y_$and_A ($and).
Removed top 15 bits (of 16) from port B of cell arm_core.u_decode.mtrans_reg2_mask_$not_A_4_Y_$and_A ($and).
Removed top 15 bits (of 16) from port B of cell arm_core.u_decode.mtrans_reg2_mask_$not_A_5_Y_$and_A ($and).
Removed top 15 bits (of 16) from port B of cell arm_core.u_decode.mtrans_reg2_mask_$not_A_6_Y_$and_A ($and).
Removed top 15 bits (of 16) from port B of cell arm_core.u_decode.mtrans_reg2_mask_$not_A_7_Y_$and_A ($and).
Removed top 15 bits (of 16) from port B of cell arm_core.u_decode.mtrans_reg2_mask_$not_A_8_Y_$and_A ($and).
Removed top 15 bits (of 16) from port B of cell arm_core.u_decode.mtrans_reg2_mask_$not_A_9_Y_$and_A ($and).
Removed top 15 bits (of 16) from port B of cell arm_core.u_decode.mtrans_reg2_mask_$not_A_Y_$and_A ($and).
Removed top 1 bits (of 3) from port B of cell arm_core.u_decode.next_interrupt_$eq_A_1 ($eq).
Removed top 2 bits (of 3) from port B of cell arm_core.u_decode.next_interrupt_$eq_A_6 ($eq).
Removed top 3 bits (of 4) from port B of cell arm_core.u_decode.o_condition_$eq_A_2 ($eq).
Removed top 2 bits (of 4) from port B of cell arm_core.u_decode.o_condition_$eq_A_3 ($eq).
Removed top 2 bits (of 4) from port B of cell arm_core.u_decode.o_condition_$eq_A_4 ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.u_decode.o_condition_$eq_A_5 ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.u_decode.o_condition_$eq_A_6 ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.u_decode.o_condition_$eq_A_7 ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.u_decode.o_condition_$eq_A_8 ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.u_decode.opcode_$eq_A_27 ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.u_decode.opcode_$eq_A_29 ($eq).
Removed top 2 bits (of 4) from port B of cell arm_core.u_decode.opcode_$eq_A_30 ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.u_decode.opcode_$eq_A_32 ($eq).
Removed top 2 bits (of 4) from port B of cell arm_core.u_decode.opcode_$eq_A_33 ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.u_decode.opcode_$eq_A_34 ($eq).
Removed top 3 bits (of 4) from port B of cell arm_core.u_decode.opcode_$eq_A_37 ($eq).
Removed top 3 bits (of 4) from port B of cell arm_core.u_decode.rn_sel_nxt_$eq_A_16 ($eq).
Removed top 2 bits (of 4) from port B of cell arm_core.u_decode.rn_sel_nxt_$eq_A_17 ($eq).
Removed top 2 bits (of 4) from port B of cell arm_core.u_decode.rn_sel_nxt_$eq_A_18 ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.u_decode.rn_sel_nxt_$eq_A_19 ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.u_decode.rn_sel_nxt_$eq_A_20 ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.u_decode.rn_sel_nxt_$eq_A_21 ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.u_decode.rn_sel_nxt_$eq_A_22 ($eq).
Removed top 1 bits (of 2) from port B of cell arm_core.u_decode.saved_current_instruction_type_$mux_B_S_$eq_Y ($eq).
Removed top 1 bits (of 2) from port B of cell arm_core.u_decode.status_bits_mode_nxt_$eq_A ($eq).
Removed top 2 bits (of 4) from port B of cell arm_core.u_decode.store_op_$logic_and_B_1_Y_$logic_and_A_B_$eq_Y ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.u_decode.type_$eq_A_14 ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.u_decode.type_$eq_A_15 ($eq).
Removed top 2 bits (of 4) from port B of cell arm_core.u_decode.type_$eq_A_39 ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.u_decode.type_$eq_A_40 ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.$flatten\u_coprocessor.$procmux$8338_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.$flatten\u_coprocessor.$procmux$8339_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.$flatten\u_coprocessor.$procmux$8349_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell arm_core.$flatten\u_coprocessor.$procmux$8357_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell arm_core.$flatten\u_coprocessor.$procmux$8366_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell arm_core.$flatten\u_coprocessor.$procmux$8376_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell arm_core.u_coprocessor.i_copro_crn_$eq_A ($eq).
Removed top 1 bits (of 4) from mux cell arm_core.u_fetch.u_cache.valid_bits_r_$eq_A_2_Y_$mux_S ($mux).
Removed top 6 bits (of 32) from mux cell arm_core.u_execute.i_pc_sel_$eq_A_1_Y_$mux_S ($mux).
Removed top 16 bits (of 32) from mux cell arm_core.$flatten\u_decode.$procmux$3566 ($mux).
Removed top 6 bits (of 32) from mux cell arm_core.u_execute.i_pc_sel_$eq_A_2_Y_$mux_S ($mux).
Removed top 6 bits (of 32) from mux cell arm_core.u_execute.i_pc_sel_$eq_A_3_Y_$mux_S ($mux).
Removed top 1 bits (of 27) from port Y of cell arm_core.u_execute.pc_$sub_A ($sub).
Removed top 1 bits (of 4) from wire arm_core.$auto$rtlil.cc:2464:Mux$9975.
Removed top 1 bits (of 4) from wire arm_core.$auto$rtlil.cc:2464:Mux$9967.
Removed top 2 bits (of 4) from wire arm_core.$auto$rtlil.cc:2464:Mux$9953.
Removed top 14 bits (of 15) from wire arm_core.$auto$rtlil.cc:2464:Mux$9939.
Removed top 12 bits (of 15) from wire arm_core.$auto$rtlil.cc:2464:Mux$9937.
Removed top 10 bits (of 15) from wire arm_core.$auto$rtlil.cc:2464:Mux$9931.
Removed top 8 bits (of 15) from wire arm_core.$auto$rtlil.cc:2464:Mux$9929.
Removed top 6 bits (of 15) from wire arm_core.$auto$rtlil.cc:2464:Mux$9919.
Removed top 4 bits (of 15) from wire arm_core.$auto$rtlil.cc:2464:Mux$9917.
Removed top 2 bits (of 15) from wire arm_core.$auto$rtlil.cc:2464:Mux$9911.
Removed top 1 bits (of 32) from wire arm_core.$auto$rtlil.cc:2464:Mux$9799.
Removed top 1 bits (of 4) from wire arm_core.$flatten\u_decode.$9\mtrans_reg2[3:0].
Removed top 1 bits (of 4) from wire arm_core.$flatten\u_decode.$9\mtrans_reg1[3:0].
Removed top 2 bits (of 4) from wire arm_core.$flatten\u_decode.$9\iaddress_sel_nxt[3:0].
Removed top 1 bits (of 4) from wire arm_core.$flatten\u_decode.$9\daddress_sel_nxt[3:0].
Removed top 1 bits (of 5) from wire arm_core.$flatten\u_decode.$9\control_state_nxt[4:0].
Removed top 1 bits (of 2) from wire arm_core.$flatten\u_decode.$9\alu_cin_sel_nxt[1:0].
Removed top 1 bits (of 3) from wire arm_core.$flatten\u_decode.$8\pc_sel_nxt[2:0].
Removed top 2 bits (of 4) from wire arm_core.$flatten\u_decode.$8\iaddress_sel_nxt[3:0].
Removed top 1 bits (of 4) from wire arm_core.$flatten\u_decode.$8\daddress_sel_nxt[3:0].
Removed top 1 bits (of 5) from wire arm_core.$flatten\u_decode.$8\control_state_nxt[4:0].
Removed top 1 bits (of 2) from wire arm_core.$flatten\u_decode.$8\alu_cin_sel_nxt[1:0].
Removed top 1 bits (of 3) from wire arm_core.$flatten\u_decode.$7\pc_sel_nxt[2:0].
Removed top 1 bits (of 4) from wire arm_core.$flatten\u_decode.$7\mtrans_reg2[3:0].
Removed top 1 bits (of 4) from wire arm_core.$flatten\u_decode.$7\mtrans_reg1[3:0].
Removed top 2 bits (of 4) from wire arm_core.$flatten\u_decode.$7\iaddress_sel_nxt[3:0].
Removed top 1 bits (of 4) from wire arm_core.$flatten\u_decode.$7\daddress_sel_nxt[3:0].
Removed top 1 bits (of 3) from wire arm_core.$flatten\u_decode.$6\pc_sel_nxt[2:0].
Removed top 1 bits (of 2) from wire arm_core.$flatten\u_decode.$6\multiply_function_nxt[1:0].
Removed top 2 bits (of 4) from wire arm_core.$flatten\u_decode.$6\iaddress_sel_nxt[3:0].
Removed top 2 bits (of 4) from wire arm_core.$flatten\u_decode.$6\daddress_sel_nxt[3:0].
Removed top 1 bits (of 5) from wire arm_core.$flatten\u_decode.$6\control_state_nxt[4:0].
Removed top 1 bits (of 3) from wire arm_core.$flatten\u_decode.$5\pc_sel_nxt[2:0].
Removed top 1 bits (of 2) from wire arm_core.$flatten\u_decode.$5\multiply_function_nxt[1:0].
Removed top 1 bits (of 4) from wire arm_core.$flatten\u_decode.$5\mtrans_reg2[3:0].
Removed top 1 bits (of 4) from wire arm_core.$flatten\u_decode.$5\mtrans_reg1[3:0].
Removed top 2 bits (of 4) from wire arm_core.$flatten\u_decode.$5\iaddress_sel_nxt[3:0].
Removed top 1 bits (of 4) from wire arm_core.$flatten\u_decode.$5\daddress_sel_nxt[3:0].
Removed top 1 bits (of 3) from wire arm_core.$flatten\u_decode.$4\pc_sel_nxt[2:0].
Removed top 1 bits (of 2) from wire arm_core.$flatten\u_decode.$4\multiply_function_nxt[1:0].
Removed top 2 bits (of 4) from wire arm_core.$flatten\u_decode.$4\iaddress_sel_nxt[3:0].
Removed top 1 bits (of 4) from wire arm_core.$flatten\u_decode.$4\daddress_sel_nxt[3:0].
Removed top 1 bits (of 2) from wire arm_core.$flatten\u_decode.$4\copro_operation_nxt[1:0].
Removed top 1 bits (of 3) from wire arm_core.$flatten\u_decode.$3\status_bits_sel_nxt[2:0].
Removed top 1 bits (of 2) from wire arm_core.$flatten\u_decode.$3\status_bits_mode_nxt[1:0].
Removed top 2 bits (of 3) from wire arm_core.$flatten\u_decode.$3\reg_write_sel_nxt[2:0].
Removed top 1 bits (of 3) from wire arm_core.$flatten\u_decode.$3\pc_sel_nxt[2:0].
Removed top 1 bits (of 2) from wire arm_core.$flatten\u_decode.$3\multiply_function_nxt[1:0].
Removed top 2 bits (of 4) from wire arm_core.$flatten\u_decode.$3\iaddress_sel_nxt[3:0].
Removed top 1 bits (of 4) from wire arm_core.$flatten\u_decode.$3\daddress_sel_nxt[3:0].
Removed top 1 bits (of 2) from wire arm_core.$flatten\u_decode.$3\copro_operation_nxt[1:0].
Removed top 1 bits (of 2) from wire arm_core.$flatten\u_decode.$3\byte_enable_sel_nxt[1:0].
Removed top 1 bits (of 5) from wire arm_core.$flatten\u_decode.$32\control_state_nxt[4:0].
Removed top 2 bits (of 3) from wire arm_core.$flatten\u_decode.$2\reg_write_sel_nxt[2:0].
Removed top 1 bits (of 3) from wire arm_core.$flatten\u_decode.$2\pc_sel_nxt[2:0].
Removed top 2 bits (of 4) from wire arm_core.$flatten\u_decode.$2\iaddress_sel_nxt[3:0].
Removed top 1 bits (of 4) from wire arm_core.$flatten\u_decode.$2\daddress_sel_nxt[3:0].
Removed top 1 bits (of 2) from wire arm_core.$flatten\u_decode.$2\copro_operation_nxt[1:0].
Removed top 1 bits (of 2) from wire arm_core.$flatten\u_decode.$2\byte_enable_sel_nxt[1:0].
Removed top 3 bits (of 5) from wire arm_core.$flatten\u_decode.$27\control_state_nxt[4:0].
Removed top 1 bits (of 5) from wire arm_core.$flatten\u_decode.$26\control_state_nxt[4:0].
Removed top 1 bits (of 5) from wire arm_core.$flatten\u_decode.$25\control_state_nxt[4:0].
Removed top 1 bits (of 5) from wire arm_core.$flatten\u_decode.$23\control_state_nxt[4:0].
Removed top 3 bits (of 4) from wire arm_core.$flatten\u_decode.$15\mtrans_reg2[3:0].
Removed top 3 bits (of 4) from wire arm_core.$flatten\u_decode.$15\mtrans_reg1[3:0].
Removed top 2 bits (of 4) from wire arm_core.$flatten\u_decode.$15\iaddress_sel_nxt[3:0].
Removed top 3 bits (of 4) from wire arm_core.$flatten\u_decode.$15\alu_out_sel_nxt[3:0].
Removed top 2 bits (of 4) from wire arm_core.$flatten\u_decode.$14\mtrans_reg2[3:0].
Removed top 2 bits (of 4) from wire arm_core.$flatten\u_decode.$14\mtrans_reg1[3:0].
Removed top 2 bits (of 4) from wire arm_core.$flatten\u_decode.$14\iaddress_sel_nxt[3:0].
Removed top 3 bits (of 4) from wire arm_core.$flatten\u_decode.$14\alu_out_sel_nxt[3:0].
Removed top 2 bits (of 4) from wire arm_core.$flatten\u_decode.$13\mtrans_reg2[3:0].
Removed top 2 bits (of 4) from wire arm_core.$flatten\u_decode.$13\mtrans_reg1[3:0].
Removed top 2 bits (of 4) from wire arm_core.$flatten\u_decode.$13\iaddress_sel_nxt[3:0].
Removed top 3 bits (of 4) from wire arm_core.$flatten\u_decode.$13\alu_out_sel_nxt[3:0].
Removed top 1 bits (of 4) from wire arm_core.$flatten\u_decode.$12\mtrans_reg2[3:0].
Removed top 1 bits (of 4) from wire arm_core.$flatten\u_decode.$12\mtrans_reg1[3:0].
Removed top 2 bits (of 4) from wire arm_core.$flatten\u_decode.$12\iaddress_sel_nxt[3:0].
Removed top 1 bits (of 4) from wire arm_core.$flatten\u_decode.$11\mtrans_reg2[3:0].
Removed top 1 bits (of 4) from wire arm_core.$flatten\u_decode.$11\mtrans_reg1[3:0].
Removed top 2 bits (of 4) from wire arm_core.$flatten\u_decode.$11\iaddress_sel_nxt[3:0].
Removed top 1 bits (of 4) from wire arm_core.$flatten\u_decode.$11\daddress_sel_nxt[3:0].
Removed top 1 bits (of 4) from wire arm_core.$flatten\u_decode.$10\mtrans_reg2[3:0].
Removed top 1 bits (of 4) from wire arm_core.$flatten\u_decode.$10\mtrans_reg1[3:0].
Removed top 2 bits (of 4) from wire arm_core.$flatten\u_decode.$10\iaddress_sel_nxt[3:0].
Removed top 1 bits (of 4) from wire arm_core.$flatten\u_decode.$10\daddress_sel_nxt[3:0].
Removed top 28 bits (of 32) from wire arm_core.$flatten\u_fetch.\u_cache.$procmux$8232_Y.
Removed top 2 bits (of 4) from wire arm_core.$flatten\u_fetch.\u_cache.$procmux$8270_Y.
Removed top 28 bits (of 32) from wire arm_core.$flatten\u_mem.\u_dcache.$procmux$8571_Y.
Removed top 2 bits (of 4) from wire arm_core.$flatten\u_mem.\u_dcache.$procmux$8652_Y.
Removed top 3 bits (of 4) from wire arm_core.$flatten\u_mem.\u_dcache.$procmux$8678_Y.
Removed top 1 bits (of 3) from wire arm_core.$flatten\u_wishbone.$procmux$8393_Y.
Removed top 1 bits (of 32) from wire arm_core.copro_write_data.
Removed top 1 bits (of 32) from wire arm_core.dcache_wb_address.
Removed top 2 bits (of 32) from wire arm_core.execute_daddress.
Removed top 1 bits (of 32) from wire arm_core.execute_iaddress.
Removed top 2 bits (of 32) from wire arm_core.icache_wb_address.

21. Executing OPT pass (performing simple optimizations).

21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module arm_core.
<suppressed ~323 debug messages>

21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arm_core'.
<suppressed ~339 debug messages>
Removed a total of 113 cells.

21.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \arm_core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~193 debug messages>

21.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \arm_core.
    New input vector for $reduce_or cell $auto$pmuxtree.cc:37:or_generator$9948: { $auto$rtlil.cc:2398:Or$9921 $auto$rtlil.cc:2398:Or$9913 $flatten\u_execute.\u_register_bank.$procmux$3468_CMP $flatten\u_execute.\u_register_bank.$procmux$3469_CMP $flatten\u_execute.\u_register_bank.$procmux$3472_CMP $flatten\u_execute.\u_register_bank.$procmux$3473_CMP }
    New input vector for $reduce_or cell $auto$pmuxtree.cc:37:or_generator$9852: { $auto$rtlil.cc:2398:Or$9817 $auto$rtlil.cc:2398:Or$9825 $flatten\u_execute.\u_register_bank.$procmux$3434_CMP $flatten\u_execute.\u_register_bank.$procmux$3435_CMP $flatten\u_execute.\u_register_bank.$procmux$3438_CMP $flatten\u_execute.\u_register_bank.$procmux$3439_CMP }
    New input vector for $reduce_or cell $auto$pmuxtree.cc:37:or_generator$9986: { \u_mem.u_dcache.c_state_$eq_A_1_Y \u_mem.u_dcache.c_state_$eq_A_4_Y \u_mem.u_dcache.c_state_$eq_A_5_Y \u_mem.u_dcache.c_state_$eq_A_3_Y \u_mem.u_dcache.ex_read_hit_r_$logic_and_B_A }
    Consolidated identical input bits for $mux cell \u_decode.next_interrupt_$eq_A_6_Y_$mux_S:
      Old ports: A=2'00, B=2'11, Y=\u_decode.next_interrupt_$eq_A_6_Y_$mux_S_Y
      New ports: A=1'0, B=1'1, Y=\u_decode.next_interrupt_$eq_A_6_Y_$mux_S_Y [0]
      New connections: \u_decode.next_interrupt_$eq_A_6_Y_$mux_S_Y [1] = \u_decode.next_interrupt_$eq_A_6_Y_$mux_S_Y [0]
    Consolidated identical input bits for $mux cell \u_decode.instruction_$eq_A_89_Y_$mux_S:
      Old ports: A=15'000000000000000, B=15'100000000000000, Y=\u_decode.instruction_$eq_A_89_Y_$mux_S_Y
      New ports: A=1'0, B=1'1, Y=\u_decode.instruction_$eq_A_89_Y_$mux_S_Y [14]
      New connections: \u_decode.instruction_$eq_A_89_Y_$mux_S_Y [13:0] = 14'00000000000000
    Consolidated identical input bits for $mux cell \u_decode.instruction_$eq_A_44_Y_$mux_S:
      Old ports: A=16'0000000000000001, B=16'1000000000000000, Y=\u_decode.instruction_$eq_A_44_Y_$mux_S_Y
      New ports: A=2'01, B=2'10, Y={ \u_decode.instruction_$eq_A_44_Y_$mux_S_Y [15] \u_decode.instruction_$eq_A_44_Y_$mux_S_Y [0] }
      New connections: \u_decode.instruction_$eq_A_44_Y_$mux_S_Y [14:1] = 14'00000000000000
    Consolidated identical input bits for $mux cell \u_decode.instruction_$eq_A_104_Y_$mux_S:
      Old ports: A=15'000000000000000, B=15'100000000000000, Y=\u_decode.instruction_$eq_A_104_Y_$mux_S_Y
      New ports: A=1'0, B=1'1, Y=\u_decode.instruction_$eq_A_104_Y_$mux_S_Y [14]
      New connections: \u_decode.instruction_$eq_A_104_Y_$mux_S_Y [13:0] = 14'00000000000000
    Consolidated identical input bits for $mux cell \u_decode.imm8_$mux_B:
      Old ports: A={ 2'00 \u_decode.fetch_instruction_r_$mux_B_Y [7:0] 2'00 }, B={ \u_decode.fetch_instruction_r_$mux_B_Y [7:0] 4'0000 }, Y=\u_decode.imm8_$mux_B_Y [11:0]
      New ports: A={ 2'00 \u_decode.fetch_instruction_r_$mux_B_Y [7:0] }, B={ \u_decode.fetch_instruction_r_$mux_B_Y [7:0] 2'00 }, Y=\u_decode.imm8_$mux_B_Y [11:2]
      New connections: \u_decode.imm8_$mux_B_Y [1:0] = 2'00
    Consolidated identical input bits for $mux cell \u_decode.i_fetch_$eq_A_9_Y_$logic_and_A_Y_$mux_S:
      Old ports: A={ 2'00 \u_decode.i_fetch_$eq_A_12_Y_$logic_and_B_Y_$mux_S_Y [0] }, B=3'111, Y=\u_decode.i_fetch_$eq_A_9_Y_$logic_and_A_Y_$mux_S_Y [2:0]
      New ports: A={ 1'0 \u_decode.i_fetch_$eq_A_12_Y_$logic_and_B_Y_$mux_S_Y [0] }, B=2'11, Y=\u_decode.i_fetch_$eq_A_9_Y_$logic_and_A_Y_$mux_S_Y [1:0]
      New connections: \u_decode.i_fetch_$eq_A_9_Y_$logic_and_A_Y_$mux_S_Y [2] = \u_decode.i_fetch_$eq_A_9_Y_$logic_and_A_Y_$mux_S_Y [1]
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$7131:
      Old ports: A=16'0000000000000000, B={ \u_decode.fetch_instruction_r_$mux_B_Y [15] 15'000000000000000 }, Y=$flatten\u_decode.$15\mtrans_instruction_nxt[31:0] [15:0]
      New ports: A=1'0, B=\u_decode.fetch_instruction_r_$mux_B_Y [15], Y=$flatten\u_decode.$15\mtrans_instruction_nxt[31:0] [15]
      New connections: $flatten\u_decode.$15\mtrans_instruction_nxt[31:0] [14:0] = 15'000000000000000
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$6975:
      Old ports: A=2'00, B=2'10, Y=$auto$wreduce.cc:454:run$10032
      New ports: A=1'0, B=1'1, Y=$auto$wreduce.cc:454:run$10032 [1]
      New connections: $auto$wreduce.cc:454:run$10032 [0] = 1'0
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$6809:
      Old ports: A=2'00, B=2'10, Y=$flatten\u_decode.$4\barrel_shift_amount_sel_nxt[1:0]
      New ports: A=1'0, B=1'1, Y=$flatten\u_decode.$4\barrel_shift_amount_sel_nxt[1:0] [1]
      New connections: $flatten\u_decode.$4\barrel_shift_amount_sel_nxt[1:0] [0] = 1'0
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$6799:
      Old ports: A=2'00, B=2'10, Y=$flatten\u_decode.$5\barrel_shift_amount_sel_nxt[1:0]
      New ports: A=1'0, B=1'1, Y=$flatten\u_decode.$5\barrel_shift_amount_sel_nxt[1:0] [1]
      New connections: $flatten\u_decode.$5\barrel_shift_amount_sel_nxt[1:0] [0] = 1'0
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$6769:
      Old ports: A=2'00, B=2'10, Y=$flatten\u_decode.$4\barrel_shift_data_sel_nxt[1:0]
      New ports: A=1'0, B=1'1, Y=$flatten\u_decode.$4\barrel_shift_data_sel_nxt[1:0] [1]
      New connections: $flatten\u_decode.$4\barrel_shift_data_sel_nxt[1:0] [0] = 1'0
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$6762:
      Old ports: A=2'00, B=2'10, Y=$flatten\u_decode.$5\barrel_shift_data_sel_nxt[1:0]
      New ports: A=1'0, B=1'1, Y=$flatten\u_decode.$5\barrel_shift_data_sel_nxt[1:0] [1]
      New connections: $flatten\u_decode.$5\barrel_shift_data_sel_nxt[1:0] [0] = 1'0
    Consolidated identical input bits for $mux cell \u_decode.swi_request_$mux_S:
      Old ports: A=3'000, B=3'111, Y=\u_decode.swi_request_$mux_S_Y
      New ports: A=1'0, B=1'1, Y=\u_decode.swi_request_$mux_S_Y [0]
      New connections: \u_decode.swi_request_$mux_S_Y [2:1] = { \u_decode.swi_request_$mux_S_Y [0] \u_decode.swi_request_$mux_S_Y [0] }
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$6628:
      Old ports: A=2'00, B=2'10, Y=$auto$wreduce.cc:454:run$10019 [1:0]
      New ports: A=1'0, B=1'1, Y=$auto$wreduce.cc:454:run$10019 [1]
      New connections: $auto$wreduce.cc:454:run$10019 [0] = 1'0
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$6465:
      Old ports: A=2'00, B=2'11, Y=$auto$wreduce.cc:454:run$10055 [1:0]
      New ports: A=1'0, B=1'1, Y=$auto$wreduce.cc:454:run$10055 [0]
      New connections: $auto$wreduce.cc:454:run$10055 [1] = $auto$wreduce.cc:454:run$10055 [0]
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$6449:
      Old ports: A=3'100, B=3'001, Y=$auto$wreduce.cc:454:run$10039 [2:0]
      New ports: A=2'10, B=2'01, Y={ $auto$wreduce.cc:454:run$10039 [2] $auto$wreduce.cc:454:run$10039 [0] }
      New connections: $auto$wreduce.cc:454:run$10039 [1] = 1'0
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$6414:
      Old ports: A=2'00, B=2'11, Y=$auto$wreduce.cc:454:run$10020 [1:0]
      New ports: A=1'0, B=1'1, Y=$auto$wreduce.cc:454:run$10020 [0]
      New connections: $auto$wreduce.cc:454:run$10020 [1] = $auto$wreduce.cc:454:run$10020 [0]
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$6398:
      Old ports: A=3'110, B=3'001, Y=$auto$wreduce.cc:454:run$10016 [2:0]
      New ports: A=2'10, B=2'01, Y=$auto$wreduce.cc:454:run$10016 [1:0]
      New connections: $auto$wreduce.cc:454:run$10016 [2] = $auto$wreduce.cc:454:run$10016 [1]
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$6385:
      Old ports: A=3'000, B=3'100, Y=$auto$wreduce.cc:454:run$10009 [2:0]
      New ports: A=1'0, B=1'1, Y=$auto$wreduce.cc:454:run$10009 [2]
      New connections: $auto$wreduce.cc:454:run$10009 [1:0] = 2'00
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$6357:
      Old ports: A=3'000, B=3'100, Y=$auto$wreduce.cc:454:run$10071 [2:0]
      New ports: A=1'0, B=1'1, Y=$auto$wreduce.cc:454:run$10071 [2]
      New connections: $auto$wreduce.cc:454:run$10071 [1:0] = 2'00
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$6313:
      Old ports: A=2'00, B=2'10, Y=$auto$wreduce.cc:454:run$10022 [1:0]
      New ports: A=1'0, B=1'1, Y=$auto$wreduce.cc:454:run$10022 [1]
      New connections: $auto$wreduce.cc:454:run$10022 [0] = 1'0
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$6285:
      Old ports: A=2'00, B=2'11, Y=$auto$wreduce.cc:454:run$10007 [1:0]
      New ports: A=1'0, B=1'1, Y=$auto$wreduce.cc:454:run$10007 [0]
      New connections: $auto$wreduce.cc:454:run$10007 [1] = $auto$wreduce.cc:454:run$10007 [0]
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$6153:
      Old ports: A=2'00, B=2'11, Y=$auto$wreduce.cc:454:run$10033 [1:0]
      New ports: A=1'0, B=1'1, Y=$auto$wreduce.cc:454:run$10033 [0]
      New connections: $auto$wreduce.cc:454:run$10033 [1] = $auto$wreduce.cc:454:run$10033 [0]
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$6121:
      Old ports: A=3'001, B=3'111, Y=$flatten\u_decode.$5\reg_write_sel_nxt[2:0]
      New ports: A=1'0, B=1'1, Y=$flatten\u_decode.$5\reg_write_sel_nxt[2:0] [1]
      New connections: { $flatten\u_decode.$5\reg_write_sel_nxt[2:0] [2] $flatten\u_decode.$5\reg_write_sel_nxt[2:0] [0] } = { $flatten\u_decode.$5\reg_write_sel_nxt[2:0] [1] 1'1 }
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$6084:
      Old ports: A=3'000, B=3'101, Y=$flatten\u_decode.$8\reg_write_sel_nxt[2:0]
      New ports: A=1'0, B=1'1, Y=$flatten\u_decode.$8\reg_write_sel_nxt[2:0] [0]
      New connections: $flatten\u_decode.$8\reg_write_sel_nxt[2:0] [2:1] = { $flatten\u_decode.$8\reg_write_sel_nxt[2:0] [0] 1'0 }
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$5837:
      Old ports: A=2'00, B=2'10, Y=$flatten\u_decode.$7\alu_cin_sel_nxt[1:0]
      New ports: A=1'0, B=1'1, Y=$flatten\u_decode.$7\alu_cin_sel_nxt[1:0] [1]
      New connections: $flatten\u_decode.$7\alu_cin_sel_nxt[1:0] [0] = 1'0
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$5498:
      Old ports: A=4'0000, B=4'1000, Y=$flatten\u_decode.$12\alu_out_sel_nxt[3:0]
      New ports: A=1'0, B=1'1, Y=$flatten\u_decode.$12\alu_out_sel_nxt[3:0] [3]
      New connections: $flatten\u_decode.$12\alu_out_sel_nxt[3:0] [2:0] = 3'000
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$5023:
      Old ports: A=15'000000000000000, B=15'100000000000000, Y=$flatten\u_decode.$6\reg_bank_wen_nxt[14:0]
      New ports: A=1'0, B=1'1, Y=$flatten\u_decode.$6\reg_bank_wen_nxt[14:0] [14]
      New connections: $flatten\u_decode.$6\reg_bank_wen_nxt[14:0] [13:0] = 14'00000000000000
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$4729:
      Old ports: A=4'0100, B=4'1000, Y=$auto$wreduce.cc:454:run$10005 [3:0]
      New ports: A=2'01, B=2'10, Y=$auto$wreduce.cc:454:run$10005 [3:2]
      New connections: $auto$wreduce.cc:454:run$10005 [1:0] = 2'00
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$4372:
      Old ports: A=4'0101, B=4'1000, Y=$auto$wreduce.cc:454:run$10052 [3:0]
      New ports: A=2'01, B=2'10, Y={ $auto$wreduce.cc:454:run$10052 [3] $auto$wreduce.cc:454:run$10052 [0] }
      New connections: $auto$wreduce.cc:454:run$10052 [2:1] = { $auto$wreduce.cc:454:run$10052 [0] 1'0 }
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$4075:
      Old ports: A={ 2'01 $auto$wreduce.cc:454:run$10049 [1:0] }, B=4'1100, Y=$auto$wreduce.cc:454:run$10050 [3:0]
      New ports: A={ 1'0 $auto$wreduce.cc:454:run$10049 [1:0] }, B=3'100, Y={ $auto$wreduce.cc:454:run$10050 [3] $auto$wreduce.cc:454:run$10050 [1:0] }
      New connections: $auto$wreduce.cc:454:run$10050 [2] = 1'1
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$3916:
      Old ports: A=4'0101, B=4'1110, Y=$auto$wreduce.cc:454:run$10042 [3:0]
      New ports: A=2'01, B=2'10, Y=$auto$wreduce.cc:454:run$10042 [1:0]
      New connections: $auto$wreduce.cc:454:run$10042 [3:2] = { $auto$wreduce.cc:454:run$10042 [1] 1'1 }
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$3746:
      Old ports: A=5'01111, B=5'10000, Y=$flatten\u_decode.$35\control_state_nxt[4:0]
      New ports: A=2'01, B=2'10, Y={ $flatten\u_decode.$35\control_state_nxt[4:0] [4] $flatten\u_decode.$35\control_state_nxt[4:0] [0] }
      New connections: $flatten\u_decode.$35\control_state_nxt[4:0] [3:1] = { $flatten\u_decode.$35\control_state_nxt[4:0] [0] $flatten\u_decode.$35\control_state_nxt[4:0] [0] $flatten\u_decode.$35\control_state_nxt[4:0] [0] }
    Consolidated identical input bits for $mux cell \u_execute.status_bits_mode_nxt_$eq_A_2_Y_$mux_S:
      Old ports: A=3'001, B=3'100, Y=\u_execute.status_bits_mode_nxt_$eq_A_2_Y_$mux_S_Y [2:0]
      New ports: A=2'01, B=2'10, Y={ \u_execute.status_bits_mode_nxt_$eq_A_2_Y_$mux_S_Y [2] \u_execute.status_bits_mode_nxt_$eq_A_2_Y_$mux_S_Y [0] }
      New connections: \u_execute.status_bits_mode_nxt_$eq_A_2_Y_$mux_S_Y [1] = 1'0
    Consolidated identical input bits for $mux cell \u_execute.status_bits_mode_nxt_$eq_A_1_Y_$mux_S:
      Old ports: A=\u_execute.status_bits_mode_nxt_$eq_A_2_Y_$mux_S_Y, B=4'0010, Y=\u_execute.status_bits_mode_nxt_$eq_A_1_Y_$mux_S_Y
      New ports: A=\u_execute.status_bits_mode_nxt_$eq_A_2_Y_$mux_S_Y [2:0], B=3'010, Y=\u_execute.status_bits_mode_nxt_$eq_A_1_Y_$mux_S_Y [2:0]
      New connections: \u_execute.status_bits_mode_nxt_$eq_A_1_Y_$mux_S_Y [3] = 1'0
    Consolidated identical input bits for $mux cell \u_execute.status_bits_mode_$eq_A_1_Y_$mux_S:
      Old ports: A=3'001, B=3'100, Y=\u_execute.status_bits_mode_$eq_A_1_Y_$mux_S_Y [2:0]
      New ports: A=2'01, B=2'10, Y={ \u_execute.status_bits_mode_$eq_A_1_Y_$mux_S_Y [2] \u_execute.status_bits_mode_$eq_A_1_Y_$mux_S_Y [0] }
      New connections: \u_execute.status_bits_mode_$eq_A_1_Y_$mux_S_Y [1] = 1'0
    Consolidated identical input bits for $mux cell \u_decode.rn_sel_nxt_$eq_A_29_Y_$mux_S:
      Old ports: A=15'000000000000000, B=15'100000000000000, Y=\u_decode.rn_sel_nxt_$eq_A_29_Y_$mux_S_Y
      New ports: A=1'0, B=1'1, Y=\u_decode.rn_sel_nxt_$eq_A_29_Y_$mux_S_Y [14]
      New connections: \u_decode.rn_sel_nxt_$eq_A_29_Y_$mux_S_Y [13:0] = 14'00000000000000
    Consolidated identical input bits for $mux cell \u_execute.pc_wen_$logic_and_A_Y_$mux_S:
      Old ports: A=\u_execute.alu_out, B={ 6'000000 \u_execute.alu_out [25:2] 2'00 }, Y=\u_execute.alu_out_pc_filtered
      New ports: A={ \u_execute.u_alu.out_sel_$eq_A_1_Y_$mux_S_Y [31:26] \u_execute.u_alu.out_sel_$eq_A_1_Y_$mux_S_Y [1:0] }, B=8'00000000, Y={ \u_execute.alu_out_pc_filtered [31:26] \u_execute.alu_out_pc_filtered [1:0] }
      New connections: \u_execute.alu_out_pc_filtered [25:2] = \u_execute.u_alu.out_sel_$eq_A_1_Y_$mux_S_Y [25:2]
    Consolidated identical input bits for $mux cell \u_execute.i_wb_load_rd_$mux_S:
      Old ports: A=\u_execute.i_wb_load_rd_$eq_A_Y_$mux_S_Y, B={ 24'000000000000000000000000 \u_execute.i_wb_load_rd_$eq_A_Y_$mux_S_Y [7:0] }, Y=\u_execute.i_wb_load_rd_$mux_S_Y
      New ports: A=\u_execute.i_wb_load_rd_$eq_A_Y_$mux_S_Y [31:8], B=24'000000000000000000000000, Y=\u_execute.i_wb_load_rd_$mux_S_Y [31:8]
      New connections: \u_execute.i_wb_load_rd_$mux_S_Y [7:0] = \u_execute.i_wb_load_rd_$eq_A_Y_$mux_S_Y [7:0]
    Consolidated identical input bits for $mux cell \u_execute.i_pc_sel_$eq_A_3_Y_$mux_S:
      Old ports: A=\u_execute.pc_$sub_A_Y [25:0], B={ \u_execute.i_wb_load_rd_$mux_S_Y [25:2] 2'00 }, Y=\u_execute.i_pc_sel_$eq_A_3_Y_$mux_S_Y [25:0]
      New ports: A=\u_execute.pc_$sub_A_Y [25:2], B=\u_execute.i_wb_load_rd_$mux_S_Y [25:2], Y=\u_execute.i_pc_sel_$eq_A_3_Y_$mux_S_Y [25:2]
      New connections: \u_execute.i_pc_sel_$eq_A_3_Y_$mux_S_Y [1:0] = 2'00
    Consolidated identical input bits for $mux cell \u_execute.i_interrupt_vector_sel_$eq_A_6_Y_$mux_S:
      Old ports: A=5'10100, B=5'01000, Y=\u_execute.i_interrupt_vector_sel_$eq_A_6_Y_$mux_S_Y [4:0]
      New ports: A=2'01, B=2'10, Y=\u_execute.i_interrupt_vector_sel_$eq_A_6_Y_$mux_S_Y [3:2]
      New connections: { \u_execute.i_interrupt_vector_sel_$eq_A_6_Y_$mux_S_Y [4] \u_execute.i_interrupt_vector_sel_$eq_A_6_Y_$mux_S_Y [1:0] } = { \u_execute.i_interrupt_vector_sel_$eq_A_6_Y_$mux_S_Y [2] 2'00 }
    Consolidated identical input bits for $mux cell \u_execute.i_interrupt_vector_sel_$eq_A_5_Y_$mux_S:
      Old ports: A=\u_execute.i_interrupt_vector_sel_$eq_A_6_Y_$mux_S_Y, B=4, Y=\u_execute.i_interrupt_vector_sel_$eq_A_5_Y_$mux_S_Y
      New ports: A=\u_execute.i_interrupt_vector_sel_$eq_A_6_Y_$mux_S_Y [4:0], B=5'00100, Y=\u_execute.i_interrupt_vector_sel_$eq_A_5_Y_$mux_S_Y [4:0]
      New connections: \u_execute.i_interrupt_vector_sel_$eq_A_5_Y_$mux_S_Y [31:5] = 27'000000000000000000000000000
    Consolidated identical input bits for $mux cell \u_execute.i_byte_enable_sel_$eq_A_2_Y_$mux_S:
      Old ports: A={ \u_execute.i_rd_use_read_$logic_and_A_Y_$mux_S_Y [7:0] \u_execute.i_rd_use_read_$logic_and_A_Y_$mux_S_Y [7:0] \u_execute.i_rd_use_read_$logic_and_A_Y_$mux_S_Y [7:0] \u_execute.i_rd_use_read_$logic_and_A_Y_$mux_S_Y [7:0] }, B=\u_execute.i_rd_use_read_$logic_and_A_Y_$mux_S_Y, Y=\u_execute.i_byte_enable_sel_$eq_A_2_Y_$mux_S_Y
      New ports: A={ \u_execute.i_rd_use_read_$logic_and_A_Y_$mux_S_Y [7:0] \u_execute.i_rd_use_read_$logic_and_A_Y_$mux_S_Y [7:0] \u_execute.i_rd_use_read_$logic_and_A_Y_$mux_S_Y [7:0] }, B=\u_execute.i_rd_use_read_$logic_and_A_Y_$mux_S_Y [31:8], Y=\u_execute.i_byte_enable_sel_$eq_A_2_Y_$mux_S_Y [31:8]
      New connections: \u_execute.i_byte_enable_sel_$eq_A_2_Y_$mux_S_Y [7:0] = \u_execute.i_rd_use_read_$logic_and_A_Y_$mux_S_Y [7:0]
    Consolidated identical input bits for $mux cell \u_execute.i_byte_enable_sel_$eq_A_1_Y_$mux_S_B_$mux_Y:
      Old ports: A=4'0011, B=4'1100, Y=\u_execute.i_byte_enable_sel_$eq_A_1_Y_$mux_S_B
      New ports: A=2'01, B=2'10, Y={ \u_execute.i_byte_enable_sel_$eq_A_1_Y_$mux_S_B [2] \u_execute.i_byte_enable_sel_$eq_A_1_Y_$mux_S_B [0] }
      New connections: { \u_execute.i_byte_enable_sel_$eq_A_1_Y_$mux_S_B [3] \u_execute.i_byte_enable_sel_$eq_A_1_Y_$mux_S_B [1] } = { \u_execute.i_byte_enable_sel_$eq_A_1_Y_$mux_S_B [2] \u_execute.i_byte_enable_sel_$eq_A_1_Y_$mux_S_B [0] }
    Consolidated identical input bits for $mux cell \u_execute.i_byte_enable_sel_$eq_A_1_Y_$mux_S_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=4'1000, B=4'0100, Y=\u_execute.i_byte_enable_sel_$eq_A_1_Y_$mux_S_A_$mux_Y_A_$mux_Y_A
      New ports: A=2'10, B=2'01, Y=\u_execute.i_byte_enable_sel_$eq_A_1_Y_$mux_S_A_$mux_Y_A_$mux_Y_A [3:2]
      New connections: \u_execute.i_byte_enable_sel_$eq_A_1_Y_$mux_S_A_$mux_Y_A_$mux_Y_A [1:0] = 2'00
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$9798:
      Old ports: A=31'0000000000000000000000000000000, B=31'1000001010101100000001100000000, Y=$auto$wreduce.cc:454:run$10000 [30:0]
      New ports: A=1'0, B=1'1, Y=$auto$wreduce.cc:454:run$10000 [8]
      New connections: { $auto$wreduce.cc:454:run$10000 [30:9] $auto$wreduce.cc:454:run$10000 [7:0] } = { $auto$wreduce.cc:454:run$10000 [8] 5'00000 $auto$wreduce.cc:454:run$10000 [8] 1'0 $auto$wreduce.cc:454:run$10000 [8] 1'0 $auto$wreduce.cc:454:run$10000 [8] 1'0 $auto$wreduce.cc:454:run$10000 [8] $auto$wreduce.cc:454:run$10000 [8] 7'0000000 $auto$wreduce.cc:454:run$10000 [8] 8'00000000 }
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$9910:
      Old ports: A=13'0100000000000, B=13'1000000000000, Y=$auto$wreduce.cc:454:run$9999 [12:0]
      New ports: A=2'01, B=2'10, Y=$auto$wreduce.cc:454:run$9999 [12:11]
      New connections: $auto$wreduce.cc:454:run$9999 [10:0] = 11'00000000000
    Consolidated identical input bits for $mux cell $flatten\u_execute.\u_multiply.$procmux$3413:
      Old ports: A={ \u_execute.u_multiply.product [67:33] 32'x \u_execute.u_multiply.product [0] }, B={ 3'000 \u_execute.u_multiply.product [64:33] \u_execute.u_multiply.i_a_in_$add_B_Y [31:0] 1'0 }, Y=$flatten\u_execute.\u_multiply.$3\product_nxt[67:0]
      New ports: A={ \u_execute.u_multiply.product [67:65] 32'x \u_execute.u_multiply.product [0] }, B={ 3'000 \u_execute.u_multiply.i_a_in_$add_B_Y [31:0] 1'0 }, Y={ $flatten\u_execute.\u_multiply.$3\product_nxt[67:0] [67:65] $flatten\u_execute.\u_multiply.$3\product_nxt[67:0] [32:0] }
      New connections: $flatten\u_execute.\u_multiply.$3\product_nxt[67:0] [64:33] = \u_execute.u_multiply.product [64:33]
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=33'000000000000000000000000000000000, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [0] 32'00000000000000000000000000000000 }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A=1'0, B=\u_execute.barrel_shift_in [0], Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0] = 0
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_in [30] \u_execute.u_barrel_shift.u_shifter_full.i_in [30:0] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] }, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [29] \u_execute.u_barrel_shift.u_shifter_full.i_in [29:0] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:30] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.barrel_shift_in [30:0] \u_execute.barrel_shift_in [31] }, B={ \u_execute.barrel_shift_in [29:0] \u_execute.barrel_shift_in [31:30] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] = \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31]
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] }, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [30] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A=\u_execute.barrel_shift_in [31], B=\u_execute.barrel_shift_in [30], Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0] = { \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] }
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=33'000000000000000000000000000000000, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [31] 32'00000000000000000000000000000000 }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A=1'0, B=\u_execute.barrel_shift_in [31], Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0] = 0
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_quick.i_shift_amount_$eq_A_7_Y_$mux_S:
      Old ports: A={ \u_execute.u_barrel_shift.u_shifter_quick.i_in [2] \u_execute.u_barrel_shift.u_shifter_quick.i_in [2:0] \u_execute.u_barrel_shift.u_shifter_quick.i_in [31:3] }, B={ \u_execute.u_barrel_shift.u_shifter_quick.i_in [1] \u_execute.u_barrel_shift.u_shifter_quick.i_in [1:0] \u_execute.u_barrel_shift.u_shifter_quick.i_in [31:2] }, Y=\u_execute.u_barrel_shift.u_shifter_quick.i_shift_amount_$eq_A_7_Y_$mux_S_Y
      New ports: A={ \u_execute.barrel_shift_in [2:0] \u_execute.barrel_shift_in [31:3] }, B={ \u_execute.barrel_shift_in [1:0] \u_execute.barrel_shift_in [31:2] }, Y=\u_execute.u_barrel_shift.u_shifter_quick.i_shift_amount_$eq_A_7_Y_$mux_S_Y [31:0]
      New connections: \u_execute.u_barrel_shift.u_shifter_quick.i_shift_amount_$eq_A_7_Y_$mux_S_Y [32] = \u_execute.u_barrel_shift.u_shifter_quick.i_shift_amount_$eq_A_7_Y_$mux_S_Y [31]
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_quick.i_shift_amount_$eq_A_5_Y_$mux_S:
      Old ports: A={ \u_execute.u_barrel_shift.u_shifter_quick.i_in [2] \u_execute.u_barrel_shift.u_shifter_quick.i_in [31] \u_execute.u_barrel_shift.u_shifter_quick.i_in [31] \u_execute.u_barrel_shift.u_shifter_quick.i_in [31] \u_execute.u_barrel_shift.u_shifter_quick.i_in [31:3] }, B={ \u_execute.u_barrel_shift.u_shifter_quick.i_in [1] \u_execute.u_barrel_shift.u_shifter_quick.i_in [31] \u_execute.u_barrel_shift.u_shifter_quick.i_in [31] \u_execute.u_barrel_shift.u_shifter_quick.i_in [31:2] }, Y=\u_execute.u_barrel_shift.u_shifter_quick.i_shift_amount_$eq_A_5_Y_$mux_S_Y
      New ports: A={ \u_execute.barrel_shift_in [2] \u_execute.barrel_shift_in [31:3] }, B={ \u_execute.barrel_shift_in [1] \u_execute.barrel_shift_in [30:2] }, Y={ \u_execute.u_barrel_shift.u_shifter_quick.i_shift_amount_$eq_A_5_Y_$mux_S_Y [32] \u_execute.u_barrel_shift.u_shifter_quick.i_shift_amount_$eq_A_5_Y_$mux_S_Y [28:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_quick.i_shift_amount_$eq_A_5_Y_$mux_S_Y [31:29] = { \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] }
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_quick.i_shift_amount_$eq_A_3_Y_$mux_S:
      Old ports: A={ \u_execute.u_barrel_shift.u_shifter_quick.i_in [2] 3'000 \u_execute.u_barrel_shift.u_shifter_quick.i_in [31:3] }, B={ \u_execute.u_barrel_shift.u_shifter_quick.i_in [1] 2'00 \u_execute.u_barrel_shift.u_shifter_quick.i_in [31:2] }, Y=\u_execute.u_barrel_shift.u_shifter_quick.i_shift_amount_$eq_A_3_Y_$mux_S_Y
      New ports: A={ \u_execute.barrel_shift_in [2] 1'0 \u_execute.barrel_shift_in [31:3] }, B={ \u_execute.barrel_shift_in [1] \u_execute.barrel_shift_in [31:2] }, Y={ \u_execute.u_barrel_shift.u_shifter_quick.i_shift_amount_$eq_A_3_Y_$mux_S_Y [32] \u_execute.u_barrel_shift.u_shifter_quick.i_shift_amount_$eq_A_3_Y_$mux_S_Y [29:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_quick.i_shift_amount_$eq_A_3_Y_$mux_S_Y [31:30] = 2'00
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_quick.i_shift_amount_$eq_A_1_Y_$mux_S:
      Old ports: A={ \u_execute.u_barrel_shift.u_shifter_quick.i_in [29:0] 3'000 }, B={ \u_execute.u_barrel_shift.u_shifter_quick.i_in [30:0] 2'00 }, Y=\u_execute.u_barrel_shift.u_shifter_quick.i_shift_amount_$eq_A_1_Y_$mux_S_Y
      New ports: A={ \u_execute.barrel_shift_in [29:0] 1'0 }, B=\u_execute.barrel_shift_in [30:0], Y=\u_execute.u_barrel_shift.u_shifter_quick.i_shift_amount_$eq_A_1_Y_$mux_S_Y [32:2]
      New connections: \u_execute.u_barrel_shift.u_shifter_quick.i_shift_amount_$eq_A_1_Y_$mux_S_Y [1:0] = 2'00
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$9966:
      Old ports: A=3'100, B=3'010, Y=$auto$wreduce.cc:454:run$9991 [2:0]
      New ports: A=2'10, B=2'01, Y=$auto$wreduce.cc:454:run$9991 [2:1]
      New connections: $auto$wreduce.cc:454:run$9991 [0] = 1'0
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$9942:
      Old ports: A=$auto$wreduce.cc:454:run$9993, B=$auto$wreduce.cc:454:run$9994, Y=$auto$rtlil.cc:2464:Mux$9943
      New ports: A={ 2'00 $flatten\u_execute.\u_register_bank.$procmux$3480_CMP }, B=$auto$wreduce.cc:454:run$9994 [2:0], Y=$auto$rtlil.cc:2464:Mux$9943 [2:0]
      New connections: $auto$rtlil.cc:2464:Mux$9943 [14:3] = 12'000000000000
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$9922:
      Old ports: A=$auto$wreduce.cc:454:run$9997, B=$auto$wreduce.cc:454:run$9998, Y=$auto$rtlil.cc:2464:Mux$9923
      New ports: A={ 2'00 $auto$wreduce.cc:454:run$9997 [8:0] }, B=$auto$wreduce.cc:454:run$9998 [10:0], Y=$auto$rtlil.cc:2464:Mux$9923 [10:0]
      New connections: $auto$rtlil.cc:2464:Mux$9923 [14:11] = 4'0000
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$9930:
      Old ports: A=5'01000, B=5'10000, Y=$auto$wreduce.cc:454:run$9995 [4:0]
      New ports: A=2'01, B=2'10, Y=$auto$wreduce.cc:454:run$9995 [4:3]
      New connections: $auto$wreduce.cc:454:run$9995 [2:0] = 3'000
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$9974:
      Old ports: A=3'100, B=3'001, Y=$auto$wreduce.cc:454:run$9990 [2:0]
      New ports: A=2'10, B=2'01, Y={ $auto$wreduce.cc:454:run$9990 [2] $auto$wreduce.cc:454:run$9990 [0] }
      New connections: $auto$wreduce.cc:454:run$9990 [1] = 1'0
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$9976:
      Old ports: A=$auto$wreduce.cc:454:run$9990, B=4'0001, Y=$auto$rtlil.cc:2464:Mux$9977
      New ports: A=$auto$wreduce.cc:454:run$9990 [2:0], B=3'001, Y=$auto$rtlil.cc:2464:Mux$9977 [2:0]
      New connections: $auto$rtlil.cc:2464:Mux$9977 [3] = 1'0
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$9978:
      Old ports: A=4'0011, B=4'0001, Y=$auto$rtlil.cc:2464:Mux$9979
      New ports: A=1'1, B=1'0, Y=$auto$rtlil.cc:2464:Mux$9979 [1]
      New connections: { $auto$rtlil.cc:2464:Mux$9979 [3:2] $auto$rtlil.cc:2464:Mux$9979 [0] } = 3'001
    Consolidated identical input bits for $mux cell \u_decode.use_pre_fetch_instruction_$mux_S:
      Old ports: A=2'00, B=2'10, Y=\u_decode.use_pre_fetch_instruction_$mux_S_Y
      New ports: A=1'0, B=1'1, Y=\u_decode.use_pre_fetch_instruction_$mux_S_Y [1]
      New connections: \u_decode.use_pre_fetch_instruction_$mux_S_Y [0] = 1'0
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$9918:
      Old ports: A=9'010000000, B=9'100000000, Y=$auto$wreduce.cc:454:run$9997 [8:0]
      New ports: A=2'01, B=2'10, Y=$auto$wreduce.cc:454:run$9997 [8:7]
      New connections: $auto$wreduce.cc:454:run$9997 [6:0] = 7'0000000
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$9934:
      Old ports: A=$auto$wreduce.cc:454:run$9995, B=$auto$wreduce.cc:454:run$9996, Y=$auto$rtlil.cc:2464:Mux$9935
      New ports: A={ 2'00 $auto$wreduce.cc:454:run$9995 [4:0] }, B=$auto$wreduce.cc:454:run$9996 [6:0], Y=$auto$rtlil.cc:2464:Mux$9935 [6:0]
      New connections: $auto$rtlil.cc:2464:Mux$9935 [14:7] = 8'00000000
    Consolidated identical input bits for $mux cell \u_fetch.u_cache.valid_bits_r_$eq_A_3_Y_$mux_S_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_fetch.u_cache.valid_bits_r_$eq_A_3_Y_$mux_S_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B=4'0001, Y=\u_fetch.u_cache.valid_bits_r_$eq_A_3_Y_$mux_S_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A=\u_fetch.u_cache.valid_bits_r_$eq_A_3_Y_$mux_S_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [1:0], B=2'01, Y=\u_fetch.u_cache.valid_bits_r_$eq_A_3_Y_$mux_S_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [1:0]
      New connections: \u_fetch.u_cache.valid_bits_r_$eq_A_3_Y_$mux_S_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [3:2] = 2'00
    Consolidated identical input bits for $mux cell \u_mem.i_byte_enable_$mux_B:
      Old ports: A={ \u_mem.i_byte_enable 12'000000000000 }, B={ 4'0000 \u_mem.i_byte_enable 8'00000000 }, Y=\u_mem.i_byte_enable_$mux_B_Y
      New ports: A={ \u_execute.o_byte_enable 4'0000 }, B={ 4'0000 \u_execute.o_byte_enable }, Y=\u_mem.i_byte_enable_$mux_B_Y [15:8]
      New connections: \u_mem.i_byte_enable_$mux_B_Y [7:0] = 8'00000000
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$9908:
      Old ports: A=15'010000000000000, B=15'100000000000000, Y=$auto$rtlil.cc:2464:Mux$9909
      New ports: A=2'01, B=2'10, Y=$auto$rtlil.cc:2464:Mux$9909 [14:13]
      New connections: $auto$rtlil.cc:2464:Mux$9909 [12:0] = 13'0000000000000
    Consolidated identical input bits for $mux cell $flatten\u_mem.\u_dcache.$procmux$8648:
      Old ports: A=4'0010, B=4'1000, Y=$flatten\u_mem.\u_dcache.$procmux$8648_Y
      New ports: A=2'01, B=2'10, Y={ $flatten\u_mem.\u_dcache.$procmux$8648_Y [3] $flatten\u_mem.\u_dcache.$procmux$8648_Y [1] }
      New connections: { $flatten\u_mem.\u_dcache.$procmux$8648_Y [2] $flatten\u_mem.\u_dcache.$procmux$8648_Y [0] } = 2'00
    Consolidated identical input bits for $mux cell $flatten\u_mem.\u_dcache.$procmux$8680:
      Old ports: A=4'0111, B=$auto$wreduce.cc:454:run$10080, Y=$flatten\u_mem.\u_dcache.$procmux$8680_Y
      New ports: A=2'11, B=$auto$wreduce.cc:454:run$10080 [1:0], Y=$flatten\u_mem.\u_dcache.$procmux$8680_Y [1:0]
      New connections: $flatten\u_mem.\u_dcache.$procmux$8680_Y [3:2] = 2'01
    Consolidated identical input bits for $mux cell \u_mem.u_dcache.con_write_data_word_$mux_B:
      Old ports: A={ \u_mem.u_dcache.con_write_data_word \u_mem.u_dcache.data_wdata_r [95:0] }, B={ \u_mem.u_dcache.data_wdata_r [127:96] \u_mem.u_dcache.con_write_data_word \u_mem.u_dcache.data_wdata_r [63:0] }, Y=\u_mem.u_dcache.con_write_data_word_$mux_B_Y
      New ports: A={ \u_mem.u_dcache.con_write_data_word \u_mem.u_dcache.data_wdata_r [95:64] }, B={ \u_mem.u_dcache.data_wdata_r [127:96] \u_mem.u_dcache.con_write_data_word }, Y=\u_mem.u_dcache.con_write_data_word_$mux_B_Y [127:64]
      New connections: \u_mem.u_dcache.con_write_data_word_$mux_B_Y [63:0] = \u_mem.u_dcache.data_wdata_r [63:0]
    Consolidated identical input bits for $mux cell \u_mem.u_dcache.valid_bits_r_$eq_A_3_Y_$mux_S_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_mem.u_dcache.valid_bits_r_$eq_A_3_Y_$mux_S_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B=4'1000, Y=\u_mem.u_dcache.valid_bits_r_$eq_A_3_Y_$mux_S_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ 1'0 \u_mem.u_dcache.valid_bits_r_$eq_A_3_Y_$mux_S_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [1:0] }, B=3'100, Y={ \u_mem.u_dcache.valid_bits_r_$eq_A_3_Y_$mux_S_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [3] \u_mem.u_dcache.valid_bits_r_$eq_A_3_Y_$mux_S_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [1:0] }
      New connections: \u_mem.u_dcache.valid_bits_r_$eq_A_3_Y_$mux_S_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [2] = 1'0
    Consolidated identical input bits for $mux cell \u_mem.u_dcache.write_data_word_$mux_B:
      Old ports: A={ \u_mem.u_dcache.i_byte_enable_$eq_A_6_Y_$mux_S_Y \u_mem.u_dcache.data_hit_way_$mux_S_3_Y [95:0] }, B={ \u_mem.u_dcache.data_hit_way_$mux_S_3_Y [127:96] \u_mem.u_dcache.i_byte_enable_$eq_A_6_Y_$mux_S_Y \u_mem.u_dcache.data_hit_way_$mux_S_3_Y [63:0] }, Y=\u_mem.u_dcache.write_data_word_$mux_B_Y
      New ports: A={ \u_mem.u_dcache.i_byte_enable_$eq_A_6_Y_$mux_S_Y \u_mem.u_dcache.data_hit_way_$mux_S_3_Y [95:64] }, B={ \u_mem.u_dcache.data_hit_way_$mux_S_3_Y [127:96] \u_mem.u_dcache.i_byte_enable_$eq_A_6_Y_$mux_S_Y }, Y=\u_mem.u_dcache.write_data_word_$mux_B_Y [127:64]
      New connections: \u_mem.u_dcache.write_data_word_$mux_B_Y [63:0] = \u_mem.u_dcache.data_hit_way_$mux_S_3_Y [63:0]
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$9956:
      Old ports: A=4'1000, B=4'0101, Y=$auto$rtlil.cc:2464:Mux$9957
      New ports: A=2'10, B=2'01, Y={ $auto$rtlil.cc:2464:Mux$9957 [3] $auto$rtlil.cc:2464:Mux$9957 [0] }
      New connections: $auto$rtlil.cc:2464:Mux$9957 [2:1] = { $auto$rtlil.cc:2464:Mux$9957 [0] 1'0 }
    Consolidated identical input bits for $mux cell $flatten\u_wishbone.$procmux$8390:
      Old ports: A=3'000, B=3'100, Y=$flatten\u_wishbone.$procmux$8390_Y
      New ports: A=1'0, B=1'1, Y=$flatten\u_wishbone.$procmux$8390_Y [2]
      New connections: $flatten\u_wishbone.$procmux$8390_Y [1:0] = 2'00
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$9954:
      Old ports: A=4'1000, B=4'0001, Y=$auto$rtlil.cc:2464:Mux$9955
      New ports: A=2'10, B=2'01, Y={ $auto$rtlil.cc:2464:Mux$9955 [3] $auto$rtlil.cc:2464:Mux$9955 [0] }
      New connections: $auto$rtlil.cc:2464:Mux$9955 [2:1] = 2'00
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$9936:
      Old ports: A=3'010, B=3'100, Y=$auto$wreduce.cc:454:run$9994 [2:0]
      New ports: A=2'01, B=2'10, Y=$auto$wreduce.cc:454:run$9994 [2:1]
      New connections: $auto$wreduce.cc:454:run$9994 [0] = 1'0
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$9928:
      Old ports: A=7'0100000, B=7'1000000, Y=$auto$wreduce.cc:454:run$9996 [6:0]
      New ports: A=2'01, B=2'10, Y=$auto$wreduce.cc:454:run$9996 [6:5]
      New connections: $auto$wreduce.cc:454:run$9996 [4:0] = 5'00000
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$9916:
      Old ports: A=11'01000000000, B=11'10000000000, Y=$auto$wreduce.cc:454:run$9998 [10:0]
      New ports: A=2'01, B=2'10, Y=$auto$wreduce.cc:454:run$9998 [10:9]
      New connections: $auto$wreduce.cc:454:run$9998 [8:0] = 9'000000000
  Optimizing cells in module \arm_core.
    Consolidated identical input bits for $mux cell \u_decode.next_interrupt_$eq_A_5_Y_$mux_S:
      Old ports: A=\u_decode.next_interrupt_$eq_A_6_Y_$mux_S_Y, B=2'11, Y=\u_decode.next_interrupt_$eq_A_5_Y_$mux_S_Y
      New ports: A=\u_decode.next_interrupt_$eq_A_6_Y_$mux_S_Y [0], B=1'1, Y=\u_decode.next_interrupt_$eq_A_5_Y_$mux_S_Y [0]
      New connections: \u_decode.next_interrupt_$eq_A_5_Y_$mux_S_Y [1] = \u_decode.next_interrupt_$eq_A_5_Y_$mux_S_Y [0]
    Consolidated identical input bits for $mux cell \u_decode.instruction_$eq_A_88_Y_$mux_S:
      Old ports: A=\u_decode.instruction_$eq_A_89_Y_$mux_S_Y, B=15'010000000000000, Y=\u_decode.instruction_$eq_A_88_Y_$mux_S_Y
      New ports: A={ \u_decode.instruction_$eq_A_89_Y_$mux_S_Y [14] 1'0 }, B=2'01, Y=\u_decode.instruction_$eq_A_88_Y_$mux_S_Y [14:13]
      New connections: \u_decode.instruction_$eq_A_88_Y_$mux_S_Y [12:0] = 13'0000000000000
    Consolidated identical input bits for $mux cell \u_decode.instruction_$eq_A_58_Y_$mux_S:
      Old ports: A=\u_decode.instruction_$eq_A_104_Y_$mux_S_Y, B=15'010000000000000, Y=\u_decode.instruction_$eq_A_58_Y_$mux_S_Y
      New ports: A={ \u_decode.instruction_$eq_A_104_Y_$mux_S_Y [14] 1'0 }, B=2'01, Y=\u_decode.instruction_$eq_A_58_Y_$mux_S_Y [14:13]
      New connections: \u_decode.instruction_$eq_A_58_Y_$mux_S_Y [12:0] = 13'0000000000000
    Consolidated identical input bits for $mux cell \u_decode.instruction_$eq_A_43_Y_$mux_S:
      Old ports: A=\u_decode.instruction_$eq_A_44_Y_$mux_S_Y, B=16'0100000000000000, Y=\u_decode.instruction_$eq_A_43_Y_$mux_S_Y
      New ports: A={ \u_decode.instruction_$eq_A_44_Y_$mux_S_Y [15] 1'0 \u_decode.instruction_$eq_A_44_Y_$mux_S_Y [0] }, B=3'010, Y={ \u_decode.instruction_$eq_A_43_Y_$mux_S_Y [15:14] \u_decode.instruction_$eq_A_43_Y_$mux_S_Y [0] }
      New connections: \u_decode.instruction_$eq_A_43_Y_$mux_S_Y [13:1] = 13'0000000000000
    Consolidated identical input bits for $mux cell \u_decode.imm8_$mux_B_1:
      Old ports: A={ 2'00 \u_decode.imm8_$mux_B_Y [11:0] }, B={ \u_decode.fetch_instruction_r_$mux_B_Y [7:0] 6'000000 }, Y=\u_decode.imm8_$mux_B_1_Y [13:0]
      New ports: A={ 2'00 \u_decode.imm8_$mux_B_Y [11:2] }, B={ \u_decode.fetch_instruction_r_$mux_B_Y [7:0] 4'0000 }, Y=\u_decode.imm8_$mux_B_1_Y [13:2]
      New connections: \u_decode.imm8_$mux_B_1_Y [1:0] = 2'00
    Consolidated identical input bits for $mux cell \u_decode.i_fetch_$eq_A_8_Y_$mux_S:
      Old ports: A=\u_decode.i_fetch_$eq_A_9_Y_$logic_and_A_Y_$mux_S_Y [2:0], B=3'110, Y=\u_decode.i_fetch_$eq_A_8_Y_$mux_S_Y [2:0]
      New ports: A=\u_decode.i_fetch_$eq_A_9_Y_$logic_and_A_Y_$mux_S_Y [1:0], B=2'10, Y=\u_decode.i_fetch_$eq_A_8_Y_$mux_S_Y [1:0]
      New connections: \u_decode.i_fetch_$eq_A_8_Y_$mux_S_Y [2] = \u_decode.i_fetch_$eq_A_8_Y_$mux_S_Y [1]
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$7176:
      Old ports: A=$flatten\u_decode.$15\mtrans_instruction_nxt[31:0] [15:0], B={ \u_decode.fetch_instruction_r_$mux_B_Y [15:14] 14'00000000000000 }, Y=$flatten\u_decode.$14\mtrans_instruction_nxt[31:0] [15:0]
      New ports: A={ $flatten\u_decode.$15\mtrans_instruction_nxt[31:0] [15] 1'0 }, B=\u_decode.fetch_instruction_r_$mux_B_Y [15:14], Y=$flatten\u_decode.$14\mtrans_instruction_nxt[31:0] [15:14]
      New connections: $flatten\u_decode.$14\mtrans_instruction_nxt[31:0] [13:0] = 14'00000000000000
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$6781:
      Old ports: A=$flatten\u_decode.$4\barrel_shift_data_sel_nxt[1:0], B=2'10, Y=$flatten\u_decode.$3\barrel_shift_data_sel_nxt[1:0]
      New ports: A=$flatten\u_decode.$4\barrel_shift_data_sel_nxt[1:0] [1], B=1'1, Y=$flatten\u_decode.$3\barrel_shift_data_sel_nxt[1:0] [1]
      New connections: $flatten\u_decode.$3\barrel_shift_data_sel_nxt[1:0] [0] = 1'0
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$6495:
      Old ports: A=$auto$wreduce.cc:454:run$10055 [1:0], B=2'11, Y=$auto$wreduce.cc:454:run$10059 [1:0]
      New ports: A=$auto$wreduce.cc:454:run$10055 [0], B=1'1, Y=$auto$wreduce.cc:454:run$10059 [0]
      New connections: $auto$wreduce.cc:454:run$10059 [1] = $auto$wreduce.cc:454:run$10059 [0]
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$6369:
      Old ports: A=$auto$wreduce.cc:454:run$10071 [2:0], B=3'101, Y=$auto$wreduce.cc:454:run$10075 [2:0]
      New ports: A={ $auto$wreduce.cc:454:run$10071 [2] 1'0 }, B=2'11, Y={ $auto$wreduce.cc:454:run$10075 [2] $auto$wreduce.cc:454:run$10075 [0] }
      New connections: $auto$wreduce.cc:454:run$10075 [1] = 1'0
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$6297:
      Old ports: A=$auto$wreduce.cc:454:run$10007 [1:0], B=2'11, Y=$auto$wreduce.cc:454:run$10012 [1:0]
      New ports: A=$auto$wreduce.cc:454:run$10007 [0], B=1'1, Y=$auto$wreduce.cc:454:run$10012 [0]
      New connections: $auto$wreduce.cc:454:run$10012 [1] = $auto$wreduce.cc:454:run$10012 [0]
    Consolidated identical input bits for $mux cell \u_decode.swi_request_$mux_S_Y_$mux_A:
      Old ports: A=\u_decode.swi_request_$mux_S_Y, B=3'110, Y=\u_decode.instruction_iabt_$mux_S_A
      New ports: A={ \u_decode.swi_request_$mux_S_Y [0] \u_decode.swi_request_$mux_S_Y [0] }, B=2'10, Y=\u_decode.instruction_iabt_$mux_S_A [1:0]
      New connections: \u_decode.instruction_iabt_$mux_S_A [2] = \u_decode.instruction_iabt_$mux_S_A [1]
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$6162:
      Old ports: A=$auto$wreduce.cc:454:run$10033, B=3'100, Y=$flatten\u_decode.$2\status_bits_sel_nxt[2:0]
      New ports: A={ 1'0 $auto$wreduce.cc:454:run$10033 [0] }, B=2'10, Y={ $flatten\u_decode.$2\status_bits_sel_nxt[2:0] [2] $flatten\u_decode.$2\status_bits_sel_nxt[2:0] [0] }
      New connections: $flatten\u_decode.$2\status_bits_sel_nxt[2:0] [1] = $flatten\u_decode.$2\status_bits_sel_nxt[2:0] [0]
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$6099:
      Old ports: A=$flatten\u_decode.$8\reg_write_sel_nxt[2:0], B=3'010, Y=$flatten\u_decode.$7\reg_write_sel_nxt[2:0]
      New ports: A={ 1'0 $flatten\u_decode.$8\reg_write_sel_nxt[2:0] [0] }, B=2'10, Y=$flatten\u_decode.$7\reg_write_sel_nxt[2:0] [1:0]
      New connections: $flatten\u_decode.$7\reg_write_sel_nxt[2:0] [2] = $flatten\u_decode.$7\reg_write_sel_nxt[2:0] [0]
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$5534:
      Old ports: A=$flatten\u_decode.$12\alu_out_sel_nxt[3:0], B=4'0111, Y=$flatten\u_decode.$11\alu_out_sel_nxt[3:0]
      New ports: A={ $flatten\u_decode.$12\alu_out_sel_nxt[3:0] [3] 1'0 }, B=2'01, Y={ $flatten\u_decode.$11\alu_out_sel_nxt[3:0] [3] $flatten\u_decode.$11\alu_out_sel_nxt[3:0] [0] }
      New connections: $flatten\u_decode.$11\alu_out_sel_nxt[3:0] [2:1] = { $flatten\u_decode.$11\alu_out_sel_nxt[3:0] [0] $flatten\u_decode.$11\alu_out_sel_nxt[3:0] [0] }
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$4756:
      Old ports: A=$auto$wreduce.cc:454:run$10005 [3:0], B=4'0110, Y=$auto$wreduce.cc:454:run$10010 [3:0]
      New ports: A={ $auto$wreduce.cc:454:run$10005 [3:2] 1'0 }, B=3'011, Y=$auto$wreduce.cc:454:run$10010 [3:1]
      New connections: $auto$wreduce.cc:454:run$10010 [0] = 1'0
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$3861:
      Old ports: A=5'01111, B=$flatten\u_decode.$34\control_state_nxt[4:0], Y=$flatten\u_decode.$33\control_state_nxt[4:0]
      New ports: A=2'01, B={ $flatten\u_decode.$35\control_state_nxt[4:0] [4] $flatten\u_decode.$35\control_state_nxt[4:0] [0] }, Y={ $flatten\u_decode.$33\control_state_nxt[4:0] [4] $flatten\u_decode.$33\control_state_nxt[4:0] [0] }
      New connections: $flatten\u_decode.$33\control_state_nxt[4:0] [3:1] = { $flatten\u_decode.$33\control_state_nxt[4:0] [0] $flatten\u_decode.$33\control_state_nxt[4:0] [0] $flatten\u_decode.$33\control_state_nxt[4:0] [0] }
    Consolidated identical input bits for $mux cell \u_decode.rn_sel_nxt_$eq_A_28_Y_$mux_S:
      Old ports: A=\u_decode.rn_sel_nxt_$eq_A_29_Y_$mux_S_Y, B=15'010000000000000, Y=\u_decode.rn_sel_nxt_$eq_A_28_Y_$mux_S_Y
      New ports: A={ \u_decode.rn_sel_nxt_$eq_A_29_Y_$mux_S_Y [14] 1'0 }, B=2'01, Y=\u_decode.rn_sel_nxt_$eq_A_28_Y_$mux_S_Y [14:13]
      New connections: \u_decode.rn_sel_nxt_$eq_A_28_Y_$mux_S_Y [12:0] = 13'0000000000000
    Consolidated identical input bits for $mux cell \u_execute.i_interrupt_vector_sel_$eq_A_5_Y_$mux_S:
      Old ports: A=\u_execute.i_interrupt_vector_sel_$eq_A_6_Y_$mux_S_Y [4:0], B=5'00100, Y=\u_execute.i_interrupt_vector_sel_$eq_A_5_Y_$mux_S_Y [4:0]
      New ports: A={ \u_execute.i_interrupt_vector_sel_$eq_A_6_Y_$mux_S_Y [2] \u_execute.i_interrupt_vector_sel_$eq_A_6_Y_$mux_S_Y [3:2] }, B=3'001, Y=\u_execute.i_interrupt_vector_sel_$eq_A_5_Y_$mux_S_Y [4:2]
      New connections: \u_execute.i_interrupt_vector_sel_$eq_A_5_Y_$mux_S_Y [1:0] = 2'00
    Consolidated identical input bits for $mux cell \u_execute.i_interrupt_vector_sel_$eq_A_4_Y_$mux_S:
      Old ports: A=\u_execute.i_interrupt_vector_sel_$eq_A_5_Y_$mux_S_Y, B=12, Y=\u_execute.i_interrupt_vector_sel_$eq_A_4_Y_$mux_S_Y
      New ports: A=\u_execute.i_interrupt_vector_sel_$eq_A_5_Y_$mux_S_Y [4:0], B=5'01100, Y=\u_execute.i_interrupt_vector_sel_$eq_A_4_Y_$mux_S_Y [4:0]
      New connections: \u_execute.i_interrupt_vector_sel_$eq_A_4_Y_$mux_S_Y [31:5] = 27'000000000000000000000000000
    Consolidated identical input bits for $mux cell \u_execute.i_byte_enable_sel_$eq_A_1_Y_$mux_S_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.i_byte_enable_sel_$eq_A_1_Y_$mux_S_A_$mux_Y_A_$mux_Y_A, B=4'0010, Y=\u_execute.i_byte_enable_sel_$eq_A_1_Y_$mux_S_A_$mux_Y_A
      New ports: A={ \u_execute.i_byte_enable_sel_$eq_A_1_Y_$mux_S_A_$mux_Y_A_$mux_Y_A [3:2] 1'0 }, B=3'001, Y=\u_execute.i_byte_enable_sel_$eq_A_1_Y_$mux_S_A_$mux_Y_A [3:1]
      New connections: \u_execute.i_byte_enable_sel_$eq_A_1_Y_$mux_S_A_$mux_Y_A [0] = 1'0
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [1:0] 31'0000000000000000000000000000000 }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] 1'0 }, B=\u_execute.barrel_shift_in [1:0], Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:31]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [30:0] = 31'0000000000000000000000000000000
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [28] \u_execute.u_barrel_shift.u_shifter_full.i_in [28:0] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:29] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0], B={ \u_execute.barrel_shift_in [28:0] \u_execute.barrel_shift_in [31:29] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] = \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31]
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [29] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:30] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.barrel_shift_in [31] }, B={ \u_execute.barrel_shift_in [29] \u_execute.barrel_shift_in [30] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:1] = { \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] }
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [30] 31'0000000000000000000000000000000 \u_execute.u_barrel_shift.u_shifter_full.i_in [31] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] 1'0 }, B={ \u_execute.barrel_shift_in [30] \u_execute.barrel_shift_in [31] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:1] = 31'0000000000000000000000000000000
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_quick.i_carry_in_$mux_B_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_quick.i_shift_amount_$eq_A_1_Y_$mux_S_Y, B={ \u_execute.u_barrel_shift.u_shifter_quick.i_in 1'0 }, Y=\u_execute.u_barrel_shift.u_shifter_quick.i_carry_in_$mux_B_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_quick.i_shift_amount_$eq_A_1_Y_$mux_S_Y [32:2] 1'0 }, B=\u_execute.barrel_shift_in, Y=\u_execute.u_barrel_shift.u_shifter_quick.i_carry_in_$mux_B_A [32:1]
      New connections: \u_execute.u_barrel_shift.u_shifter_quick.i_carry_in_$mux_B_A [0] = 1'0
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_quick.i_carry_in_$mux_B_3_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_quick.i_shift_amount_$eq_A_7_Y_$mux_S_Y, B={ \u_execute.u_barrel_shift.u_shifter_quick.i_in [0] \u_execute.u_barrel_shift.u_shifter_quick.i_in [0] \u_execute.u_barrel_shift.u_shifter_quick.i_in [31:1] }, Y=\u_execute.u_barrel_shift.u_shifter_quick.i_carry_in_$mux_B_3_A
      New ports: A=\u_execute.u_barrel_shift.u_shifter_quick.i_shift_amount_$eq_A_7_Y_$mux_S_Y [31:0], B={ \u_execute.barrel_shift_in [0] \u_execute.barrel_shift_in [31:1] }, Y=\u_execute.u_barrel_shift.u_shifter_quick.i_carry_in_$mux_B_3_A [31:0]
      New connections: \u_execute.u_barrel_shift.u_shifter_quick.i_carry_in_$mux_B_3_A [32] = \u_execute.u_barrel_shift.u_shifter_quick.i_carry_in_$mux_B_3_A [31]
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_quick.i_carry_in_$mux_B_2_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_quick.i_shift_amount_$eq_A_5_Y_$mux_S_Y, B={ \u_execute.u_barrel_shift.u_shifter_quick.i_in [0] \u_execute.u_barrel_shift.u_shifter_quick.i_in [31] \u_execute.u_barrel_shift.u_shifter_quick.i_in [31:1] }, Y=\u_execute.u_barrel_shift.u_shifter_quick.i_carry_in_$mux_B_2_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_quick.i_shift_amount_$eq_A_5_Y_$mux_S_Y [32] \u_execute.barrel_shift_in [31] \u_execute.u_barrel_shift.u_shifter_quick.i_shift_amount_$eq_A_5_Y_$mux_S_Y [28:0] }, B={ \u_execute.barrel_shift_in [0] \u_execute.barrel_shift_in [30:1] }, Y={ \u_execute.u_barrel_shift.u_shifter_quick.i_carry_in_$mux_B_2_A [32] \u_execute.u_barrel_shift.u_shifter_quick.i_carry_in_$mux_B_2_A [29:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_quick.i_carry_in_$mux_B_2_A [31:30] = { \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] }
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_quick.i_carry_in_$mux_B_1_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_quick.i_shift_amount_$eq_A_3_Y_$mux_S_Y, B={ \u_execute.u_barrel_shift.u_shifter_quick.i_in [0] 1'0 \u_execute.u_barrel_shift.u_shifter_quick.i_in [31:1] }, Y=\u_execute.u_barrel_shift.u_shifter_quick.i_carry_in_$mux_B_1_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_quick.i_shift_amount_$eq_A_3_Y_$mux_S_Y [32] 1'0 \u_execute.u_barrel_shift.u_shifter_quick.i_shift_amount_$eq_A_3_Y_$mux_S_Y [29:0] }, B={ \u_execute.barrel_shift_in [0] \u_execute.barrel_shift_in [31:1] }, Y={ \u_execute.u_barrel_shift.u_shifter_quick.i_carry_in_$mux_B_1_A [32] \u_execute.u_barrel_shift.u_shifter_quick.i_carry_in_$mux_B_1_A [30:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_quick.i_carry_in_$mux_B_1_A [31] = 1'0
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$9958:
      Old ports: A=$auto$rtlil.cc:2464:Mux$9957, B=4'0111, Y=$auto$rtlil.cc:2464:Mux$9959
      New ports: A={ $auto$rtlil.cc:2464:Mux$9957 [3] 1'0 $auto$rtlil.cc:2464:Mux$9957 [0] }, B=3'011, Y={ $auto$rtlil.cc:2464:Mux$9959 [3] $auto$rtlil.cc:2464:Mux$9959 [1:0] }
      New connections: $auto$rtlil.cc:2464:Mux$9959 [2] = $auto$rtlil.cc:2464:Mux$9959 [0]
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$9968:
      Old ports: A=$auto$wreduce.cc:454:run$10079, B=$flatten\u_mem.\u_dcache.$procmux$8648_Y, Y=$auto$rtlil.cc:2464:Mux$9969
      New ports: A={ 1'0 $auto$wreduce.cc:454:run$10079 [1:0] }, B={ $flatten\u_mem.\u_dcache.$procmux$8648_Y [3] $flatten\u_mem.\u_dcache.$procmux$8648_Y [1] 1'0 }, Y={ $auto$rtlil.cc:2464:Mux$9969 [3] $auto$rtlil.cc:2464:Mux$9969 [1:0] }
      New connections: $auto$rtlil.cc:2464:Mux$9969 [2] = 1'0
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$9922:
      Old ports: A={ 2'00 $auto$wreduce.cc:454:run$9997 [8:0] }, B=$auto$wreduce.cc:454:run$9998 [10:0], Y=$auto$rtlil.cc:2464:Mux$9923 [10:0]
      New ports: A={ 2'00 $auto$wreduce.cc:454:run$9997 [8:7] }, B={ $auto$wreduce.cc:454:run$9998 [10:9] 2'00 }, Y=$auto$rtlil.cc:2464:Mux$9923 [10:7]
      New connections: $auto$rtlil.cc:2464:Mux$9923 [6:0] = 7'0000000
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$9976:
      Old ports: A=$auto$wreduce.cc:454:run$9990 [2:0], B=3'001, Y=$auto$rtlil.cc:2464:Mux$9977 [2:0]
      New ports: A={ $auto$wreduce.cc:454:run$9990 [2] $auto$wreduce.cc:454:run$9990 [0] }, B=2'01, Y={ $auto$rtlil.cc:2464:Mux$9977 [2] $auto$rtlil.cc:2464:Mux$9977 [0] }
      New connections: $auto$rtlil.cc:2464:Mux$9977 [1] = 1'0
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$9934:
      Old ports: A={ 2'00 $auto$wreduce.cc:454:run$9995 [4:0] }, B=$auto$wreduce.cc:454:run$9996 [6:0], Y=$auto$rtlil.cc:2464:Mux$9935 [6:0]
      New ports: A={ 2'00 $auto$wreduce.cc:454:run$9995 [4:3] }, B={ $auto$wreduce.cc:454:run$9996 [6:5] 2'00 }, Y=$auto$rtlil.cc:2464:Mux$9935 [6:3]
      New connections: $auto$rtlil.cc:2464:Mux$9935 [2:0] = 3'000
    Consolidated identical input bits for $mux cell \u_fetch.u_cache.valid_bits_r_$eq_A_3_Y_$mux_S_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_fetch.u_cache.valid_bits_r_$eq_A_3_Y_$mux_S_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B=4'1000, Y=\u_fetch.u_cache.valid_bits_r_$eq_A_3_Y_$mux_S_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ 1'0 \u_fetch.u_cache.valid_bits_r_$eq_A_3_Y_$mux_S_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [1:0] }, B=3'100, Y={ \u_fetch.u_cache.valid_bits_r_$eq_A_3_Y_$mux_S_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [3] \u_fetch.u_cache.valid_bits_r_$eq_A_3_Y_$mux_S_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [1:0] }
      New connections: \u_fetch.u_cache.valid_bits_r_$eq_A_3_Y_$mux_S_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [2] = 1'0
    Consolidated identical input bits for $mux cell \u_mem.i_byte_enable_$mux_B_1:
      Old ports: A=\u_mem.i_byte_enable_$mux_B_Y, B={ 8'00000000 \u_mem.i_byte_enable 4'0000 }, Y=\u_mem.i_byte_enable_$mux_B_1_Y
      New ports: A={ \u_mem.i_byte_enable_$mux_B_Y [15:8] 4'0000 }, B={ 8'00000000 \u_execute.o_byte_enable }, Y=\u_mem.i_byte_enable_$mux_B_1_Y [15:4]
      New connections: \u_mem.i_byte_enable_$mux_B_1_Y [3:0] = 4'0000
    Consolidated identical input bits for $mux cell $flatten\u_mem.\u_dcache.$procmux$8683:
      Old ports: A=$flatten\u_mem.\u_dcache.$procmux$8680_Y, B=4'0010, Y=$flatten\u_mem.\u_dcache.$procmux$8683_Y
      New ports: A={ 1'1 $flatten\u_mem.\u_dcache.$procmux$8680_Y [1:0] }, B=3'010, Y=$flatten\u_mem.\u_dcache.$procmux$8683_Y [2:0]
      New connections: $flatten\u_mem.\u_dcache.$procmux$8683_Y [3] = 1'0
    Consolidated identical input bits for $mux cell \u_mem.u_dcache.con_write_data_word_$mux_B_1:
      Old ports: A=\u_mem.u_dcache.con_write_data_word_$mux_B_Y, B={ \u_mem.u_dcache.data_wdata_r [127:64] \u_mem.u_dcache.con_write_data_word \u_mem.u_dcache.data_wdata_r [31:0] }, Y=\u_mem.u_dcache.con_write_data_word_$mux_B_1_Y
      New ports: A={ \u_mem.u_dcache.con_write_data_word_$mux_B_Y [127:64] \u_mem.u_dcache.data_wdata_r [63:32] }, B={ \u_mem.u_dcache.data_wdata_r [127:64] \u_mem.u_dcache.con_write_data_word }, Y=\u_mem.u_dcache.con_write_data_word_$mux_B_1_Y [127:32]
      New connections: \u_mem.u_dcache.con_write_data_word_$mux_B_1_Y [31:0] = \u_mem.u_dcache.data_wdata_r [31:0]
    Consolidated identical input bits for $mux cell \u_mem.u_dcache.valid_bits_r_$eq_A_3_Y_$mux_S_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_mem.u_dcache.valid_bits_r_$eq_A_3_Y_$mux_S_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B=4'1000, Y=\u_mem.u_dcache.valid_bits_r_$eq_A_3_Y_$mux_S_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_mem.u_dcache.valid_bits_r_$eq_A_3_Y_$mux_S_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [3] \u_mem.u_dcache.valid_bits_r_$eq_A_3_Y_$mux_S_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [1:0] }, B=3'100, Y={ \u_mem.u_dcache.valid_bits_r_$eq_A_3_Y_$mux_S_A_$mux_Y_A_$mux_Y_A [3] \u_mem.u_dcache.valid_bits_r_$eq_A_3_Y_$mux_S_A_$mux_Y_A_$mux_Y_A [1:0] }
      New connections: \u_mem.u_dcache.valid_bits_r_$eq_A_3_Y_$mux_S_A_$mux_Y_A_$mux_Y_A [2] = 1'0
    Consolidated identical input bits for $mux cell \u_mem.u_dcache.write_data_word_$mux_B_1:
      Old ports: A=\u_mem.u_dcache.write_data_word_$mux_B_Y, B={ \u_mem.u_dcache.data_hit_way_$mux_S_3_Y [127:64] \u_mem.u_dcache.i_byte_enable_$eq_A_6_Y_$mux_S_Y \u_mem.u_dcache.data_hit_way_$mux_S_3_Y [31:0] }, Y=\u_mem.u_dcache.write_data_word_$mux_B_1_Y
      New ports: A={ \u_mem.u_dcache.write_data_word_$mux_B_Y [127:64] \u_mem.u_dcache.data_hit_way_$mux_S_3_Y [63:32] }, B={ \u_mem.u_dcache.data_hit_way_$mux_S_3_Y [127:64] \u_mem.u_dcache.i_byte_enable_$eq_A_6_Y_$mux_S_Y }, Y=\u_mem.u_dcache.write_data_word_$mux_B_1_Y [127:32]
      New connections: \u_mem.u_dcache.write_data_word_$mux_B_1_Y [31:0] = \u_mem.u_dcache.data_hit_way_$mux_S_3_Y [31:0]
    Consolidated identical input bits for $mux cell $flatten\u_wishbone.$procmux$8393:
      Old ports: A=$flatten\u_wishbone.$procmux$8390_Y [1:0], B=2'10, Y=$auto$wreduce.cc:454:run$10081 [1:0]
      New ports: A=1'0, B=1'1, Y=$auto$wreduce.cc:454:run$10081 [1]
      New connections: $auto$wreduce.cc:454:run$10081 [0] = 1'0
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$9946:
      Old ports: A=$auto$rtlil.cc:2464:Mux$9943, B=$auto$rtlil.cc:2464:Mux$9935, Y=$auto$rtlil.cc:2464:Mux$9947
      New ports: A={ 4'0000 $auto$rtlil.cc:2464:Mux$9943 [2:0] }, B=$auto$rtlil.cc:2464:Mux$9935 [6:0], Y=$auto$rtlil.cc:2464:Mux$9947 [6:0]
      New connections: $auto$rtlil.cc:2464:Mux$9947 [14:7] = 8'00000000
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$9914:
      Old ports: A=$auto$wreduce.cc:454:run$9999, B=$auto$rtlil.cc:2464:Mux$9909, Y=$auto$rtlil.cc:2464:Mux$9915
      New ports: A={ 2'00 $auto$wreduce.cc:454:run$9999 [12:11] }, B={ $auto$rtlil.cc:2464:Mux$9909 [14:13] 2'00 }, Y=$auto$rtlil.cc:2464:Mux$9915 [14:11]
      New connections: $auto$rtlil.cc:2464:Mux$9915 [10:0] = 11'00000000000
  Optimizing cells in module \arm_core.
    Consolidated identical input bits for $mux cell \u_decode.next_interrupt_$eq_A_4_Y_$mux_S:
      Old ports: A=\u_decode.next_interrupt_$eq_A_5_Y_$mux_S_Y, B=2'11, Y=\u_decode.next_interrupt_$eq_A_4_Y_$mux_S_Y
      New ports: A=\u_decode.next_interrupt_$eq_A_5_Y_$mux_S_Y [0], B=1'1, Y=\u_decode.next_interrupt_$eq_A_4_Y_$mux_S_Y [0]
      New connections: \u_decode.next_interrupt_$eq_A_4_Y_$mux_S_Y [1] = \u_decode.next_interrupt_$eq_A_4_Y_$mux_S_Y [0]
    Consolidated identical input bits for $mux cell \u_decode.instruction_$eq_A_87_Y_$mux_S:
      Old ports: A=\u_decode.instruction_$eq_A_88_Y_$mux_S_Y, B=15'001000000000000, Y=\u_decode.instruction_$eq_A_87_Y_$mux_S_Y
      New ports: A={ \u_decode.instruction_$eq_A_88_Y_$mux_S_Y [14:13] 1'0 }, B=3'001, Y=\u_decode.instruction_$eq_A_87_Y_$mux_S_Y [14:12]
      New connections: \u_decode.instruction_$eq_A_87_Y_$mux_S_Y [11:0] = 12'000000000000
    Consolidated identical input bits for $mux cell \u_decode.instruction_$eq_A_57_Y_$mux_S:
      Old ports: A=\u_decode.instruction_$eq_A_58_Y_$mux_S_Y, B=15'001000000000000, Y=\u_decode.instruction_$eq_A_57_Y_$mux_S_Y
      New ports: A={ \u_decode.instruction_$eq_A_58_Y_$mux_S_Y [14:13] 1'0 }, B=3'001, Y=\u_decode.instruction_$eq_A_57_Y_$mux_S_Y [14:12]
      New connections: \u_decode.instruction_$eq_A_57_Y_$mux_S_Y [11:0] = 12'000000000000
    Consolidated identical input bits for $mux cell \u_decode.instruction_$eq_A_42_Y_$mux_S:
      Old ports: A=\u_decode.instruction_$eq_A_43_Y_$mux_S_Y, B=16'0010000000000000, Y=\u_decode.instruction_$eq_A_42_Y_$mux_S_Y
      New ports: A={ \u_decode.instruction_$eq_A_43_Y_$mux_S_Y [15:14] 1'0 \u_decode.instruction_$eq_A_43_Y_$mux_S_Y [0] }, B=4'0010, Y={ \u_decode.instruction_$eq_A_42_Y_$mux_S_Y [15:13] \u_decode.instruction_$eq_A_42_Y_$mux_S_Y [0] }
      New connections: \u_decode.instruction_$eq_A_42_Y_$mux_S_Y [12:1] = 12'000000000000
    Consolidated identical input bits for $mux cell \u_decode.imm8_$mux_B_2:
      Old ports: A={ 2'00 \u_decode.imm8_$mux_B_1_Y [13:0] }, B={ \u_decode.fetch_instruction_r_$mux_B_Y [7:0] 8'00000000 }, Y=\u_decode.imm8_$mux_B_2_Y [15:0]
      New ports: A={ 2'00 \u_decode.imm8_$mux_B_1_Y [13:2] }, B={ \u_decode.fetch_instruction_r_$mux_B_Y [7:0] 6'000000 }, Y=\u_decode.imm8_$mux_B_2_Y [15:2]
      New connections: \u_decode.imm8_$mux_B_2_Y [1:0] = 2'00
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$7218:
      Old ports: A=$flatten\u_decode.$14\mtrans_instruction_nxt[31:0] [15:0], B={ \u_decode.fetch_instruction_r_$mux_B_Y [15:13] 13'0000000000000 }, Y=$flatten\u_decode.$13\mtrans_instruction_nxt[31:0] [15:0]
      New ports: A={ $flatten\u_decode.$14\mtrans_instruction_nxt[31:0] [15:14] 1'0 }, B=\u_decode.fetch_instruction_r_$mux_B_Y [15:13], Y=$flatten\u_decode.$13\mtrans_instruction_nxt[31:0] [15:13]
      New connections: $flatten\u_decode.$13\mtrans_instruction_nxt[31:0] [12:0] = 13'0000000000000
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$6790:
      Old ports: A=$flatten\u_decode.$3\barrel_shift_data_sel_nxt[1:0], B=2'10, Y=$flatten\u_decode.$2\barrel_shift_data_sel_nxt[1:0]
      New ports: A=$flatten\u_decode.$3\barrel_shift_data_sel_nxt[1:0] [1], B=1'1, Y=$flatten\u_decode.$2\barrel_shift_data_sel_nxt[1:0] [1]
      New connections: $flatten\u_decode.$2\barrel_shift_data_sel_nxt[1:0] [0] = 1'0
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$6522:
      Old ports: A=$auto$wreduce.cc:454:run$10059 [1:0], B=2'11, Y=$auto$wreduce.cc:454:run$10063 [1:0]
      New ports: A=$auto$wreduce.cc:454:run$10059 [0], B=1'1, Y=$auto$wreduce.cc:454:run$10063 [0]
      New connections: $auto$wreduce.cc:454:run$10063 [1] = $auto$wreduce.cc:454:run$10063 [0]
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$6378:
      Old ports: A=$auto$wreduce.cc:454:run$10075 [2:0], B=3'101, Y=$auto$wreduce.cc:454:run$10004 [2:0]
      New ports: A={ $auto$wreduce.cc:454:run$10075 [2] $auto$wreduce.cc:454:run$10075 [0] }, B=2'11, Y={ $auto$wreduce.cc:454:run$10004 [2] $auto$wreduce.cc:454:run$10004 [0] }
      New connections: $auto$wreduce.cc:454:run$10004 [1] = 1'0
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$5567:
      Old ports: A=$flatten\u_decode.$11\alu_out_sel_nxt[3:0], B=4'0110, Y=$flatten\u_decode.$10\alu_out_sel_nxt[3:0]
      New ports: A={ $flatten\u_decode.$11\alu_out_sel_nxt[3:0] [3] $flatten\u_decode.$11\alu_out_sel_nxt[3:0] [0] $flatten\u_decode.$11\alu_out_sel_nxt[3:0] [0] }, B=3'010, Y={ $flatten\u_decode.$10\alu_out_sel_nxt[3:0] [3] $flatten\u_decode.$10\alu_out_sel_nxt[3:0] [1:0] }
      New connections: $flatten\u_decode.$10\alu_out_sel_nxt[3:0] [2] = $flatten\u_decode.$10\alu_out_sel_nxt[3:0] [1]
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$4780:
      Old ports: A=$auto$wreduce.cc:454:run$10010, B=5'10100, Y=$flatten\u_decode.$7\control_state_nxt[4:0]
      New ports: A={ 1'0 $auto$wreduce.cc:454:run$10010 [3:1] }, B=4'1010, Y=$flatten\u_decode.$7\control_state_nxt[4:0] [4:1]
      New connections: $flatten\u_decode.$7\control_state_nxt[4:0] [0] = 1'0
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$3969:
      Old ports: A=$flatten\u_decode.$33\control_state_nxt[4:0], B=$auto$wreduce.cc:454:run$10042, Y=$flatten\u_decode.$31\control_state_nxt[4:0]
      New ports: A={ $flatten\u_decode.$33\control_state_nxt[4:0] [4] $flatten\u_decode.$33\control_state_nxt[4:0] [0] $flatten\u_decode.$33\control_state_nxt[4:0] [0] $flatten\u_decode.$33\control_state_nxt[4:0] [0] }, B={ 2'01 $auto$wreduce.cc:454:run$10042 [1:0] }, Y={ $flatten\u_decode.$31\control_state_nxt[4:0] [4] $flatten\u_decode.$31\control_state_nxt[4:0] [2:0] }
      New connections: $flatten\u_decode.$31\control_state_nxt[4:0] [3] = $flatten\u_decode.$31\control_state_nxt[4:0] [1]
    Consolidated identical input bits for $mux cell \u_decode.rn_sel_nxt_$eq_A_27_Y_$mux_S:
      Old ports: A=\u_decode.rn_sel_nxt_$eq_A_28_Y_$mux_S_Y, B=15'001000000000000, Y=\u_decode.rn_sel_nxt_$eq_A_27_Y_$mux_S_Y
      New ports: A={ \u_decode.rn_sel_nxt_$eq_A_28_Y_$mux_S_Y [14:13] 1'0 }, B=3'001, Y=\u_decode.rn_sel_nxt_$eq_A_27_Y_$mux_S_Y [14:12]
      New connections: \u_decode.rn_sel_nxt_$eq_A_27_Y_$mux_S_Y [11:0] = 12'000000000000
    Consolidated identical input bits for $mux cell \u_execute.i_interrupt_vector_sel_$eq_A_4_Y_$mux_S:
      Old ports: A=\u_execute.i_interrupt_vector_sel_$eq_A_5_Y_$mux_S_Y [4:0], B=5'01100, Y=\u_execute.i_interrupt_vector_sel_$eq_A_4_Y_$mux_S_Y [4:0]
      New ports: A=\u_execute.i_interrupt_vector_sel_$eq_A_5_Y_$mux_S_Y [4:2], B=3'011, Y=\u_execute.i_interrupt_vector_sel_$eq_A_4_Y_$mux_S_Y [4:2]
      New connections: \u_execute.i_interrupt_vector_sel_$eq_A_4_Y_$mux_S_Y [1:0] = 2'00
    Consolidated identical input bits for $mux cell \u_execute.i_interrupt_vector_sel_$eq_A_3_Y_$mux_S:
      Old ports: A=\u_execute.i_interrupt_vector_sel_$eq_A_4_Y_$mux_S_Y, B=24, Y=\u_execute.i_interrupt_vector_sel_$eq_A_3_Y_$mux_S_Y
      New ports: A=\u_execute.i_interrupt_vector_sel_$eq_A_4_Y_$mux_S_Y [4:0], B=5'11000, Y=\u_execute.i_interrupt_vector_sel_$eq_A_3_Y_$mux_S_Y [4:0]
      New connections: \u_execute.i_interrupt_vector_sel_$eq_A_3_Y_$mux_S_Y [31:5] = 27'000000000000000000000000000
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [2:0] 30'000000000000000000000000000000 }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:31] 1'0 }, B=\u_execute.barrel_shift_in [2:0], Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:30]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [29:0] = 30'000000000000000000000000000000
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [27] \u_execute.u_barrel_shift.u_shifter_full.i_in [27:0] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:28] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0], B={ \u_execute.barrel_shift_in [27:0] \u_execute.barrel_shift_in [31:28] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] = \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31]
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [28] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:29] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.barrel_shift_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [0] }, B={ \u_execute.barrel_shift_in [28] \u_execute.barrel_shift_in [30:29] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [1:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:2] = { \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] }
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [29] 30'000000000000000000000000000000 \u_execute.u_barrel_shift.u_shifter_full.i_in [31:30] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] 1'0 \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [0] }, B={ \u_execute.barrel_shift_in [29] \u_execute.barrel_shift_in [31:30] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [1:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:2] = 30'000000000000000000000000000000
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_quick.i_carry_in_$mux_B_2:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_quick.i_carry_in_$mux_B_2_A, B={ \u_execute.u_barrel_shift.u_shifter_quick.i_carry_in \u_execute.u_barrel_shift.u_shifter_quick.i_in }, Y=\u_execute.u_barrel_shift.u_shifter_quick.i_carry_in_$mux_B_2_Y
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_quick.i_carry_in_$mux_B_2_A [32] \u_execute.barrel_shift_in [31] \u_execute.u_barrel_shift.u_shifter_quick.i_carry_in_$mux_B_2_A [29:0] }, B={ \u_execute.status_bits_flags [1] \u_execute.barrel_shift_in [30:0] }, Y={ \u_execute.u_barrel_shift.u_shifter_quick.i_carry_in_$mux_B_2_Y [32] \u_execute.u_barrel_shift.u_shifter_quick.i_carry_in_$mux_B_2_Y [30:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_quick.i_carry_in_$mux_B_2_Y [31] = \u_execute.barrel_shift_in [31]
    Consolidated identical input bits for $mux cell \u_fetch.u_cache.valid_bits_r_$eq_A_3_Y_$mux_S_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_fetch.u_cache.valid_bits_r_$eq_A_3_Y_$mux_S_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B=4'1000, Y=\u_fetch.u_cache.valid_bits_r_$eq_A_3_Y_$mux_S_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_fetch.u_cache.valid_bits_r_$eq_A_3_Y_$mux_S_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [3] \u_fetch.u_cache.valid_bits_r_$eq_A_3_Y_$mux_S_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [1:0] }, B=3'100, Y={ \u_fetch.u_cache.valid_bits_r_$eq_A_3_Y_$mux_S_A_$mux_Y_A_$mux_Y_A [3] \u_fetch.u_cache.valid_bits_r_$eq_A_3_Y_$mux_S_A_$mux_Y_A_$mux_Y_A [1:0] }
      New connections: \u_fetch.u_cache.valid_bits_r_$eq_A_3_Y_$mux_S_A_$mux_Y_A_$mux_Y_A [2] = 1'0
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$9926:
      Old ports: A=$auto$rtlil.cc:2464:Mux$9923, B=$auto$rtlil.cc:2464:Mux$9915, Y=$auto$rtlil.cc:2464:Mux$9927
      New ports: A={ 4'0000 $auto$rtlil.cc:2464:Mux$9923 [10:7] }, B={ $auto$rtlil.cc:2464:Mux$9915 [14:11] 4'0000 }, Y=$auto$rtlil.cc:2464:Mux$9927 [14:7]
      New connections: $auto$rtlil.cc:2464:Mux$9927 [6:0] = 7'0000000
  Optimizing cells in module \arm_core.
    Consolidated identical input bits for $mux cell \u_decode.next_interrupt_$eq_A_3_Y_$mux_S:
      Old ports: A=\u_decode.next_interrupt_$eq_A_4_Y_$mux_S_Y, B=2'11, Y=\u_decode.next_interrupt_$eq_A_3_Y_$mux_S_Y
      New ports: A=\u_decode.next_interrupt_$eq_A_4_Y_$mux_S_Y [0], B=1'1, Y=\u_decode.next_interrupt_$eq_A_3_Y_$mux_S_Y [0]
      New connections: \u_decode.next_interrupt_$eq_A_3_Y_$mux_S_Y [1] = \u_decode.next_interrupt_$eq_A_3_Y_$mux_S_Y [0]
    Consolidated identical input bits for $mux cell \u_decode.instruction_$eq_A_86_Y_$mux_S:
      Old ports: A=\u_decode.instruction_$eq_A_87_Y_$mux_S_Y, B=15'000100000000000, Y=\u_decode.instruction_$eq_A_71_Y_$mux_S_Y
      New ports: A={ \u_decode.instruction_$eq_A_87_Y_$mux_S_Y [14:12] 1'0 }, B=4'0001, Y=\u_decode.instruction_$eq_A_71_Y_$mux_S_Y [14:11]
      New connections: \u_decode.instruction_$eq_A_71_Y_$mux_S_Y [10:0] = 11'00000000000
    Consolidated identical input bits for $mux cell \u_decode.instruction_$eq_A_56_Y_$mux_S:
      Old ports: A=\u_decode.instruction_$eq_A_57_Y_$mux_S_Y, B=15'000100000000000, Y=\u_decode.instruction_$eq_A_56_Y_$mux_S_Y
      New ports: A={ \u_decode.instruction_$eq_A_57_Y_$mux_S_Y [14:12] 1'0 }, B=4'0001, Y=\u_decode.instruction_$eq_A_56_Y_$mux_S_Y [14:11]
      New connections: \u_decode.instruction_$eq_A_56_Y_$mux_S_Y [10:0] = 11'00000000000
    Consolidated identical input bits for $mux cell \u_decode.instruction_$eq_A_41_Y_$mux_S:
      Old ports: A=\u_decode.instruction_$eq_A_42_Y_$mux_S_Y, B=16'0001000000000000, Y=\u_decode.instruction_$eq_A_41_Y_$mux_S_Y
      New ports: A={ \u_decode.instruction_$eq_A_42_Y_$mux_S_Y [15:13] 1'0 \u_decode.instruction_$eq_A_42_Y_$mux_S_Y [0] }, B=5'00010, Y={ \u_decode.instruction_$eq_A_41_Y_$mux_S_Y [15:12] \u_decode.instruction_$eq_A_41_Y_$mux_S_Y [0] }
      New connections: \u_decode.instruction_$eq_A_41_Y_$mux_S_Y [11:1] = 11'00000000000
    Consolidated identical input bits for $mux cell \u_decode.imm8_$mux_B_3:
      Old ports: A={ 2'00 \u_decode.imm8_$mux_B_2_Y [15:0] }, B={ \u_decode.fetch_instruction_r_$mux_B_Y [7:0] 10'0000000000 }, Y=\u_decode.imm8_$mux_B_3_Y [17:0]
      New ports: A={ 2'00 \u_decode.imm8_$mux_B_2_Y [15:2] }, B={ \u_decode.fetch_instruction_r_$mux_B_Y [7:0] 8'00000000 }, Y=\u_decode.imm8_$mux_B_3_Y [17:2]
      New connections: \u_decode.imm8_$mux_B_3_Y [1:0] = 2'00
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$7257:
      Old ports: A=$flatten\u_decode.$13\mtrans_instruction_nxt[31:0] [15:0], B={ \u_decode.fetch_instruction_r_$mux_B_Y [15:12] 12'000000000000 }, Y=$flatten\u_decode.$12\mtrans_instruction_nxt[31:0] [15:0]
      New ports: A={ $flatten\u_decode.$13\mtrans_instruction_nxt[31:0] [15:13] 1'0 }, B=\u_decode.fetch_instruction_r_$mux_B_Y [15:12], Y=$flatten\u_decode.$12\mtrans_instruction_nxt[31:0] [15:12]
      New connections: $flatten\u_decode.$12\mtrans_instruction_nxt[31:0] [11:0] = 12'000000000000
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$6795:
      Old ports: A=$flatten\u_decode.$5\barrel_shift_data_sel_nxt[1:0], B=$flatten\u_decode.$2\barrel_shift_data_sel_nxt[1:0], Y=\u_decode.barrel_shift_data_sel_nxt
      New ports: A=$flatten\u_decode.$5\barrel_shift_data_sel_nxt[1:0] [1], B=$flatten\u_decode.$2\barrel_shift_data_sel_nxt[1:0] [1], Y=\u_decode.barrel_shift_data_sel_nxt [1]
      New connections: \u_decode.barrel_shift_data_sel_nxt [0] = 1'0
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$6546:
      Old ports: A=$auto$wreduce.cc:454:run$10063 [1:0], B=2'11, Y=$auto$wreduce.cc:454:run$10067 [1:0]
      New ports: A=$auto$wreduce.cc:454:run$10063 [0], B=1'1, Y=$auto$wreduce.cc:454:run$10067 [0]
      New connections: $auto$wreduce.cc:454:run$10067 [1] = $auto$wreduce.cc:454:run$10067 [0]
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$5597:
      Old ports: A=$flatten\u_decode.$10\alu_out_sel_nxt[3:0], B=4'1000, Y=$flatten\u_decode.$9\alu_out_sel_nxt[3:0]
      New ports: A={ $flatten\u_decode.$10\alu_out_sel_nxt[3:0] [3] $flatten\u_decode.$10\alu_out_sel_nxt[3:0] [1:0] }, B=3'100, Y={ $flatten\u_decode.$9\alu_out_sel_nxt[3:0] [3] $flatten\u_decode.$9\alu_out_sel_nxt[3:0] [1:0] }
      New connections: $flatten\u_decode.$9\alu_out_sel_nxt[3:0] [2] = $flatten\u_decode.$9\alu_out_sel_nxt[3:0] [1]
    Consolidated identical input bits for $mux cell \u_decode.rn_sel_nxt_$eq_A_26_Y_$mux_S:
      Old ports: A=\u_decode.rn_sel_nxt_$eq_A_27_Y_$mux_S_Y, B=15'000100000000000, Y=\u_decode.rn_sel_nxt_$eq_A_26_Y_$mux_S_Y
      New ports: A={ \u_decode.rn_sel_nxt_$eq_A_27_Y_$mux_S_Y [14:12] 1'0 }, B=4'0001, Y=\u_decode.rn_sel_nxt_$eq_A_26_Y_$mux_S_Y [14:11]
      New connections: \u_decode.rn_sel_nxt_$eq_A_26_Y_$mux_S_Y [10:0] = 11'00000000000
    Consolidated identical input bits for $mux cell \u_execute.i_interrupt_vector_sel_$eq_A_3_Y_$mux_S:
      Old ports: A=\u_execute.i_interrupt_vector_sel_$eq_A_4_Y_$mux_S_Y [4:0], B=5'11000, Y=\u_execute.i_interrupt_vector_sel_$eq_A_3_Y_$mux_S_Y [4:0]
      New ports: A=\u_execute.i_interrupt_vector_sel_$eq_A_4_Y_$mux_S_Y [4:2], B=3'110, Y=\u_execute.i_interrupt_vector_sel_$eq_A_3_Y_$mux_S_Y [4:2]
      New connections: \u_execute.i_interrupt_vector_sel_$eq_A_3_Y_$mux_S_Y [1:0] = 2'00
    Consolidated identical input bits for $mux cell \u_execute.i_interrupt_vector_sel_$eq_A_2_Y_$mux_S:
      Old ports: A=\u_execute.i_interrupt_vector_sel_$eq_A_3_Y_$mux_S_Y, B=28, Y=\u_execute.i_interrupt_vector_sel_$eq_A_2_Y_$mux_S_Y
      New ports: A=\u_execute.i_interrupt_vector_sel_$eq_A_3_Y_$mux_S_Y [4:0], B=5'11100, Y=\u_execute.i_interrupt_vector_sel_$eq_A_2_Y_$mux_S_Y [4:0]
      New connections: \u_execute.i_interrupt_vector_sel_$eq_A_2_Y_$mux_S_Y [31:5] = 27'000000000000000000000000000
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [3:0] 29'00000000000000000000000000000 }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:30] 1'0 }, B=\u_execute.barrel_shift_in [3:0], Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:29]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [28:0] = 29'00000000000000000000000000000
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [26] \u_execute.u_barrel_shift.u_shifter_full.i_in [26:0] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:27] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0], B={ \u_execute.barrel_shift_in [26:0] \u_execute.barrel_shift_in [31:27] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] = \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31]
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [27] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:28] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.barrel_shift_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [1:0] }, B={ \u_execute.barrel_shift_in [27] \u_execute.barrel_shift_in [30:28] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [2:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:3] = { \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] }
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [28] 29'00000000000000000000000000000 \u_execute.u_barrel_shift.u_shifter_full.i_in [31:29] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] 1'0 \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [1:0] }, B={ \u_execute.barrel_shift_in [28] \u_execute.barrel_shift_in [31:29] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [2:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:3] = 29'00000000000000000000000000000
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_quick.i_shift_imm_zero_$mux_S_2:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_quick.i_carry_in_$mux_B_2_Y, B={ \u_execute.u_barrel_shift.u_shifter_quick.i_in [31] \u_execute.u_barrel_shift.u_shifter_quick.i_in [31] \u_execute.u_barrel_shift.u_shifter_quick.i_in [31] \u_execute.u_barrel_shift.u_shifter_quick.i_in [31] \u_execute.u_barrel_shift.u_shifter_quick.i_in [31] \u_execute.u_barrel_shift.u_shifter_quick.i_in [31] \u_execute.u_barrel_shift.u_shifter_quick.i_in [31] \u_execute.u_barrel_shift.u_shifter_quick.i_in [31] \u_execute.u_barrel_shift.u_shifter_quick.i_in [31] \u_execute.u_barrel_shift.u_shifter_quick.i_in [31] \u_execute.u_barrel_shift.u_shifter_quick.i_in [31] \u_execute.u_barrel_shift.u_shifter_quick.i_in [31] \u_execute.u_barrel_shift.u_shifter_quick.i_in [31] \u_execute.u_barrel_shift.u_shifter_quick.i_in [31] \u_execute.u_barrel_shift.u_shifter_quick.i_in [31] \u_execute.u_barrel_shift.u_shifter_quick.i_in [31] \u_execute.u_barrel_shift.u_shifter_quick.i_in [31] \u_execute.u_barrel_shift.u_shifter_quick.i_in [31] \u_execute.u_barrel_shift.u_shifter_quick.i_in [31] \u_execute.u_barrel_shift.u_shifter_quick.i_in [31] \u_execute.u_barrel_shift.u_shifter_quick.i_in [31] \u_execute.u_barrel_shift.u_shifter_quick.i_in [31] \u_execute.u_barrel_shift.u_shifter_quick.i_in [31] \u_execute.u_barrel_shift.u_shifter_quick.i_in [31] \u_execute.u_barrel_shift.u_shifter_quick.i_in [31] \u_execute.u_barrel_shift.u_shifter_quick.i_in [31] \u_execute.u_barrel_shift.u_shifter_quick.i_in [31] \u_execute.u_barrel_shift.u_shifter_quick.i_in [31] \u_execute.u_barrel_shift.u_shifter_quick.i_in [31] \u_execute.u_barrel_shift.u_shifter_quick.i_in [31] \u_execute.u_barrel_shift.u_shifter_quick.i_in [31] \u_execute.u_barrel_shift.u_shifter_quick.i_in [31] \u_execute.u_barrel_shift.u_shifter_quick.i_in [31] }, Y=\u_execute.u_barrel_shift.u_shifter_quick.asr_out
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_quick.i_carry_in_$mux_B_2_Y [32] \u_execute.u_barrel_shift.u_shifter_quick.i_carry_in_$mux_B_2_Y [30:0] }, B={ \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] }, Y={ \u_execute.u_barrel_shift.u_shifter_quick.asr_out [32] \u_execute.u_barrel_shift.u_shifter_quick.asr_out [30:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_quick.asr_out [31] = \u_execute.barrel_shift_in [31]
  Optimizing cells in module \arm_core.
    Consolidated identical input bits for $mux cell \u_decode.next_interrupt_$eq_A_2_Y_$mux_S:
      Old ports: A=\u_decode.next_interrupt_$eq_A_3_Y_$mux_S_Y, B=2'11, Y=\u_decode.next_interrupt_$eq_A_2_Y_$mux_S_Y
      New ports: A=\u_decode.next_interrupt_$eq_A_3_Y_$mux_S_Y [0], B=1'1, Y=\u_decode.next_interrupt_$eq_A_2_Y_$mux_S_Y [0]
      New connections: \u_decode.next_interrupt_$eq_A_2_Y_$mux_S_Y [1] = \u_decode.next_interrupt_$eq_A_2_Y_$mux_S_Y [0]
    Consolidated identical input bits for $mux cell \u_decode.instruction_$eq_A_70_Y_$mux_S:
      Old ports: A=\u_decode.instruction_$eq_A_71_Y_$mux_S_Y, B=15'000010000000000, Y=\u_decode.instruction_$eq_A_70_Y_$mux_S_Y
      New ports: A={ \u_decode.instruction_$eq_A_71_Y_$mux_S_Y [14:11] 1'0 }, B=5'00001, Y=\u_decode.instruction_$eq_A_70_Y_$mux_S_Y [14:10]
      New connections: \u_decode.instruction_$eq_A_70_Y_$mux_S_Y [9:0] = 10'0000000000
    Consolidated identical input bits for $mux cell \u_decode.instruction_$eq_A_55_Y_$mux_S:
      Old ports: A=\u_decode.instruction_$eq_A_56_Y_$mux_S_Y, B=15'000010000000000, Y=\u_decode.instruction_$eq_A_55_Y_$mux_S_Y
      New ports: A={ \u_decode.instruction_$eq_A_56_Y_$mux_S_Y [14:11] 1'0 }, B=5'00001, Y=\u_decode.instruction_$eq_A_55_Y_$mux_S_Y [14:10]
      New connections: \u_decode.instruction_$eq_A_55_Y_$mux_S_Y [9:0] = 10'0000000000
    Consolidated identical input bits for $mux cell \u_decode.instruction_$eq_A_40_Y_$mux_S:
      Old ports: A=\u_decode.instruction_$eq_A_41_Y_$mux_S_Y, B=16'0000100000000000, Y=\u_decode.instruction_$eq_A_40_Y_$mux_S_Y
      New ports: A={ \u_decode.instruction_$eq_A_41_Y_$mux_S_Y [15:12] 1'0 \u_decode.instruction_$eq_A_41_Y_$mux_S_Y [0] }, B=6'000010, Y={ \u_decode.instruction_$eq_A_40_Y_$mux_S_Y [15:11] \u_decode.instruction_$eq_A_40_Y_$mux_S_Y [0] }
      New connections: \u_decode.instruction_$eq_A_40_Y_$mux_S_Y [10:1] = 10'0000000000
    Consolidated identical input bits for $mux cell \u_decode.imm8_$mux_B_4:
      Old ports: A={ 2'00 \u_decode.imm8_$mux_B_3_Y [17:0] }, B={ \u_decode.fetch_instruction_r_$mux_B_Y [7:0] 12'000000000000 }, Y=\u_decode.imm8_$mux_B_4_Y [19:0]
      New ports: A={ 2'00 \u_decode.imm8_$mux_B_3_Y [17:2] }, B={ \u_decode.fetch_instruction_r_$mux_B_Y [7:0] 10'0000000000 }, Y=\u_decode.imm8_$mux_B_4_Y [19:2]
      New connections: \u_decode.imm8_$mux_B_4_Y [1:0] = 2'00
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$7293:
      Old ports: A=$flatten\u_decode.$12\mtrans_instruction_nxt[31:0] [15:0], B={ \u_decode.fetch_instruction_r_$mux_B_Y [15:11] 11'00000000000 }, Y=$flatten\u_decode.$11\mtrans_instruction_nxt[31:0] [15:0]
      New ports: A={ $flatten\u_decode.$12\mtrans_instruction_nxt[31:0] [15:12] 1'0 }, B=\u_decode.fetch_instruction_r_$mux_B_Y [15:11], Y=$flatten\u_decode.$11\mtrans_instruction_nxt[31:0] [15:11]
      New connections: $flatten\u_decode.$11\mtrans_instruction_nxt[31:0] [10:0] = 11'00000000000
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$6567:
      Old ports: A=$auto$wreduce.cc:454:run$10067 [1:0], B=2'11, Y=$auto$wreduce.cc:454:run$10070 [1:0]
      New ports: A=$auto$wreduce.cc:454:run$10067 [0], B=1'1, Y=$auto$wreduce.cc:454:run$10070 [0]
      New connections: $auto$wreduce.cc:454:run$10070 [1] = $auto$wreduce.cc:454:run$10070 [0]
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$5624:
      Old ports: A=$flatten\u_decode.$9\alu_out_sel_nxt[3:0], B=4'0001, Y=$flatten\u_decode.$8\alu_out_sel_nxt[3:0]
      New ports: A={ $flatten\u_decode.$9\alu_out_sel_nxt[3:0] [3] $flatten\u_decode.$9\alu_out_sel_nxt[3:0] [1:0] }, B=3'001, Y={ $flatten\u_decode.$8\alu_out_sel_nxt[3:0] [3] $flatten\u_decode.$8\alu_out_sel_nxt[3:0] [1:0] }
      New connections: $flatten\u_decode.$8\alu_out_sel_nxt[3:0] [2] = $flatten\u_decode.$8\alu_out_sel_nxt[3:0] [1]
    Consolidated identical input bits for $mux cell \u_decode.rn_sel_nxt_$eq_A_25_Y_$mux_S:
      Old ports: A=\u_decode.rn_sel_nxt_$eq_A_26_Y_$mux_S_Y, B=15'000010000000000, Y=\u_decode.rn_sel_nxt_$eq_A_25_Y_$mux_S_Y
      New ports: A={ \u_decode.rn_sel_nxt_$eq_A_26_Y_$mux_S_Y [14:11] 1'0 }, B=5'00001, Y=\u_decode.rn_sel_nxt_$eq_A_25_Y_$mux_S_Y [14:10]
      New connections: \u_decode.rn_sel_nxt_$eq_A_25_Y_$mux_S_Y [9:0] = 10'0000000000
    Consolidated identical input bits for $mux cell \u_execute.i_interrupt_vector_sel_$eq_A_2_Y_$mux_S:
      Old ports: A=\u_execute.i_interrupt_vector_sel_$eq_A_3_Y_$mux_S_Y [4:0], B=5'11100, Y=\u_execute.i_interrupt_vector_sel_$eq_A_2_Y_$mux_S_Y [4:0]
      New ports: A=\u_execute.i_interrupt_vector_sel_$eq_A_3_Y_$mux_S_Y [4:2], B=3'111, Y=\u_execute.i_interrupt_vector_sel_$eq_A_2_Y_$mux_S_Y [4:2]
      New connections: \u_execute.i_interrupt_vector_sel_$eq_A_2_Y_$mux_S_Y [1:0] = 2'00
    Consolidated identical input bits for $mux cell \u_execute.i_interrupt_vector_sel_$eq_A_1_Y_$mux_S:
      Old ports: A=\u_execute.i_interrupt_vector_sel_$eq_A_2_Y_$mux_S_Y, B=16, Y=\u_execute.i_interrupt_vector_sel_$eq_A_1_Y_$mux_S_Y
      New ports: A=\u_execute.i_interrupt_vector_sel_$eq_A_2_Y_$mux_S_Y [4:0], B=5'10000, Y=\u_execute.i_interrupt_vector_sel_$eq_A_1_Y_$mux_S_Y [4:0]
      New connections: \u_execute.i_interrupt_vector_sel_$eq_A_1_Y_$mux_S_Y [31:5] = 27'000000000000000000000000000
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [4:0] 28'0000000000000000000000000000 }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:29] 1'0 }, B=\u_execute.barrel_shift_in [4:0], Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:28]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [27:0] = 28'0000000000000000000000000000
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [25] \u_execute.u_barrel_shift.u_shifter_full.i_in [25:0] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:26] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0], B={ \u_execute.barrel_shift_in [25:0] \u_execute.barrel_shift_in [31:26] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] = \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31]
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [26] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:27] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.barrel_shift_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [2:0] }, B={ \u_execute.barrel_shift_in [26] \u_execute.barrel_shift_in [30:27] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [3:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:4] = { \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] }
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [27] 28'0000000000000000000000000000 \u_execute.u_barrel_shift.u_shifter_full.i_in [31:28] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] 1'0 \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [2:0] }, B={ \u_execute.barrel_shift_in [27] \u_execute.barrel_shift_in [31:28] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [3:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:4] = 28'0000000000000000000000000000
  Optimizing cells in module \arm_core.
    Consolidated identical input bits for $mux cell \u_decode.instruction_$eq_A_69_Y_$mux_S:
      Old ports: A=\u_decode.instruction_$eq_A_70_Y_$mux_S_Y, B=15'000001000000000, Y=\u_decode.instruction_$eq_A_69_Y_$mux_S_Y
      New ports: A={ \u_decode.instruction_$eq_A_70_Y_$mux_S_Y [14:10] 1'0 }, B=6'000001, Y=\u_decode.instruction_$eq_A_69_Y_$mux_S_Y [14:9]
      New connections: \u_decode.instruction_$eq_A_69_Y_$mux_S_Y [8:0] = 9'000000000
    Consolidated identical input bits for $mux cell \u_decode.instruction_$eq_A_54_Y_$mux_S:
      Old ports: A=\u_decode.instruction_$eq_A_55_Y_$mux_S_Y, B=15'000001000000000, Y=\u_decode.instruction_$eq_A_54_Y_$mux_S_Y
      New ports: A={ \u_decode.instruction_$eq_A_55_Y_$mux_S_Y [14:10] 1'0 }, B=6'000001, Y=\u_decode.instruction_$eq_A_54_Y_$mux_S_Y [14:9]
      New connections: \u_decode.instruction_$eq_A_54_Y_$mux_S_Y [8:0] = 9'000000000
    Consolidated identical input bits for $mux cell \u_decode.instruction_$eq_A_39_Y_$mux_S:
      Old ports: A=\u_decode.instruction_$eq_A_40_Y_$mux_S_Y, B=16'0000010000000000, Y=\u_decode.instruction_$eq_A_39_Y_$mux_S_Y
      New ports: A={ \u_decode.instruction_$eq_A_40_Y_$mux_S_Y [15:11] 1'0 \u_decode.instruction_$eq_A_40_Y_$mux_S_Y [0] }, B=7'0000010, Y={ \u_decode.instruction_$eq_A_39_Y_$mux_S_Y [15:10] \u_decode.instruction_$eq_A_39_Y_$mux_S_Y [0] }
      New connections: \u_decode.instruction_$eq_A_39_Y_$mux_S_Y [9:1] = 9'000000000
    Consolidated identical input bits for $mux cell \u_decode.imm8_$mux_B_5:
      Old ports: A={ 2'00 \u_decode.imm8_$mux_B_4_Y [19:0] }, B={ \u_decode.fetch_instruction_r_$mux_B_Y [7:0] 14'00000000000000 }, Y=\u_decode.imm8_$mux_B_5_Y [21:0]
      New ports: A={ 2'00 \u_decode.imm8_$mux_B_4_Y [19:2] }, B={ \u_decode.fetch_instruction_r_$mux_B_Y [7:0] 12'000000000000 }, Y=\u_decode.imm8_$mux_B_5_Y [21:2]
      New connections: \u_decode.imm8_$mux_B_5_Y [1:0] = 2'00
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$7326:
      Old ports: A=$flatten\u_decode.$11\mtrans_instruction_nxt[31:0] [15:0], B={ \u_decode.fetch_instruction_r_$mux_B_Y [15:10] 10'0000000000 }, Y=$flatten\u_decode.$10\mtrans_instruction_nxt[31:0] [15:0]
      New ports: A={ $flatten\u_decode.$11\mtrans_instruction_nxt[31:0] [15:11] 1'0 }, B=\u_decode.fetch_instruction_r_$mux_B_Y [15:10], Y=$flatten\u_decode.$10\mtrans_instruction_nxt[31:0] [15:10]
      New connections: $flatten\u_decode.$10\mtrans_instruction_nxt[31:0] [9:0] = 10'0000000000
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$6585:
      Old ports: A=$auto$wreduce.cc:454:run$10070 [1:0], B=2'11, Y=$auto$wreduce.cc:454:run$10074 [1:0]
      New ports: A=$auto$wreduce.cc:454:run$10070 [0], B=1'1, Y=$auto$wreduce.cc:454:run$10074 [0]
      New connections: $auto$wreduce.cc:454:run$10074 [1] = $auto$wreduce.cc:454:run$10074 [0]
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$5648:
      Old ports: A=$flatten\u_decode.$8\alu_out_sel_nxt[3:0], B=4'0001, Y=$flatten\u_decode.$7\alu_out_sel_nxt[3:0]
      New ports: A={ $flatten\u_decode.$8\alu_out_sel_nxt[3:0] [3] $flatten\u_decode.$8\alu_out_sel_nxt[3:0] [1:0] }, B=3'001, Y={ $flatten\u_decode.$7\alu_out_sel_nxt[3:0] [3] $flatten\u_decode.$7\alu_out_sel_nxt[3:0] [1:0] }
      New connections: $flatten\u_decode.$7\alu_out_sel_nxt[3:0] [2] = $flatten\u_decode.$7\alu_out_sel_nxt[3:0] [1]
    Consolidated identical input bits for $mux cell \u_decode.rn_sel_nxt_$eq_A_24_Y_$mux_S:
      Old ports: A=\u_decode.rn_sel_nxt_$eq_A_25_Y_$mux_S_Y, B=15'000001000000000, Y=\u_decode.rn_sel_nxt_$eq_A_24_Y_$mux_S_Y
      New ports: A={ \u_decode.rn_sel_nxt_$eq_A_25_Y_$mux_S_Y [14:10] 1'0 }, B=6'000001, Y=\u_decode.rn_sel_nxt_$eq_A_24_Y_$mux_S_Y [14:9]
      New connections: \u_decode.rn_sel_nxt_$eq_A_24_Y_$mux_S_Y [8:0] = 9'000000000
    Consolidated identical input bits for $mux cell \u_execute.i_interrupt_vector_sel_$eq_A_Y_$mux_S:
      Old ports: A=\u_execute.i_interrupt_vector_sel_$eq_A_1_Y_$mux_S_Y, B=0, Y=\u_execute.i_interrupt_vector_sel_$eq_A_Y_$mux_S_Y
      New ports: A=\u_execute.i_interrupt_vector_sel_$eq_A_1_Y_$mux_S_Y [4:0], B=5'00000, Y=\u_execute.i_interrupt_vector_sel_$eq_A_Y_$mux_S_Y [4:0]
      New connections: \u_execute.i_interrupt_vector_sel_$eq_A_Y_$mux_S_Y [31:5] = 27'000000000000000000000000000
    Consolidated identical input bits for $mux cell \u_execute.i_interrupt_vector_sel_$eq_A_1_Y_$mux_S:
      Old ports: A=\u_execute.i_interrupt_vector_sel_$eq_A_2_Y_$mux_S_Y [4:0], B=5'10000, Y=\u_execute.i_interrupt_vector_sel_$eq_A_1_Y_$mux_S_Y [4:0]
      New ports: A=\u_execute.i_interrupt_vector_sel_$eq_A_2_Y_$mux_S_Y [4:2], B=3'100, Y=\u_execute.i_interrupt_vector_sel_$eq_A_1_Y_$mux_S_Y [4:2]
      New connections: \u_execute.i_interrupt_vector_sel_$eq_A_1_Y_$mux_S_Y [1:0] = 2'00
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [5:0] 27'000000000000000000000000000 }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:28] 1'0 }, B=\u_execute.barrel_shift_in [5:0], Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:27]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [26:0] = 27'000000000000000000000000000
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [24] \u_execute.u_barrel_shift.u_shifter_full.i_in [24:0] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:25] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0], B={ \u_execute.barrel_shift_in [24:0] \u_execute.barrel_shift_in [31:25] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] = \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31]
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [25] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:26] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.barrel_shift_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [3:0] }, B={ \u_execute.barrel_shift_in [25] \u_execute.barrel_shift_in [30:26] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [4:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:5] = { \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] }
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [26] 27'000000000000000000000000000 \u_execute.u_barrel_shift.u_shifter_full.i_in [31:27] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] 1'0 \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [3:0] }, B={ \u_execute.barrel_shift_in [26] \u_execute.barrel_shift_in [31:27] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [4:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:5] = 27'000000000000000000000000000
  Optimizing cells in module \arm_core.
    Consolidated identical input bits for $mux cell \u_decode.instruction_$eq_A_68_Y_$mux_S:
      Old ports: A=\u_decode.instruction_$eq_A_69_Y_$mux_S_Y, B=15'000000100000000, Y=\u_decode.instruction_$eq_A_68_Y_$mux_S_Y
      New ports: A={ \u_decode.instruction_$eq_A_69_Y_$mux_S_Y [14:9] 1'0 }, B=7'0000001, Y=\u_decode.instruction_$eq_A_68_Y_$mux_S_Y [14:8]
      New connections: \u_decode.instruction_$eq_A_68_Y_$mux_S_Y [7:0] = 8'00000000
    Consolidated identical input bits for $mux cell \u_decode.instruction_$eq_A_53_Y_$mux_S:
      Old ports: A=\u_decode.instruction_$eq_A_54_Y_$mux_S_Y, B=15'000000100000000, Y=\u_decode.instruction_$eq_A_53_Y_$mux_S_Y
      New ports: A={ \u_decode.instruction_$eq_A_54_Y_$mux_S_Y [14:9] 1'0 }, B=7'0000001, Y=\u_decode.instruction_$eq_A_53_Y_$mux_S_Y [14:8]
      New connections: \u_decode.instruction_$eq_A_53_Y_$mux_S_Y [7:0] = 8'00000000
    Consolidated identical input bits for $mux cell \u_decode.instruction_$eq_A_38_Y_$mux_S:
      Old ports: A=\u_decode.instruction_$eq_A_39_Y_$mux_S_Y, B=16'0000001000000000, Y=\u_decode.instruction_$eq_A_38_Y_$mux_S_Y
      New ports: A={ \u_decode.instruction_$eq_A_39_Y_$mux_S_Y [15:10] 1'0 \u_decode.instruction_$eq_A_39_Y_$mux_S_Y [0] }, B=8'00000010, Y={ \u_decode.instruction_$eq_A_38_Y_$mux_S_Y [15:9] \u_decode.instruction_$eq_A_38_Y_$mux_S_Y [0] }
      New connections: \u_decode.instruction_$eq_A_38_Y_$mux_S_Y [8:1] = 8'00000000
    Consolidated identical input bits for $mux cell \u_decode.imm8_$mux_B_6:
      Old ports: A={ 2'00 \u_decode.imm8_$mux_B_5_Y [21:0] }, B={ \u_decode.fetch_instruction_r_$mux_B_Y [7:0] 16'0000000000000000 }, Y=\u_decode.imm8_$mux_B_6_Y [23:0]
      New ports: A={ 2'00 \u_decode.imm8_$mux_B_5_Y [21:2] }, B={ \u_decode.fetch_instruction_r_$mux_B_Y [7:0] 14'00000000000000 }, Y=\u_decode.imm8_$mux_B_6_Y [23:2]
      New connections: \u_decode.imm8_$mux_B_6_Y [1:0] = 2'00
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$7356:
      Old ports: A=$flatten\u_decode.$10\mtrans_instruction_nxt[31:0] [15:0], B={ \u_decode.fetch_instruction_r_$mux_B_Y [15:9] 9'000000000 }, Y=$flatten\u_decode.$9\mtrans_instruction_nxt[31:0] [15:0]
      New ports: A={ $flatten\u_decode.$10\mtrans_instruction_nxt[31:0] [15:10] 1'0 }, B=\u_decode.fetch_instruction_r_$mux_B_Y [15:9], Y=$flatten\u_decode.$9\mtrans_instruction_nxt[31:0] [15:9]
      New connections: $flatten\u_decode.$9\mtrans_instruction_nxt[31:0] [8:0] = 9'000000000
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$6600:
      Old ports: A=$auto$wreduce.cc:454:run$10074 [1:0], B=2'11, Y=$auto$wreduce.cc:454:run$10003 [1:0]
      New ports: A=$auto$wreduce.cc:454:run$10074 [0], B=1'1, Y=$auto$wreduce.cc:454:run$10003 [0]
      New connections: $auto$wreduce.cc:454:run$10003 [1] = $auto$wreduce.cc:454:run$10003 [0]
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$5669:
      Old ports: A=$flatten\u_decode.$7\alu_out_sel_nxt[3:0], B=4'0001, Y=$flatten\u_decode.$6\alu_out_sel_nxt[3:0]
      New ports: A={ $flatten\u_decode.$7\alu_out_sel_nxt[3:0] [3] $flatten\u_decode.$7\alu_out_sel_nxt[3:0] [1:0] }, B=3'001, Y={ $flatten\u_decode.$6\alu_out_sel_nxt[3:0] [3] $flatten\u_decode.$6\alu_out_sel_nxt[3:0] [1:0] }
      New connections: $flatten\u_decode.$6\alu_out_sel_nxt[3:0] [2] = $flatten\u_decode.$6\alu_out_sel_nxt[3:0] [1]
    Consolidated identical input bits for $mux cell \u_decode.rn_sel_nxt_$eq_A_23_Y_$mux_S:
      Old ports: A=\u_decode.rn_sel_nxt_$eq_A_24_Y_$mux_S_Y, B=15'000000100000000, Y=\u_decode.rn_sel_nxt_$eq_A_23_Y_$mux_S_Y
      New ports: A={ \u_decode.rn_sel_nxt_$eq_A_24_Y_$mux_S_Y [14:9] 1'0 }, B=7'0000001, Y=\u_decode.rn_sel_nxt_$eq_A_23_Y_$mux_S_Y [14:8]
      New connections: \u_decode.rn_sel_nxt_$eq_A_23_Y_$mux_S_Y [7:0] = 8'00000000
    Consolidated identical input bits for $mux cell \u_execute.i_interrupt_vector_sel_$eq_A_Y_$mux_S:
      Old ports: A=\u_execute.i_interrupt_vector_sel_$eq_A_1_Y_$mux_S_Y [4:0], B=5'00000, Y=\u_execute.i_interrupt_vector_sel_$eq_A_Y_$mux_S_Y [4:0]
      New ports: A=\u_execute.i_interrupt_vector_sel_$eq_A_1_Y_$mux_S_Y [4:2], B=3'000, Y=\u_execute.i_interrupt_vector_sel_$eq_A_Y_$mux_S_Y [4:2]
      New connections: \u_execute.i_interrupt_vector_sel_$eq_A_Y_$mux_S_Y [1:0] = 2'00
    Consolidated identical input bits for $mux cell \u_execute.i_iaddress_sel_$eq_A_2_Y_$mux_S:
      Old ports: A=\u_execute.pc, B=\u_execute.i_interrupt_vector_sel_$eq_A_Y_$mux_S_Y, Y=\u_execute.i_iaddress_sel_$eq_A_2_Y_$mux_S_Y
      New ports: A={ \u_execute.u_register_bank.r15 2'00 }, B={ 21'000000000000000000000 \u_execute.i_interrupt_vector_sel_$eq_A_Y_$mux_S_Y [4:0] }, Y=\u_execute.i_iaddress_sel_$eq_A_2_Y_$mux_S_Y [25:0]
      New connections: \u_execute.i_iaddress_sel_$eq_A_2_Y_$mux_S_Y [31:26] = 6'000000
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [6:0] 26'00000000000000000000000000 }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:27] 1'0 }, B=\u_execute.barrel_shift_in [6:0], Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:26]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [25:0] = 26'00000000000000000000000000
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [23] \u_execute.u_barrel_shift.u_shifter_full.i_in [23:0] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:24] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0], B={ \u_execute.barrel_shift_in [23:0] \u_execute.barrel_shift_in [31:24] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] = \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31]
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [24] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:25] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.barrel_shift_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [4:0] }, B={ \u_execute.barrel_shift_in [24] \u_execute.barrel_shift_in [30:25] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [5:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:6] = { \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] }
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [25] 26'00000000000000000000000000 \u_execute.u_barrel_shift.u_shifter_full.i_in [31:26] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] 1'0 \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [4:0] }, B={ \u_execute.barrel_shift_in [25] \u_execute.barrel_shift_in [31:26] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [5:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:6] = 26'00000000000000000000000000
  Optimizing cells in module \arm_core.
    Consolidated identical input bits for $mux cell \u_decode.instruction_$eq_A_67_Y_$mux_S:
      Old ports: A=\u_decode.instruction_$eq_A_68_Y_$mux_S_Y, B=15'000000010000000, Y=\u_decode.instruction_$eq_A_67_Y_$mux_S_Y
      New ports: A={ \u_decode.instruction_$eq_A_68_Y_$mux_S_Y [14:8] 1'0 }, B=8'00000001, Y=\u_decode.instruction_$eq_A_67_Y_$mux_S_Y [14:7]
      New connections: \u_decode.instruction_$eq_A_67_Y_$mux_S_Y [6:0] = 7'0000000
    Consolidated identical input bits for $mux cell \u_decode.instruction_$eq_A_52_Y_$mux_S:
      Old ports: A=\u_decode.instruction_$eq_A_53_Y_$mux_S_Y, B=15'000000010000000, Y=\u_decode.instruction_$eq_A_52_Y_$mux_S_Y
      New ports: A={ \u_decode.instruction_$eq_A_53_Y_$mux_S_Y [14:8] 1'0 }, B=8'00000001, Y=\u_decode.instruction_$eq_A_52_Y_$mux_S_Y [14:7]
      New connections: \u_decode.instruction_$eq_A_52_Y_$mux_S_Y [6:0] = 7'0000000
    Consolidated identical input bits for $mux cell \u_decode.instruction_$eq_A_37_Y_$mux_S:
      Old ports: A=\u_decode.instruction_$eq_A_38_Y_$mux_S_Y, B=16'0000000100000000, Y=\u_decode.instruction_$eq_A_37_Y_$mux_S_Y
      New ports: A={ \u_decode.instruction_$eq_A_38_Y_$mux_S_Y [15:9] 1'0 \u_decode.instruction_$eq_A_38_Y_$mux_S_Y [0] }, B=9'000000010, Y={ \u_decode.instruction_$eq_A_37_Y_$mux_S_Y [15:8] \u_decode.instruction_$eq_A_37_Y_$mux_S_Y [0] }
      New connections: \u_decode.instruction_$eq_A_37_Y_$mux_S_Y [7:1] = 7'0000000
    Consolidated identical input bits for $mux cell \u_decode.imm8_$mux_B_7:
      Old ports: A={ 2'00 \u_decode.imm8_$mux_B_6_Y [23:0] }, B={ \u_decode.fetch_instruction_r_$mux_B_Y [7:0] 18'000000000000000000 }, Y=\u_decode.imm8_$mux_B_7_Y [25:0]
      New ports: A={ 2'00 \u_decode.imm8_$mux_B_6_Y [23:2] }, B={ \u_decode.fetch_instruction_r_$mux_B_Y [7:0] 16'0000000000000000 }, Y=\u_decode.imm8_$mux_B_7_Y [25:2]
      New connections: \u_decode.imm8_$mux_B_7_Y [1:0] = 2'00
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$7383:
      Old ports: A=$flatten\u_decode.$9\mtrans_instruction_nxt[31:0] [15:0], B={ \u_decode.fetch_instruction_r_$mux_B_Y [15:8] 8'00000000 }, Y=$flatten\u_decode.$8\mtrans_instruction_nxt[31:0] [15:0]
      New ports: A={ $flatten\u_decode.$9\mtrans_instruction_nxt[31:0] [15:9] 1'0 }, B=\u_decode.fetch_instruction_r_$mux_B_Y [15:8], Y=$flatten\u_decode.$8\mtrans_instruction_nxt[31:0] [15:8]
      New connections: $flatten\u_decode.$8\mtrans_instruction_nxt[31:0] [7:0] = 8'00000000
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$6612:
      Old ports: A=$auto$wreduce.cc:454:run$10003 [1:0], B=2'11, Y=$auto$wreduce.cc:454:run$10008 [1:0]
      New ports: A=$auto$wreduce.cc:454:run$10003 [0], B=1'1, Y=$auto$wreduce.cc:454:run$10008 [0]
      New connections: $auto$wreduce.cc:454:run$10008 [1] = $auto$wreduce.cc:454:run$10008 [0]
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$5687:
      Old ports: A=$flatten\u_decode.$6\alu_out_sel_nxt[3:0], B=4'0001, Y=$flatten\u_decode.$5\alu_out_sel_nxt[3:0]
      New ports: A={ $flatten\u_decode.$6\alu_out_sel_nxt[3:0] [3] $flatten\u_decode.$6\alu_out_sel_nxt[3:0] [1:0] }, B=3'001, Y={ $flatten\u_decode.$5\alu_out_sel_nxt[3:0] [3] $flatten\u_decode.$5\alu_out_sel_nxt[3:0] [1:0] }
      New connections: $flatten\u_decode.$5\alu_out_sel_nxt[3:0] [2] = $flatten\u_decode.$5\alu_out_sel_nxt[3:0] [1]
    Consolidated identical input bits for $mux cell \u_decode.rn_sel_nxt_$eq_A_22_Y_$mux_S:
      Old ports: A=\u_decode.rn_sel_nxt_$eq_A_23_Y_$mux_S_Y, B=15'000000010000000, Y=\u_decode.rn_sel_nxt_$eq_A_22_Y_$mux_S_Y
      New ports: A={ \u_decode.rn_sel_nxt_$eq_A_23_Y_$mux_S_Y [14:8] 1'0 }, B=8'00000001, Y=\u_decode.rn_sel_nxt_$eq_A_22_Y_$mux_S_Y [14:7]
      New connections: \u_decode.rn_sel_nxt_$eq_A_22_Y_$mux_S_Y [6:0] = 7'0000000
    Consolidated identical input bits for $mux cell \u_execute.i_pc_sel_$eq_A_2_Y_$mux_S:
      Old ports: A=\u_execute.i_pc_sel_$eq_A_3_Y_$mux_S_Y [25:0], B=\u_execute.i_interrupt_vector_sel_$eq_A_Y_$mux_S_Y [25:0], Y=\u_execute.i_pc_sel_$eq_A_2_Y_$mux_S_Y [25:0]
      New ports: A=\u_execute.i_pc_sel_$eq_A_3_Y_$mux_S_Y [25:2], B={ 21'000000000000000000000 \u_execute.i_interrupt_vector_sel_$eq_A_Y_$mux_S_Y [4:2] }, Y=\u_execute.i_pc_sel_$eq_A_2_Y_$mux_S_Y [25:2]
      New connections: \u_execute.i_pc_sel_$eq_A_2_Y_$mux_S_Y [1:0] = 2'00
    Consolidated identical input bits for $mux cell \u_execute.i_iaddress_sel_$eq_A_2_Y_$mux_S:
      Old ports: A={ \u_execute.u_register_bank.r15 2'00 }, B={ 21'000000000000000000000 \u_execute.i_interrupt_vector_sel_$eq_A_Y_$mux_S_Y [4:0] }, Y=\u_execute.i_iaddress_sel_$eq_A_2_Y_$mux_S_Y [25:0]
      New ports: A=\u_execute.u_register_bank.r15, B={ 21'000000000000000000000 \u_execute.i_interrupt_vector_sel_$eq_A_Y_$mux_S_Y [4:2] }, Y=\u_execute.i_iaddress_sel_$eq_A_2_Y_$mux_S_Y [25:2]
      New connections: \u_execute.i_iaddress_sel_$eq_A_2_Y_$mux_S_Y [1:0] = 2'00
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [7:0] 25'0000000000000000000000000 }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:26] 1'0 }, B=\u_execute.barrel_shift_in [7:0], Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:25]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [24:0] = 25'0000000000000000000000000
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [22] \u_execute.u_barrel_shift.u_shifter_full.i_in [22:0] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:23] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0], B={ \u_execute.barrel_shift_in [22:0] \u_execute.barrel_shift_in [31:23] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] = \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31]
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [23] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:24] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.barrel_shift_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [5:0] }, B={ \u_execute.barrel_shift_in [23] \u_execute.barrel_shift_in [30:24] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [6:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:7] = { \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] }
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [24] 25'0000000000000000000000000 \u_execute.u_barrel_shift.u_shifter_full.i_in [31:25] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] 1'0 \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [5:0] }, B={ \u_execute.barrel_shift_in [24] \u_execute.barrel_shift_in [31:25] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [6:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:7] = 25'0000000000000000000000000
  Optimizing cells in module \arm_core.
    Consolidated identical input bits for $mux cell \u_decode.instruction_$eq_A_66_Y_$mux_S:
      Old ports: A=\u_decode.instruction_$eq_A_67_Y_$mux_S_Y, B=15'000000001000000, Y=\u_decode.instruction_$eq_A_66_Y_$mux_S_Y
      New ports: A={ \u_decode.instruction_$eq_A_67_Y_$mux_S_Y [14:7] 1'0 }, B=9'000000001, Y=\u_decode.instruction_$eq_A_66_Y_$mux_S_Y [14:6]
      New connections: \u_decode.instruction_$eq_A_66_Y_$mux_S_Y [5:0] = 6'000000
    Consolidated identical input bits for $mux cell \u_decode.instruction_$eq_A_51_Y_$mux_S:
      Old ports: A=\u_decode.instruction_$eq_A_52_Y_$mux_S_Y, B=15'000000001000000, Y=\u_decode.instruction_$eq_A_51_Y_$mux_S_Y
      New ports: A={ \u_decode.instruction_$eq_A_52_Y_$mux_S_Y [14:7] 1'0 }, B=9'000000001, Y=\u_decode.instruction_$eq_A_51_Y_$mux_S_Y [14:6]
      New connections: \u_decode.instruction_$eq_A_51_Y_$mux_S_Y [5:0] = 6'000000
    Consolidated identical input bits for $mux cell \u_decode.instruction_$eq_A_36_Y_$mux_S:
      Old ports: A=\u_decode.instruction_$eq_A_37_Y_$mux_S_Y, B=16'0000000010000000, Y=\u_decode.instruction_$eq_A_36_Y_$mux_S_Y
      New ports: A={ \u_decode.instruction_$eq_A_37_Y_$mux_S_Y [15:8] 1'0 \u_decode.instruction_$eq_A_37_Y_$mux_S_Y [0] }, B=10'0000000010, Y={ \u_decode.instruction_$eq_A_36_Y_$mux_S_Y [15:7] \u_decode.instruction_$eq_A_36_Y_$mux_S_Y [0] }
      New connections: \u_decode.instruction_$eq_A_36_Y_$mux_S_Y [6:1] = 6'000000
    Consolidated identical input bits for $mux cell \u_decode.imm8_$mux_B_8:
      Old ports: A={ 2'00 \u_decode.imm8_$mux_B_7_Y [25:0] }, B={ \u_decode.fetch_instruction_r_$mux_B_Y [7:0] 20'00000000000000000000 }, Y=\u_decode.imm8_$mux_B_8_Y [27:0]
      New ports: A={ 2'00 \u_decode.imm8_$mux_B_7_Y [25:2] }, B={ \u_decode.fetch_instruction_r_$mux_B_Y [7:0] 18'000000000000000000 }, Y=\u_decode.imm8_$mux_B_8_Y [27:2]
      New connections: \u_decode.imm8_$mux_B_8_Y [1:0] = 2'00
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$7407:
      Old ports: A=$flatten\u_decode.$8\mtrans_instruction_nxt[31:0] [15:0], B={ \u_decode.fetch_instruction_r_$mux_B_Y [15:7] 7'0000000 }, Y=$flatten\u_decode.$7\mtrans_instruction_nxt[31:0] [15:0]
      New ports: A={ $flatten\u_decode.$8\mtrans_instruction_nxt[31:0] [15:8] 1'0 }, B=\u_decode.fetch_instruction_r_$mux_B_Y [15:7], Y=$flatten\u_decode.$7\mtrans_instruction_nxt[31:0] [15:7]
      New connections: $flatten\u_decode.$7\mtrans_instruction_nxt[31:0] [6:0] = 7'0000000
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$5702:
      Old ports: A=$flatten\u_decode.$5\alu_out_sel_nxt[3:0], B=4'0001, Y=$flatten\u_decode.$4\alu_out_sel_nxt[3:0]
      New ports: A={ $flatten\u_decode.$5\alu_out_sel_nxt[3:0] [3] $flatten\u_decode.$5\alu_out_sel_nxt[3:0] [1:0] }, B=3'001, Y={ $flatten\u_decode.$4\alu_out_sel_nxt[3:0] [3] $flatten\u_decode.$4\alu_out_sel_nxt[3:0] [1:0] }
      New connections: $flatten\u_decode.$4\alu_out_sel_nxt[3:0] [2] = $flatten\u_decode.$4\alu_out_sel_nxt[3:0] [1]
    Consolidated identical input bits for $mux cell \u_decode.rn_sel_nxt_$eq_A_21_Y_$mux_S:
      Old ports: A=\u_decode.rn_sel_nxt_$eq_A_22_Y_$mux_S_Y, B=15'000000001000000, Y=\u_decode.rn_sel_nxt_$eq_A_21_Y_$mux_S_Y
      New ports: A={ \u_decode.rn_sel_nxt_$eq_A_22_Y_$mux_S_Y [14:7] 1'0 }, B=9'000000001, Y=\u_decode.rn_sel_nxt_$eq_A_21_Y_$mux_S_Y [14:6]
      New connections: \u_decode.rn_sel_nxt_$eq_A_21_Y_$mux_S_Y [5:0] = 6'000000
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [8:0] 24'000000000000000000000000 }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:25] 1'0 }, B=\u_execute.barrel_shift_in [8:0], Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:24]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [23:0] = 24'000000000000000000000000
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [21] \u_execute.u_barrel_shift.u_shifter_full.i_in [21:0] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:22] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0], B={ \u_execute.barrel_shift_in [21:0] \u_execute.barrel_shift_in [31:22] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] = \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31]
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [22] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:23] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.barrel_shift_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [6:0] }, B={ \u_execute.barrel_shift_in [22] \u_execute.barrel_shift_in [30:23] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [7:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:8] = { \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] }
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [23] 24'000000000000000000000000 \u_execute.u_barrel_shift.u_shifter_full.i_in [31:24] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] 1'0 \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [6:0] }, B={ \u_execute.barrel_shift_in [23] \u_execute.barrel_shift_in [31:24] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [7:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:8] = 24'000000000000000000000000
  Optimizing cells in module \arm_core.
    Consolidated identical input bits for $mux cell \u_decode.instruction_$eq_A_65_Y_$mux_S:
      Old ports: A=\u_decode.instruction_$eq_A_66_Y_$mux_S_Y, B=15'000000000100000, Y=\u_decode.instruction_$eq_A_65_Y_$mux_S_Y
      New ports: A={ \u_decode.instruction_$eq_A_66_Y_$mux_S_Y [14:6] 1'0 }, B=10'0000000001, Y=\u_decode.instruction_$eq_A_65_Y_$mux_S_Y [14:5]
      New connections: \u_decode.instruction_$eq_A_65_Y_$mux_S_Y [4:0] = 5'00000
    Consolidated identical input bits for $mux cell \u_decode.instruction_$eq_A_50_Y_$mux_S:
      Old ports: A=\u_decode.instruction_$eq_A_51_Y_$mux_S_Y, B=15'000000000100000, Y=\u_decode.instruction_$eq_A_50_Y_$mux_S_Y
      New ports: A={ \u_decode.instruction_$eq_A_51_Y_$mux_S_Y [14:6] 1'0 }, B=10'0000000001, Y=\u_decode.instruction_$eq_A_50_Y_$mux_S_Y [14:5]
      New connections: \u_decode.instruction_$eq_A_50_Y_$mux_S_Y [4:0] = 5'00000
    Consolidated identical input bits for $mux cell \u_decode.instruction_$eq_A_35_Y_$mux_S:
      Old ports: A=\u_decode.instruction_$eq_A_36_Y_$mux_S_Y, B=16'0000000001000000, Y=\u_decode.instruction_$eq_A_35_Y_$mux_S_Y
      New ports: A={ \u_decode.instruction_$eq_A_36_Y_$mux_S_Y [15:7] 1'0 \u_decode.instruction_$eq_A_36_Y_$mux_S_Y [0] }, B=11'00000000010, Y={ \u_decode.instruction_$eq_A_35_Y_$mux_S_Y [15:6] \u_decode.instruction_$eq_A_35_Y_$mux_S_Y [0] }
      New connections: \u_decode.instruction_$eq_A_35_Y_$mux_S_Y [5:1] = 5'00000
    Consolidated identical input bits for $mux cell \u_decode.imm8_$mux_B_9:
      Old ports: A={ 2'00 \u_decode.imm8_$mux_B_8_Y [27:0] }, B={ \u_decode.fetch_instruction_r_$mux_B_Y [7:0] 22'0000000000000000000000 }, Y=\u_decode.imm8_$mux_B_9_Y [29:0]
      New ports: A={ 2'00 \u_decode.imm8_$mux_B_8_Y [27:2] }, B={ \u_decode.fetch_instruction_r_$mux_B_Y [7:0] 20'00000000000000000000 }, Y=\u_decode.imm8_$mux_B_9_Y [29:2]
      New connections: \u_decode.imm8_$mux_B_9_Y [1:0] = 2'00
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$7428:
      Old ports: A=$flatten\u_decode.$7\mtrans_instruction_nxt[31:0] [15:0], B={ \u_decode.fetch_instruction_r_$mux_B_Y [15:6] 6'000000 }, Y=$flatten\u_decode.$6\mtrans_instruction_nxt[31:0] [15:0]
      New ports: A={ $flatten\u_decode.$7\mtrans_instruction_nxt[31:0] [15:7] 1'0 }, B=\u_decode.fetch_instruction_r_$mux_B_Y [15:6], Y=$flatten\u_decode.$6\mtrans_instruction_nxt[31:0] [15:6]
      New connections: $flatten\u_decode.$6\mtrans_instruction_nxt[31:0] [5:0] = 6'000000
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$5714:
      Old ports: A=$flatten\u_decode.$4\alu_out_sel_nxt[3:0], B=4'0001, Y=$flatten\u_decode.$3\alu_out_sel_nxt[3:0]
      New ports: A={ $flatten\u_decode.$4\alu_out_sel_nxt[3:0] [3] $flatten\u_decode.$4\alu_out_sel_nxt[3:0] [1:0] }, B=3'001, Y={ $flatten\u_decode.$3\alu_out_sel_nxt[3:0] [3] $flatten\u_decode.$3\alu_out_sel_nxt[3:0] [1:0] }
      New connections: $flatten\u_decode.$3\alu_out_sel_nxt[3:0] [2] = $flatten\u_decode.$3\alu_out_sel_nxt[3:0] [1]
    Consolidated identical input bits for $mux cell \u_decode.rn_sel_nxt_$eq_A_20_Y_$mux_S:
      Old ports: A=\u_decode.rn_sel_nxt_$eq_A_21_Y_$mux_S_Y, B=15'000000000100000, Y=\u_decode.rn_sel_nxt_$eq_A_20_Y_$mux_S_Y
      New ports: A={ \u_decode.rn_sel_nxt_$eq_A_21_Y_$mux_S_Y [14:6] 1'0 }, B=10'0000000001, Y=\u_decode.rn_sel_nxt_$eq_A_20_Y_$mux_S_Y [14:5]
      New connections: \u_decode.rn_sel_nxt_$eq_A_20_Y_$mux_S_Y [4:0] = 5'00000
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [9:0] 23'00000000000000000000000 }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:24] 1'0 }, B=\u_execute.barrel_shift_in [9:0], Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:23]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [22:0] = 23'00000000000000000000000
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [20] \u_execute.u_barrel_shift.u_shifter_full.i_in [20:0] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:21] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0], B={ \u_execute.barrel_shift_in [20:0] \u_execute.barrel_shift_in [31:21] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] = \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31]
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [21] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:22] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.barrel_shift_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [7:0] }, B={ \u_execute.barrel_shift_in [21] \u_execute.barrel_shift_in [30:22] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [8:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:9] = { \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] }
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [22] 23'00000000000000000000000 \u_execute.u_barrel_shift.u_shifter_full.i_in [31:23] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] 1'0 \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [7:0] }, B={ \u_execute.barrel_shift_in [22] \u_execute.barrel_shift_in [31:23] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [8:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:9] = 23'00000000000000000000000
  Optimizing cells in module \arm_core.
    Consolidated identical input bits for $mux cell \u_decode.instruction_$eq_A_64_Y_$mux_S:
      Old ports: A=\u_decode.instruction_$eq_A_65_Y_$mux_S_Y, B=15'000000000010000, Y=\u_decode.instruction_$eq_A_64_Y_$mux_S_Y
      New ports: A={ \u_decode.instruction_$eq_A_65_Y_$mux_S_Y [14:5] 1'0 }, B=11'00000000001, Y=\u_decode.instruction_$eq_A_64_Y_$mux_S_Y [14:4]
      New connections: \u_decode.instruction_$eq_A_64_Y_$mux_S_Y [3:0] = 4'0000
    Consolidated identical input bits for $mux cell \u_decode.instruction_$eq_A_49_Y_$mux_S:
      Old ports: A=\u_decode.instruction_$eq_A_50_Y_$mux_S_Y, B=15'000000000010000, Y=\u_decode.instruction_$eq_A_49_Y_$mux_S_Y
      New ports: A={ \u_decode.instruction_$eq_A_50_Y_$mux_S_Y [14:5] 1'0 }, B=11'00000000001, Y=\u_decode.instruction_$eq_A_49_Y_$mux_S_Y [14:4]
      New connections: \u_decode.instruction_$eq_A_49_Y_$mux_S_Y [3:0] = 4'0000
    Consolidated identical input bits for $mux cell \u_decode.instruction_$eq_A_34_Y_$mux_S:
      Old ports: A=\u_decode.instruction_$eq_A_35_Y_$mux_S_Y, B=16'0000000000100000, Y=\u_decode.instruction_$eq_A_34_Y_$mux_S_Y
      New ports: A={ \u_decode.instruction_$eq_A_35_Y_$mux_S_Y [15:6] 1'0 \u_decode.instruction_$eq_A_35_Y_$mux_S_Y [0] }, B=12'000000000010, Y={ \u_decode.instruction_$eq_A_34_Y_$mux_S_Y [15:5] \u_decode.instruction_$eq_A_34_Y_$mux_S_Y [0] }
      New connections: \u_decode.instruction_$eq_A_34_Y_$mux_S_Y [4:1] = 4'0000
    Consolidated identical input bits for $mux cell \u_decode.imm8_$mux_B_10:
      Old ports: A=\u_decode.imm8_$mux_B_9_Y, B={ \u_decode.fetch_instruction_r_$mux_B_Y [7:0] 24'000000000000000000000000 }, Y=\u_decode.imm8_$mux_B_10_Y
      New ports: A={ 2'00 \u_decode.imm8_$mux_B_9_Y [29:2] }, B={ \u_decode.fetch_instruction_r_$mux_B_Y [7:0] 22'0000000000000000000000 }, Y=\u_decode.imm8_$mux_B_10_Y [31:2]
      New connections: \u_decode.imm8_$mux_B_10_Y [1:0] = 2'00
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$7446:
      Old ports: A=$flatten\u_decode.$6\mtrans_instruction_nxt[31:0] [15:0], B={ \u_decode.fetch_instruction_r_$mux_B_Y [15:5] 5'00000 }, Y=$flatten\u_decode.$5\mtrans_instruction_nxt[31:0] [15:0]
      New ports: A={ $flatten\u_decode.$6\mtrans_instruction_nxt[31:0] [15:6] 1'0 }, B=\u_decode.fetch_instruction_r_$mux_B_Y [15:5], Y=$flatten\u_decode.$5\mtrans_instruction_nxt[31:0] [15:5]
      New connections: $flatten\u_decode.$5\mtrans_instruction_nxt[31:0] [4:0] = 5'00000
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$5722:
      Old ports: A=$auto$wreduce.cc:454:run$10064, B=$flatten\u_decode.$3\alu_out_sel_nxt[3:0], Y=$flatten\u_decode.$2\alu_out_sel_nxt[3:0]
      New ports: A={ 2'00 $auto$wreduce.cc:454:run$10064 [0] }, B={ $flatten\u_decode.$3\alu_out_sel_nxt[3:0] [3] $flatten\u_decode.$3\alu_out_sel_nxt[3:0] [1:0] }, Y={ $flatten\u_decode.$2\alu_out_sel_nxt[3:0] [3] $flatten\u_decode.$2\alu_out_sel_nxt[3:0] [1:0] }
      New connections: $flatten\u_decode.$2\alu_out_sel_nxt[3:0] [2] = $flatten\u_decode.$2\alu_out_sel_nxt[3:0] [1]
    Consolidated identical input bits for $mux cell \u_decode.rn_sel_nxt_$eq_A_19_Y_$mux_S:
      Old ports: A=\u_decode.rn_sel_nxt_$eq_A_20_Y_$mux_S_Y, B=15'000000000010000, Y=\u_decode.rn_sel_nxt_$eq_A_19_Y_$mux_S_Y
      New ports: A={ \u_decode.rn_sel_nxt_$eq_A_20_Y_$mux_S_Y [14:5] 1'0 }, B=11'00000000001, Y=\u_decode.rn_sel_nxt_$eq_A_19_Y_$mux_S_Y [14:4]
      New connections: \u_decode.rn_sel_nxt_$eq_A_19_Y_$mux_S_Y [3:0] = 4'0000
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [10:0] 22'0000000000000000000000 }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:23] 1'0 }, B=\u_execute.barrel_shift_in [10:0], Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:22]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [21:0] = 22'0000000000000000000000
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [19] \u_execute.u_barrel_shift.u_shifter_full.i_in [19:0] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:20] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0], B={ \u_execute.barrel_shift_in [19:0] \u_execute.barrel_shift_in [31:20] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] = \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31]
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [20] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:21] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.barrel_shift_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [8:0] }, B={ \u_execute.barrel_shift_in [20] \u_execute.barrel_shift_in [30:21] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [9:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:10] = { \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] }
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [21] 22'0000000000000000000000 \u_execute.u_barrel_shift.u_shifter_full.i_in [31:22] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] 1'0 \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [8:0] }, B={ \u_execute.barrel_shift_in [21] \u_execute.barrel_shift_in [31:22] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [9:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:10] = 22'0000000000000000000000
  Optimizing cells in module \arm_core.
    Consolidated identical input bits for $mux cell \u_decode.instruction_$eq_A_63_Y_$mux_S:
      Old ports: A=\u_decode.instruction_$eq_A_64_Y_$mux_S_Y, B=15'000000000001000, Y=\u_decode.instruction_$eq_A_63_Y_$mux_S_Y
      New ports: A={ \u_decode.instruction_$eq_A_64_Y_$mux_S_Y [14:4] 1'0 }, B=12'000000000001, Y=\u_decode.instruction_$eq_A_63_Y_$mux_S_Y [14:3]
      New connections: \u_decode.instruction_$eq_A_63_Y_$mux_S_Y [2:0] = 3'000
    Consolidated identical input bits for $mux cell \u_decode.instruction_$eq_A_48_Y_$mux_S:
      Old ports: A=\u_decode.instruction_$eq_A_49_Y_$mux_S_Y, B=15'000000000001000, Y=\u_decode.instruction_$eq_A_48_Y_$mux_S_Y
      New ports: A={ \u_decode.instruction_$eq_A_49_Y_$mux_S_Y [14:4] 1'0 }, B=12'000000000001, Y=\u_decode.instruction_$eq_A_48_Y_$mux_S_Y [14:3]
      New connections: \u_decode.instruction_$eq_A_48_Y_$mux_S_Y [2:0] = 3'000
    Consolidated identical input bits for $mux cell \u_decode.instruction_$eq_A_33_Y_$mux_S:
      Old ports: A=\u_decode.instruction_$eq_A_34_Y_$mux_S_Y, B=16'0000000000010000, Y=\u_decode.instruction_$eq_A_33_Y_$mux_S_Y
      New ports: A={ \u_decode.instruction_$eq_A_34_Y_$mux_S_Y [15:5] 1'0 \u_decode.instruction_$eq_A_34_Y_$mux_S_Y [0] }, B=13'0000000000010, Y={ \u_decode.instruction_$eq_A_33_Y_$mux_S_Y [15:4] \u_decode.instruction_$eq_A_33_Y_$mux_S_Y [0] }
      New connections: \u_decode.instruction_$eq_A_33_Y_$mux_S_Y [3:1] = 3'000
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$7461:
      Old ports: A=$flatten\u_decode.$5\mtrans_instruction_nxt[31:0] [15:0], B={ \u_decode.fetch_instruction_r_$mux_B_Y [15:4] 4'0000 }, Y=$flatten\u_decode.$4\mtrans_instruction_nxt[31:0] [15:0]
      New ports: A={ $flatten\u_decode.$5\mtrans_instruction_nxt[31:0] [15:5] 1'0 }, B=\u_decode.fetch_instruction_r_$mux_B_Y [15:4], Y=$flatten\u_decode.$4\mtrans_instruction_nxt[31:0] [15:4]
      New connections: $flatten\u_decode.$4\mtrans_instruction_nxt[31:0] [3:0] = 4'0000
    Consolidated identical input bits for $mux cell \u_decode.rn_sel_nxt_$eq_A_18_Y_$mux_S:
      Old ports: A=\u_decode.rn_sel_nxt_$eq_A_19_Y_$mux_S_Y, B=15'000000000001000, Y=\u_decode.rn_sel_nxt_$eq_A_18_Y_$mux_S_Y
      New ports: A={ \u_decode.rn_sel_nxt_$eq_A_19_Y_$mux_S_Y [14:4] 1'0 }, B=12'000000000001, Y=\u_decode.rn_sel_nxt_$eq_A_18_Y_$mux_S_Y [14:3]
      New connections: \u_decode.rn_sel_nxt_$eq_A_18_Y_$mux_S_Y [2:0] = 3'000
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [11:0] 21'000000000000000000000 }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:22] 1'0 }, B=\u_execute.barrel_shift_in [11:0], Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:21]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [20:0] = 21'000000000000000000000
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [18] \u_execute.u_barrel_shift.u_shifter_full.i_in [18:0] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:19] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0], B={ \u_execute.barrel_shift_in [18:0] \u_execute.barrel_shift_in [31:19] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] = \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31]
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [19] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:20] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.barrel_shift_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [9:0] }, B={ \u_execute.barrel_shift_in [19] \u_execute.barrel_shift_in [30:20] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [10:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:11] = { \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] }
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [20] 21'000000000000000000000 \u_execute.u_barrel_shift.u_shifter_full.i_in [31:21] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] 1'0 \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [9:0] }, B={ \u_execute.barrel_shift_in [20] \u_execute.barrel_shift_in [31:21] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [10:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:11] = 21'000000000000000000000
  Optimizing cells in module \arm_core.
    Consolidated identical input bits for $mux cell \u_decode.instruction_$eq_A_62_Y_$mux_S:
      Old ports: A=\u_decode.instruction_$eq_A_63_Y_$mux_S_Y, B=15'000000000000100, Y=\u_decode.instruction_$eq_A_62_Y_$mux_S_Y
      New ports: A={ \u_decode.instruction_$eq_A_63_Y_$mux_S_Y [14:3] 1'0 }, B=13'0000000000001, Y=\u_decode.instruction_$eq_A_62_Y_$mux_S_Y [14:2]
      New connections: \u_decode.instruction_$eq_A_62_Y_$mux_S_Y [1:0] = 2'00
    Consolidated identical input bits for $mux cell \u_decode.instruction_$eq_A_47_Y_$mux_S:
      Old ports: A=\u_decode.instruction_$eq_A_48_Y_$mux_S_Y, B=15'000000000000100, Y=\u_decode.instruction_$eq_A_47_Y_$mux_S_Y
      New ports: A={ \u_decode.instruction_$eq_A_48_Y_$mux_S_Y [14:3] 1'0 }, B=13'0000000000001, Y=\u_decode.instruction_$eq_A_47_Y_$mux_S_Y [14:2]
      New connections: \u_decode.instruction_$eq_A_47_Y_$mux_S_Y [1:0] = 2'00
    Consolidated identical input bits for $mux cell \u_decode.instruction_$eq_A_32_Y_$mux_S:
      Old ports: A=\u_decode.instruction_$eq_A_33_Y_$mux_S_Y, B=16'0000000000001000, Y=\u_decode.instruction_$eq_A_32_Y_$mux_S_Y
      New ports: A={ \u_decode.instruction_$eq_A_33_Y_$mux_S_Y [15:4] 1'0 \u_decode.instruction_$eq_A_33_Y_$mux_S_Y [0] }, B=14'00000000000010, Y={ \u_decode.instruction_$eq_A_32_Y_$mux_S_Y [15:3] \u_decode.instruction_$eq_A_32_Y_$mux_S_Y [0] }
      New connections: \u_decode.instruction_$eq_A_32_Y_$mux_S_Y [2:1] = 2'00
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$7473:
      Old ports: A=$flatten\u_decode.$4\mtrans_instruction_nxt[31:0] [15:0], B={ \u_decode.fetch_instruction_r_$mux_B_Y [15:3] 3'000 }, Y=$flatten\u_decode.$3\mtrans_instruction_nxt[31:0] [15:0]
      New ports: A={ $flatten\u_decode.$4\mtrans_instruction_nxt[31:0] [15:4] 1'0 }, B=\u_decode.fetch_instruction_r_$mux_B_Y [15:3], Y=$flatten\u_decode.$3\mtrans_instruction_nxt[31:0] [15:3]
      New connections: $flatten\u_decode.$3\mtrans_instruction_nxt[31:0] [2:0] = 3'000
    Consolidated identical input bits for $mux cell \u_decode.rn_sel_nxt_$eq_A_17_Y_$mux_S:
      Old ports: A=\u_decode.rn_sel_nxt_$eq_A_18_Y_$mux_S_Y, B=15'000000000000100, Y=\u_decode.rn_sel_nxt_$eq_A_17_Y_$mux_S_Y
      New ports: A={ \u_decode.rn_sel_nxt_$eq_A_18_Y_$mux_S_Y [14:3] 1'0 }, B=13'0000000000001, Y=\u_decode.rn_sel_nxt_$eq_A_17_Y_$mux_S_Y [14:2]
      New connections: \u_decode.rn_sel_nxt_$eq_A_17_Y_$mux_S_Y [1:0] = 2'00
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [12:0] 20'00000000000000000000 }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:21] 1'0 }, B=\u_execute.barrel_shift_in [12:0], Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:20]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [19:0] = 20'00000000000000000000
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [17] \u_execute.u_barrel_shift.u_shifter_full.i_in [17:0] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:18] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0], B={ \u_execute.barrel_shift_in [17:0] \u_execute.barrel_shift_in [31:18] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] = \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31]
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [18] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:19] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.barrel_shift_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [10:0] }, B={ \u_execute.barrel_shift_in [18] \u_execute.barrel_shift_in [30:19] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [11:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:12] = { \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] }
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [19] 20'00000000000000000000 \u_execute.u_barrel_shift.u_shifter_full.i_in [31:20] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] 1'0 \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [10:0] }, B={ \u_execute.barrel_shift_in [19] \u_execute.barrel_shift_in [31:20] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [11:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:12] = 20'00000000000000000000
  Optimizing cells in module \arm_core.
    Consolidated identical input bits for $mux cell \u_decode.instruction_$eq_A_76_Y_$mux_S:
      Old ports: A=\u_decode.instruction_$eq_A_62_Y_$mux_S_Y, B=15'000000000000010, Y=\u_decode.instruction_$eq_A_76_Y_$mux_S_Y
      New ports: A={ \u_decode.instruction_$eq_A_62_Y_$mux_S_Y [14:2] 1'0 }, B=14'00000000000001, Y=\u_decode.instruction_$eq_A_76_Y_$mux_S_Y [14:1]
      New connections: \u_decode.instruction_$eq_A_76_Y_$mux_S_Y [0] = 1'0
    Consolidated identical input bits for $mux cell \u_decode.instruction_$eq_A_46_Y_$mux_S:
      Old ports: A=\u_decode.instruction_$eq_A_47_Y_$mux_S_Y, B=15'000000000000010, Y=\u_decode.instruction_$eq_A_46_Y_$mux_S_Y
      New ports: A={ \u_decode.instruction_$eq_A_47_Y_$mux_S_Y [14:2] 1'0 }, B=14'00000000000001, Y=\u_decode.instruction_$eq_A_46_Y_$mux_S_Y [14:1]
      New connections: \u_decode.instruction_$eq_A_46_Y_$mux_S_Y [0] = 1'0
    Consolidated identical input bits for $mux cell \u_decode.instruction_$eq_A_31_Y_$mux_S:
      Old ports: A=\u_decode.instruction_$eq_A_32_Y_$mux_S_Y, B=16'0000000000000100, Y=\u_decode.instruction_$eq_A_31_Y_$mux_S_Y
      New ports: A={ \u_decode.instruction_$eq_A_32_Y_$mux_S_Y [15:3] 1'0 \u_decode.instruction_$eq_A_32_Y_$mux_S_Y [0] }, B=15'000000000000010, Y={ \u_decode.instruction_$eq_A_31_Y_$mux_S_Y [15:2] \u_decode.instruction_$eq_A_31_Y_$mux_S_Y [0] }
      New connections: \u_decode.instruction_$eq_A_31_Y_$mux_S_Y [1] = 1'0
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$7482:
      Old ports: A=$flatten\u_decode.$3\mtrans_instruction_nxt[31:0] [15:0], B={ \u_decode.fetch_instruction_r_$mux_B_Y [15:2] 2'00 }, Y=$flatten\u_decode.$2\mtrans_instruction_nxt[31:0] [15:0]
      New ports: A={ $flatten\u_decode.$3\mtrans_instruction_nxt[31:0] [15:3] 1'0 }, B=\u_decode.fetch_instruction_r_$mux_B_Y [15:2], Y=$flatten\u_decode.$2\mtrans_instruction_nxt[31:0] [15:2]
      New connections: $flatten\u_decode.$2\mtrans_instruction_nxt[31:0] [1:0] = 2'00
    Consolidated identical input bits for $mux cell \u_decode.rn_sel_nxt_$eq_A_16_Y_$mux_S:
      Old ports: A=\u_decode.rn_sel_nxt_$eq_A_17_Y_$mux_S_Y, B=15'000000000000010, Y=\u_decode.rn_sel_nxt_$eq_A_16_Y_$mux_S_Y
      New ports: A={ \u_decode.rn_sel_nxt_$eq_A_17_Y_$mux_S_Y [14:2] 1'0 }, B=14'00000000000001, Y=\u_decode.rn_sel_nxt_$eq_A_16_Y_$mux_S_Y [14:1]
      New connections: \u_decode.rn_sel_nxt_$eq_A_16_Y_$mux_S_Y [0] = 1'0
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [13:0] 19'0000000000000000000 }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:20] 1'0 }, B=\u_execute.barrel_shift_in [13:0], Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:19]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [18:0] = 19'0000000000000000000
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [16] \u_execute.u_barrel_shift.u_shifter_full.i_in [16:0] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:17] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0], B={ \u_execute.barrel_shift_in [16:0] \u_execute.barrel_shift_in [31:17] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] = \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31]
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [17] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:18] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.barrel_shift_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [11:0] }, B={ \u_execute.barrel_shift_in [17] \u_execute.barrel_shift_in [30:18] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [12:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:13] = { \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] }
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [18] 19'0000000000000000000 \u_execute.u_barrel_shift.u_shifter_full.i_in [31:19] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] 1'0 \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [11:0] }, B={ \u_execute.barrel_shift_in [18] \u_execute.barrel_shift_in [31:19] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [12:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:13] = 19'0000000000000000000
  Optimizing cells in module \arm_core.
    Consolidated identical input bits for $mux cell $flatten\u_decode.$procmux$7488:
      Old ports: A=$flatten\u_decode.$2\mtrans_instruction_nxt[31:0] [15:0], B={ \u_decode.fetch_instruction_r_$mux_B_Y [15:1] 1'0 }, Y=\u_decode.mtrans_instruction_nxt [15:0]
      New ports: A={ $flatten\u_decode.$2\mtrans_instruction_nxt[31:0] [15:2] 1'0 }, B=\u_decode.fetch_instruction_r_$mux_B_Y [15:1], Y=\u_decode.mtrans_instruction_nxt [15:1]
      New connections: \u_decode.mtrans_instruction_nxt [0] = 1'0
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [14:0] 18'000000000000000000 }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:19] 1'0 }, B=\u_execute.barrel_shift_in [14:0], Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:18]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [17:0] = 18'000000000000000000
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [15] \u_execute.u_barrel_shift.u_shifter_full.i_in [15:0] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:16] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0], B={ \u_execute.barrel_shift_in [15:0] \u_execute.barrel_shift_in [31:16] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] = \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31]
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [16] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:17] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.barrel_shift_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [12:0] }, B={ \u_execute.barrel_shift_in [16] \u_execute.barrel_shift_in [30:17] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [13:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:14] = { \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] }
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [17] 18'000000000000000000 \u_execute.u_barrel_shift.u_shifter_full.i_in [31:18] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] 1'0 \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [12:0] }, B={ \u_execute.barrel_shift_in [17] \u_execute.barrel_shift_in [31:18] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [13:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:14] = 18'000000000000000000
  Optimizing cells in module \arm_core.
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [15:0] 17'00000000000000000 }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:18] 1'0 }, B=\u_execute.barrel_shift_in [15:0], Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:17]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [16:0] = 17'00000000000000000
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [14] \u_execute.u_barrel_shift.u_shifter_full.i_in [14:0] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:15] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0], B={ \u_execute.barrel_shift_in [14:0] \u_execute.barrel_shift_in [31:15] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] = \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31]
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [15] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:16] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.barrel_shift_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [13:0] }, B={ \u_execute.barrel_shift_in [15] \u_execute.barrel_shift_in [30:16] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [14:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:15] = { \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] }
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [16] 17'00000000000000000 \u_execute.u_barrel_shift.u_shifter_full.i_in [31:17] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] 1'0 \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [13:0] }, B={ \u_execute.barrel_shift_in [16] \u_execute.barrel_shift_in [31:17] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [14:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:15] = 17'00000000000000000
  Optimizing cells in module \arm_core.
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [16:0] 16'0000000000000000 }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:17] 1'0 }, B=\u_execute.barrel_shift_in [16:0], Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:16]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [15:0] = 16'0000000000000000
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [13] \u_execute.u_barrel_shift.u_shifter_full.i_in [13:0] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:14] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0], B={ \u_execute.barrel_shift_in [13:0] \u_execute.barrel_shift_in [31:14] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] = \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31]
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [14] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:15] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.barrel_shift_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [14:0] }, B={ \u_execute.barrel_shift_in [14] \u_execute.barrel_shift_in [30:15] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [15:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:16] = { \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] }
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [15] 16'0000000000000000 \u_execute.u_barrel_shift.u_shifter_full.i_in [31:16] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] 1'0 \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [14:0] }, B={ \u_execute.barrel_shift_in [15] \u_execute.barrel_shift_in [31:16] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [15:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:16] = 16'0000000000000000
  Optimizing cells in module \arm_core.
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [17:0] 15'000000000000000 }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:16] 1'0 }, B=\u_execute.barrel_shift_in [17:0], Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:15]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [14:0] = 15'000000000000000
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [12] \u_execute.u_barrel_shift.u_shifter_full.i_in [12:0] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:13] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0], B={ \u_execute.barrel_shift_in [12:0] \u_execute.barrel_shift_in [31:13] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] = \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31]
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [13] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:14] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.barrel_shift_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [15:0] }, B={ \u_execute.barrel_shift_in [13] \u_execute.barrel_shift_in [30:14] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [16:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:17] = { \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] }
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [14] 15'000000000000000 \u_execute.u_barrel_shift.u_shifter_full.i_in [31:15] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] 1'0 \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [15:0] }, B={ \u_execute.barrel_shift_in [14] \u_execute.barrel_shift_in [31:15] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [16:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:17] = 15'000000000000000
  Optimizing cells in module \arm_core.
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [18:0] 14'00000000000000 }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:15] 1'0 }, B=\u_execute.barrel_shift_in [18:0], Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:14]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [13:0] = 14'00000000000000
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [11] \u_execute.u_barrel_shift.u_shifter_full.i_in [11:0] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:12] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0], B={ \u_execute.barrel_shift_in [11:0] \u_execute.barrel_shift_in [31:12] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] = \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31]
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [12] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:13] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.barrel_shift_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [16:0] }, B={ \u_execute.barrel_shift_in [12] \u_execute.barrel_shift_in [30:13] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [17:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:18] = { \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] }
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [13] 14'00000000000000 \u_execute.u_barrel_shift.u_shifter_full.i_in [31:14] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] 1'0 \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [16:0] }, B={ \u_execute.barrel_shift_in [13] \u_execute.barrel_shift_in [31:14] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [17:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:18] = 14'00000000000000
  Optimizing cells in module \arm_core.
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [19:0] 13'0000000000000 }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:14] 1'0 }, B=\u_execute.barrel_shift_in [19:0], Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:13]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [12:0] = 13'0000000000000
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [10] \u_execute.u_barrel_shift.u_shifter_full.i_in [10:0] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:11] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0], B={ \u_execute.barrel_shift_in [10:0] \u_execute.barrel_shift_in [31:11] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] = \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31]
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [11] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:12] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.barrel_shift_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [17:0] }, B={ \u_execute.barrel_shift_in [11] \u_execute.barrel_shift_in [30:12] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [18:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:19] = { \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] }
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [12] 13'0000000000000 \u_execute.u_barrel_shift.u_shifter_full.i_in [31:13] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] 1'0 \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [17:0] }, B={ \u_execute.barrel_shift_in [12] \u_execute.barrel_shift_in [31:13] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [18:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:19] = 13'0000000000000
  Optimizing cells in module \arm_core.
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [20:0] 12'000000000000 }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:13] 1'0 }, B=\u_execute.barrel_shift_in [20:0], Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:12]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [11:0] = 12'000000000000
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [9] \u_execute.u_barrel_shift.u_shifter_full.i_in [9:0] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:10] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0], B={ \u_execute.barrel_shift_in [9:0] \u_execute.barrel_shift_in [31:10] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] = \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31]
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [10] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:11] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.barrel_shift_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [18:0] }, B={ \u_execute.barrel_shift_in [10] \u_execute.barrel_shift_in [30:11] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [19:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:20] = { \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] }
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [11] 12'000000000000 \u_execute.u_barrel_shift.u_shifter_full.i_in [31:12] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] 1'0 \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [18:0] }, B={ \u_execute.barrel_shift_in [11] \u_execute.barrel_shift_in [31:12] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [19:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:20] = 12'000000000000
  Optimizing cells in module \arm_core.
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [21:0] 11'00000000000 }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:12] 1'0 }, B=\u_execute.barrel_shift_in [21:0], Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:11]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [10:0] = 11'00000000000
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [8] \u_execute.u_barrel_shift.u_shifter_full.i_in [8:0] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:9] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0], B={ \u_execute.barrel_shift_in [8:0] \u_execute.barrel_shift_in [31:9] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] = \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31]
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [9] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:10] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.barrel_shift_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [19:0] }, B={ \u_execute.barrel_shift_in [9] \u_execute.barrel_shift_in [30:10] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [20:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:21] = { \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] }
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [10] 11'00000000000 \u_execute.u_barrel_shift.u_shifter_full.i_in [31:11] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] 1'0 \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [19:0] }, B={ \u_execute.barrel_shift_in [10] \u_execute.barrel_shift_in [31:11] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [20:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:21] = 11'00000000000
  Optimizing cells in module \arm_core.
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [22:0] 10'0000000000 }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:11] 1'0 }, B=\u_execute.barrel_shift_in [22:0], Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:10]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [9:0] = 10'0000000000
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [7] \u_execute.u_barrel_shift.u_shifter_full.i_in [7:0] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:8] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0], B={ \u_execute.barrel_shift_in [7:0] \u_execute.barrel_shift_in [31:8] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] = \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31]
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [8] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:9] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.barrel_shift_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [20:0] }, B={ \u_execute.barrel_shift_in [8] \u_execute.barrel_shift_in [30:9] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [21:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:22] = { \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] }
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [9] 10'0000000000 \u_execute.u_barrel_shift.u_shifter_full.i_in [31:10] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] 1'0 \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [20:0] }, B={ \u_execute.barrel_shift_in [9] \u_execute.barrel_shift_in [31:10] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [21:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:22] = 10'0000000000
  Optimizing cells in module \arm_core.
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [23:0] 9'000000000 }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:10] 1'0 }, B=\u_execute.barrel_shift_in [23:0], Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:9]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [8:0] = 9'000000000
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [6] \u_execute.u_barrel_shift.u_shifter_full.i_in [6:0] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:7] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0], B={ \u_execute.barrel_shift_in [6:0] \u_execute.barrel_shift_in [31:7] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] = \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31]
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [7] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:8] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.barrel_shift_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [21:0] }, B={ \u_execute.barrel_shift_in [7] \u_execute.barrel_shift_in [30:8] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [22:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:23] = { \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] }
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [8] 9'000000000 \u_execute.u_barrel_shift.u_shifter_full.i_in [31:9] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] 1'0 \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [21:0] }, B={ \u_execute.barrel_shift_in [8] \u_execute.barrel_shift_in [31:9] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [22:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:23] = 9'000000000
  Optimizing cells in module \arm_core.
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [24:0] 8'00000000 }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:9] 1'0 }, B=\u_execute.barrel_shift_in [24:0], Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:8]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [7:0] = 8'00000000
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [5] \u_execute.u_barrel_shift.u_shifter_full.i_in [5:0] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:6] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0], B={ \u_execute.barrel_shift_in [5:0] \u_execute.barrel_shift_in [31:6] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] = \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31]
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [6] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:7] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.barrel_shift_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [22:0] }, B={ \u_execute.barrel_shift_in [6] \u_execute.barrel_shift_in [30:7] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [23:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:24] = { \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] }
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [7] 8'00000000 \u_execute.u_barrel_shift.u_shifter_full.i_in [31:8] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] 1'0 \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [22:0] }, B={ \u_execute.barrel_shift_in [7] \u_execute.barrel_shift_in [31:8] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [23:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:24] = 8'00000000
  Optimizing cells in module \arm_core.
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [25:0] 7'0000000 }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:8] 1'0 }, B=\u_execute.barrel_shift_in [25:0], Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:7]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [6:0] = 7'0000000
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [4] \u_execute.u_barrel_shift.u_shifter_full.i_in [4:0] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:5] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0], B={ \u_execute.barrel_shift_in [4:0] \u_execute.barrel_shift_in [31:5] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] = \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31]
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [5] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:6] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.barrel_shift_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [23:0] }, B={ \u_execute.barrel_shift_in [5] \u_execute.barrel_shift_in [30:6] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [24:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:25] = { \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] }
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [6] 7'0000000 \u_execute.u_barrel_shift.u_shifter_full.i_in [31:7] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] 1'0 \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [23:0] }, B={ \u_execute.barrel_shift_in [6] \u_execute.barrel_shift_in [31:7] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [24:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:25] = 7'0000000
  Optimizing cells in module \arm_core.
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [26:0] 6'000000 }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:7] 1'0 }, B=\u_execute.barrel_shift_in [26:0], Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:6]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [5:0] = 6'000000
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [3] \u_execute.u_barrel_shift.u_shifter_full.i_in [3:0] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:4] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0], B={ \u_execute.barrel_shift_in [3:0] \u_execute.barrel_shift_in [31:4] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] = \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31]
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [4] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:5] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.barrel_shift_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [24:0] }, B={ \u_execute.barrel_shift_in [4] \u_execute.barrel_shift_in [30:5] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [25:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:26] = { \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] }
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [5] 6'000000 \u_execute.u_barrel_shift.u_shifter_full.i_in [31:6] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] 1'0 \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [24:0] }, B={ \u_execute.barrel_shift_in [5] \u_execute.barrel_shift_in [31:6] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [25:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:26] = 6'000000
  Optimizing cells in module \arm_core.
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [27:0] 5'00000 }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:6] 1'0 }, B=\u_execute.barrel_shift_in [27:0], Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:5]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [4:0] = 5'00000
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [2] \u_execute.u_barrel_shift.u_shifter_full.i_in [2:0] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:3] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0], B={ \u_execute.barrel_shift_in [2:0] \u_execute.barrel_shift_in [31:3] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] = \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31]
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [3] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:4] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.barrel_shift_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [25:0] }, B={ \u_execute.barrel_shift_in [3] \u_execute.barrel_shift_in [30:4] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [26:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:27] = { \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] }
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [4] 5'00000 \u_execute.u_barrel_shift.u_shifter_full.i_in [31:5] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] 1'0 \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [25:0] }, B={ \u_execute.barrel_shift_in [4] \u_execute.barrel_shift_in [31:5] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [26:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:27] = 5'00000
  Optimizing cells in module \arm_core.
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [28:0] 4'0000 }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:5] 1'0 }, B=\u_execute.barrel_shift_in [28:0], Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:4]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [3:0] = 4'0000
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [1] \u_execute.u_barrel_shift.u_shifter_full.i_in [1:0] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:2] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A
      New ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:0], B={ \u_execute.barrel_shift_in [1:0] \u_execute.barrel_shift_in [31:2] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A [31:0]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A [32] = \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A [31]
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [2] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:3] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.barrel_shift_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [26:0] }, B={ \u_execute.barrel_shift_in [2] \u_execute.barrel_shift_in [30:3] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A [27:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A [31:28] = { \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] }
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [3] 4'0000 \u_execute.u_barrel_shift.u_shifter_full.i_in [31:4] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] 1'0 \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [26:0] }, B={ \u_execute.barrel_shift_in [3] \u_execute.barrel_shift_in [31:4] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [27:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [31:28] = 4'0000
  Optimizing cells in module \arm_core.
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [29:0] 3'000 }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32:4] 1'0 }, B=\u_execute.barrel_shift_in [29:0], Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A [32:3]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A [2:0] = 3'000
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [0] \u_execute.u_barrel_shift.u_shifter_full.i_in [0] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:1] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A
      New ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A_$mux_Y_A [31:0], B={ \u_execute.barrel_shift_in [0] \u_execute.barrel_shift_in [31:1] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A [31:0]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A [32] = \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A [31]
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [1] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:2] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A [32] \u_execute.barrel_shift_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A_$mux_Y_A [27:0] }, B={ \u_execute.barrel_shift_in [1] \u_execute.barrel_shift_in [30:2] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A [28:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A [31:29] = { \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] }
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [2] 3'000 \u_execute.u_barrel_shift.u_shifter_full.i_in [31:3] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [32] 1'0 \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A_$mux_Y_A [27:0] }, B={ \u_execute.barrel_shift_in [2] \u_execute.barrel_shift_in [31:3] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A [28:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A [31:29] = 3'000
  Optimizing cells in module \arm_core.
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [30:0] 2'00 }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A_$mux_Y_A [32:3] 1'0 }, B=\u_execute.barrel_shift_in [30:0], Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A [32:2]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A [1:0] = 2'00
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A
      New ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A_$mux_Y_A [31:0], B=\u_execute.barrel_shift_in, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A [31:0]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A [32] = \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_3_A [31]
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [0] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31:1] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A [32] \u_execute.barrel_shift_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A_$mux_Y_A [28:0] }, B={ \u_execute.barrel_shift_in [0] \u_execute.barrel_shift_in [30:1] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A [29:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A [31:30] = { \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] }
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [1] 2'00 \u_execute.u_barrel_shift.u_shifter_full.i_in [31:2] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A [32] 1'0 \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A_$mux_Y_A [28:0] }, B={ \u_execute.barrel_shift_in [1] \u_execute.barrel_shift_in [31:2] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A [29:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A [31:30] = 2'00
  Optimizing cells in module \arm_core.
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in 1'0 }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A_$mux_Y_A [32:2] 1'0 }, B=\u_execute.barrel_shift_in, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A [32:1]
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_A [0] = 1'0
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in \u_execute.u_barrel_shift.u_shifter_full.i_in }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_Y
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A [32] \u_execute.barrel_shift_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_A [29:0] }, B={ \u_execute.status_bits_flags [1] \u_execute.barrel_shift_in [30:0] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_Y [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_Y [30:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_Y [31] = \u_execute.barrel_shift_in [31]
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [0] 1'0 \u_execute.u_barrel_shift.u_shifter_full.i_in [31:1] }, Y=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A [32] 1'0 \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A_$mux_Y_A [29:0] }, B={ \u_execute.barrel_shift_in [0] \u_execute.barrel_shift_in [31:1] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A [30:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_1_A [31] = 1'0
  Optimizing cells in module \arm_core.
    Consolidated identical input bits for $mux cell \u_execute.u_barrel_shift.u_shifter_full.i_shift_imm_zero_$mux_S_2:
      Old ports: A=\u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_Y, B={ \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] \u_execute.u_barrel_shift.u_shifter_full.i_in [31] }, Y=\u_execute.u_barrel_shift.u_shifter_full.asr_out
      New ports: A={ \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_Y [32] \u_execute.u_barrel_shift.u_shifter_full.i_carry_in_$mux_B_2_Y [30:0] }, B={ \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] \u_execute.barrel_shift_in [31] }, Y={ \u_execute.u_barrel_shift.u_shifter_full.asr_out [32] \u_execute.u_barrel_shift.u_shifter_full.asr_out [30:0] }
      New connections: \u_execute.u_barrel_shift.u_shifter_full.asr_out [31] = \u_execute.barrel_shift_in [31]
  Optimizing cells in module \arm_core.
Performed a total of 355 changes.

21.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arm_core'.
<suppressed ~57 debug messages>
Removed a total of 19 cells.

21.6. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $mux $flatten\u_decode.$procmux$6183 in front of them:
        u_decode.store_op_$logic_and_B_1_Y_$logic_and_A_Y_$logic_and_A
        u_decode.instruction_execute_$logic_and_B_19_Y_$logic_and_A_Y_$logic_and_A

    Found cells that share an operand and can be merged by moving the $mux u_execute.rn_plus4_$mux_A in front of them:
        u_execute.alu_out_$add_A
        u_execute.rn_$add_A

    Found cells that share an operand and can be merged by moving the $mux $flatten\u_wishbone.\u_wishbone_buf_p2.$procmux$8536 in front of them:
        u_wishbone.u_wishbone_buf_p2.wbuf_used_r_$add_A
        u_wishbone.u_wishbone_buf_p2.wbuf_used_r_$sub_A

    Found cells that share an operand and can be merged by moving the $mux $flatten\u_wishbone.\u_wishbone_buf_p1.$procmux$8536 in front of them:
        u_wishbone.u_wishbone_buf_p1.wbuf_used_r_$add_A
        u_wishbone.u_wishbone_buf_p1.wbuf_used_r_$sub_A

    Found cells that share an operand and can be merged by moving the $mux $flatten\u_wishbone.\u_wishbone_buf_p0.$procmux$8536 in front of them:
        u_wishbone.u_wishbone_buf_p0.wbuf_used_r_$add_A
        u_wishbone.u_wishbone_buf_p0.wbuf_used_r_$sub_A

21.7. Executing OPT_DFF pass (perform DFF optimizations).
Removing never-active SRST on $flatten\u_wishbone.\u_wishbone_buf_p2.$auto$ff.cc:262:slice$9363 ($sdffe) from module arm_core.
Adding EN signal on $flatten\u_execute.$auto$ff.cc:262:slice$9530 ($dffe) from module arm_core (D = \u_execute.ldm_flags_$mux_S_Y [1], Q = \u_execute.status_bits_flags [1]).
Adding SRST signal on $flatten\u_decode.$auto$ff.cc:262:slice$9475 ($dffe) from module arm_core (D = $flatten\u_decode.$2\multiply_function_nxt[1:1], Q = \u_decode.o_multiply_function [1], rval = 1'0).
Adding SRST signal on $flatten\u_decode.$auto$ff.cc:262:slice$9489 ($sdffce) from module arm_core (D = $flatten\u_decode.$9\alu_out_sel_nxt[3:0] [3], Q = \u_decode.o_alu_function [3], rval = 1'0).
Setting constant 0-bit at position 0 on $flatten\u_wishbone.\u_wishbone_buf_p2.$auto$ff.cc:262:slice$9363 ($dffe) from module arm_core.
Setting constant 1-bit at position 0 on $flatten\u_decode.$auto$ff.cc:262:slice$9496 ($dffe) from module arm_core.
Setting constant 0-bit at position 0 on $flatten\u_decode.$auto$ff.cc:262:slice$9051 ($dffe) from module arm_core.
Setting constant 1-bit at position 0 on $flatten\u_wishbone.\u_wishbone_buf_p2.$auto$ff.cc:262:slice$9345 ($dffe) from module arm_core.
Setting constant 1-bit at position 1 on $flatten\u_wishbone.\u_wishbone_buf_p2.$auto$ff.cc:262:slice$9345 ($dffe) from module arm_core.
Setting constant 1-bit at position 2 on $flatten\u_wishbone.\u_wishbone_buf_p2.$auto$ff.cc:262:slice$9345 ($dffe) from module arm_core.
Setting constant 1-bit at position 3 on $flatten\u_wishbone.\u_wishbone_buf_p2.$auto$ff.cc:262:slice$9345 ($dffe) from module arm_core.
Setting constant 1-bit at position 4 on $flatten\u_wishbone.\u_wishbone_buf_p2.$auto$ff.cc:262:slice$9345 ($dffe) from module arm_core.
Setting constant 1-bit at position 5 on $flatten\u_wishbone.\u_wishbone_buf_p2.$auto$ff.cc:262:slice$9345 ($dffe) from module arm_core.
Setting constant 1-bit at position 6 on $flatten\u_wishbone.\u_wishbone_buf_p2.$auto$ff.cc:262:slice$9345 ($dffe) from module arm_core.
Setting constant 1-bit at position 7 on $flatten\u_wishbone.\u_wishbone_buf_p2.$auto$ff.cc:262:slice$9345 ($dffe) from module arm_core.
Setting constant 1-bit at position 8 on $flatten\u_wishbone.\u_wishbone_buf_p2.$auto$ff.cc:262:slice$9345 ($dffe) from module arm_core.
Setting constant 1-bit at position 9 on $flatten\u_wishbone.\u_wishbone_buf_p2.$auto$ff.cc:262:slice$9345 ($dffe) from module arm_core.
Setting constant 1-bit at position 10 on $flatten\u_wishbone.\u_wishbone_buf_p2.$auto$ff.cc:262:slice$9345 ($dffe) from module arm_core.
Setting constant 1-bit at position 11 on $flatten\u_wishbone.\u_wishbone_buf_p2.$auto$ff.cc:262:slice$9345 ($dffe) from module arm_core.
Setting constant 1-bit at position 12 on $flatten\u_wishbone.\u_wishbone_buf_p2.$auto$ff.cc:262:slice$9345 ($dffe) from module arm_core.
Setting constant 1-bit at position 13 on $flatten\u_wishbone.\u_wishbone_buf_p2.$auto$ff.cc:262:slice$9345 ($dffe) from module arm_core.
Setting constant 1-bit at position 14 on $flatten\u_wishbone.\u_wishbone_buf_p2.$auto$ff.cc:262:slice$9345 ($dffe) from module arm_core.
Setting constant 1-bit at position 15 on $flatten\u_wishbone.\u_wishbone_buf_p2.$auto$ff.cc:262:slice$9345 ($dffe) from module arm_core.
Setting constant 1-bit at position 0 on $flatten\u_wishbone.\u_wishbone_buf_p2.$auto$ff.cc:262:slice$9350 ($dffe) from module arm_core.
Setting constant 1-bit at position 1 on $flatten\u_wishbone.\u_wishbone_buf_p2.$auto$ff.cc:262:slice$9350 ($dffe) from module arm_core.
Setting constant 1-bit at position 2 on $flatten\u_wishbone.\u_wishbone_buf_p2.$auto$ff.cc:262:slice$9350 ($dffe) from module arm_core.
Setting constant 1-bit at position 3 on $flatten\u_wishbone.\u_wishbone_buf_p2.$auto$ff.cc:262:slice$9350 ($dffe) from module arm_core.
Setting constant 1-bit at position 4 on $flatten\u_wishbone.\u_wishbone_buf_p2.$auto$ff.cc:262:slice$9350 ($dffe) from module arm_core.
Setting constant 1-bit at position 5 on $flatten\u_wishbone.\u_wishbone_buf_p2.$auto$ff.cc:262:slice$9350 ($dffe) from module arm_core.
Setting constant 1-bit at position 6 on $flatten\u_wishbone.\u_wishbone_buf_p2.$auto$ff.cc:262:slice$9350 ($dffe) from module arm_core.
Setting constant 1-bit at position 7 on $flatten\u_wishbone.\u_wishbone_buf_p2.$auto$ff.cc:262:slice$9350 ($dffe) from module arm_core.
Setting constant 1-bit at position 8 on $flatten\u_wishbone.\u_wishbone_buf_p2.$auto$ff.cc:262:slice$9350 ($dffe) from module arm_core.
Setting constant 1-bit at position 9 on $flatten\u_wishbone.\u_wishbone_buf_p2.$auto$ff.cc:262:slice$9350 ($dffe) from module arm_core.
Setting constant 1-bit at position 10 on $flatten\u_wishbone.\u_wishbone_buf_p2.$auto$ff.cc:262:slice$9350 ($dffe) from module arm_core.
Setting constant 1-bit at position 11 on $flatten\u_wishbone.\u_wishbone_buf_p2.$auto$ff.cc:262:slice$9350 ($dffe) from module arm_core.
Setting constant 1-bit at position 12 on $flatten\u_wishbone.\u_wishbone_buf_p2.$auto$ff.cc:262:slice$9350 ($dffe) from module arm_core.
Setting constant 1-bit at position 13 on $flatten\u_wishbone.\u_wishbone_buf_p2.$auto$ff.cc:262:slice$9350 ($dffe) from module arm_core.
Setting constant 1-bit at position 14 on $flatten\u_wishbone.\u_wishbone_buf_p2.$auto$ff.cc:262:slice$9350 ($dffe) from module arm_core.
Setting constant 1-bit at position 15 on $flatten\u_wishbone.\u_wishbone_buf_p2.$auto$ff.cc:262:slice$9350 ($dffe) from module arm_core.

21.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arm_core..
Removed 11 unused cells and 310 unused wires.
<suppressed ~23 debug messages>

21.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module arm_core.
<suppressed ~116 debug messages>

21.10. Rerunning OPT passes. (Maybe there is more to do..)

21.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \arm_core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~181 debug messages>

21.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \arm_core.
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$10204: { $auto$opt_dff.cc:194:make_patterns_logic$10193 $auto$opt_dff.cc:194:make_patterns_logic$10201 $auto$opt_dff.cc:194:make_patterns_logic$10199 $auto$opt_dff.cc:194:make_patterns_logic$10197 $auto$opt_dff.cc:194:make_patterns_logic$10195 \u_execute.ldm_flags_$logic_or_A_Y $flatten\u_execute.$auto$opt_dff.cc:194:make_patterns_logic$9531 }
    Consolidated identical input bits for $mux cell $auto$opt_share.cc:241:merge_operators$10180:
      Old ports: A=2'11, B=2'01, Y=$auto$rtlil.cc:2464:Mux$10181
      New ports: A=1'1, B=1'0, Y=$auto$rtlil.cc:2464:Mux$10181 [1]
      New connections: $auto$rtlil.cc:2464:Mux$10181 [0] = 1'1
    Consolidated identical input bits for $mux cell $auto$opt_share.cc:241:merge_operators$10185:
      Old ports: A=2'11, B=2'01, Y=$auto$rtlil.cc:2464:Mux$10186
      New ports: A=1'1, B=1'0, Y=$auto$rtlil.cc:2464:Mux$10186 [1]
      New connections: $auto$rtlil.cc:2464:Mux$10186 [0] = 1'1
    Consolidated identical input bits for $mux cell $auto$opt_share.cc:241:merge_operators$10190:
      Old ports: A=2'11, B=2'01, Y=$auto$rtlil.cc:2464:Mux$10191
      New ports: A=1'1, B=1'0, Y=$auto$rtlil.cc:2464:Mux$10191 [1]
      New connections: $auto$rtlil.cc:2464:Mux$10191 [0] = 1'1
    Consolidated identical input bits for $mux cell \u_execute.rn_plus4_$mux_A:
      Old ports: A={ $auto$opt_share.cc:219:merge_operators$10174 \u_execute.i_rn_use_read_$logic_and_A_Y_$mux_S_Y [1:0] }, B={ $auto$opt_share.cc:219:merge_operators$10174 \u_execute.alu_out [1:0] }, Y=\u_execute.rn_plus4_$mux_A_Y
      New ports: A=\u_execute.i_rn_use_read_$logic_and_A_Y_$mux_S_Y [1:0], B=\u_execute.alu_out [1:0], Y=\u_execute.rn_plus4_$mux_A_Y [1:0]
      New connections: \u_execute.rn_plus4_$mux_A_Y [31:2] = $auto$opt_share.cc:219:merge_operators$10174
  Optimizing cells in module \arm_core.
Performed a total of 5 changes.

21.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arm_core'.
Removed a total of 0 cells.

21.14. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $mux u_execute.daddress_plus4_$mux_B in front of them:
        u_execute.o_daddress_$add_A
        u_execute.alu_out_$add_A

21.15. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$ff.cc:262:slice$10214 ($sdffce) from module arm_core (D = $flatten\u_decode.$3\alu_cin_sel_nxt[1:0] [1], Q = \u_decode.o_alu_function [6], rval = 1'0).
Adding SRST signal on $flatten\u_mem.\u_dcache.$auto$ff.cc:262:slice$9390 ($dffe) from module arm_core (D = \u_execute.o_daddress [1:0], Q = \u_mem.u_dcache.wb_address [1:0], rval = 2'00).
Adding SRST signal on $flatten\u_fetch.\u_cache.$auto$ff.cc:262:slice$9209 ($dffe) from module arm_core (D = \u_execute.o_iaddress [1:0], Q = \u_fetch.u_cache.wb_address [1:0], rval = 2'00).
Adding SRST signal on $flatten\u_execute.\u_multiply.$auto$ff.cc:262:slice$8921 ($dffe) from module arm_core (D = \u_execute.u_multiply.count_$add_A_Y [5:1], Q = \u_execute.u_multiply.count [5:1], rval = 5'00000).
Handling D = Q on $flatten\u_decode.$auto$ff.cc:262:slice$9203 ($sdffce) from module arm_core (conecting SRST instead).
Adding SRST signal on $flatten\u_decode.$auto$ff.cc:262:slice$9103 ($dffe) from module arm_core (D = $auto$wreduce.cc:454:run$10047 [0], Q = \u_decode.o_copro_operation [0], rval = 1'0).
Adding SRST signal on $flatten\u_decode.$auto$ff.cc:262:slice$9103 ($dffe) from module arm_core (D = $auto$wreduce.cc:454:run$10032 [1], Q = \u_decode.o_copro_operation [1], rval = 1'0).
Adding SRST signal on $flatten\u_decode.$auto$ff.cc:262:slice$9088 ($dffe) from module arm_core (D = $flatten\u_decode.$4\reg_write_sel_nxt[2:0] [2:1], Q = \u_decode.o_reg_write_sel [2:1], rval = 2'00).
Adding SRST signal on $flatten\u_decode.$auto$ff.cc:262:slice$9083 ($dffe) from module arm_core (D = $auto$wreduce.cc:454:run$10027 [1], Q = \u_decode.o_daddress_sel [1], rval = 1'0).
Adding SRST signal on $flatten\u_decode.$auto$ff.cc:262:slice$9033 ($dffe) from module arm_core (D = \u_decode.fetch_instruction_r_$mux_B_Y [0], Q = \u_decode.saved_current_instruction [0], rval = 1'0).
Adding SRST signal on $flatten\u_coprocessor.$auto$ff.cc:262:slice$9294 ($dffe) from module arm_core (D = \u_decode.abt_status_reg_$mux_B_Y, Q = \u_coprocessor.fault_status, rval = 8'00000000).
Setting constant 0-bit at position 2 on $auto$ff.cc:262:slice$10245 ($dffe) from module arm_core.
Setting constant 0-bit at position 0 on $flatten\u_decode.$auto$ff.cc:262:slice$9203 ($dffe) from module arm_core.
Setting constant 0-bit at position 0 on $flatten\u_decode.$auto$ff.cc:262:slice$9067 ($dffe) from module arm_core.
Setting constant 0-bit at position 2 on $flatten\u_decode.$auto$ff.cc:262:slice$9082 ($dffe) from module arm_core.
Setting constant 0-bit at position 3 on $flatten\u_decode.$auto$ff.cc:262:slice$9082 ($dffe) from module arm_core.
Setting constant 0-bit at position 2 on $flatten\u_decode.$auto$ff.cc:262:slice$9084 ($dffe) from module arm_core.
Setting constant 0-bit at position 1 on $flatten\u_decode.$auto$ff.cc:262:slice$9085 ($dffe) from module arm_core.
Setting constant 0-bit at position 2 on $flatten\u_fetch.\u_cache.$auto$ff.cc:262:slice$9233 ($sdffe) from module arm_core.
Setting constant 0-bit at position 3 on $flatten\u_fetch.\u_cache.$auto$ff.cc:262:slice$9233 ($sdffe) from module arm_core.
Setting constant 0-bit at position 0 on $flatten\u_wishbone.\u_wishbone_buf_p0.$auto$ff.cc:262:slice$9320 ($dffe) from module arm_core.
Setting constant 0-bit at position 1 on $flatten\u_wishbone.\u_wishbone_buf_p0.$auto$ff.cc:262:slice$9320 ($dffe) from module arm_core.
Setting constant 0-bit at position 0 on $flatten\u_wishbone.\u_wishbone_buf_p0.$auto$ff.cc:262:slice$9325 ($dffe) from module arm_core.
Setting constant 0-bit at position 1 on $flatten\u_wishbone.\u_wishbone_buf_p0.$auto$ff.cc:262:slice$9325 ($dffe) from module arm_core.
Setting constant 0-bit at position 0 on $flatten\u_wishbone.\u_wishbone_buf_p1.$auto$ff.cc:262:slice$9320 ($dffe) from module arm_core.
Setting constant 0-bit at position 1 on $flatten\u_wishbone.\u_wishbone_buf_p1.$auto$ff.cc:262:slice$9320 ($dffe) from module arm_core.
Setting constant 0-bit at position 0 on $flatten\u_wishbone.\u_wishbone_buf_p1.$auto$ff.cc:262:slice$9325 ($dffe) from module arm_core.
Setting constant 0-bit at position 1 on $flatten\u_wishbone.\u_wishbone_buf_p1.$auto$ff.cc:262:slice$9325 ($dffe) from module arm_core.

21.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arm_core..
Removed 5 unused cells and 28 unused wires.
<suppressed ~8 debug messages>

21.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module arm_core.
<suppressed ~87 debug messages>

21.18. Rerunning OPT passes. (Maybe there is more to do..)

21.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \arm_core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux \u_execute.i_byte_enable_sel_$eq_A_1_Y_$mux_S_B_$mux_Y.
    dead port 2/2 on $mux \u_execute.i_byte_enable_sel_$eq_A_1_Y_$mux_S_B_$mux_Y.
Removed 2 multiplexer ports.
<suppressed ~177 debug messages>

21.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \arm_core.
    Consolidated identical input bits for $mux cell \u_execute.daddress_plus4_$mux_B:
      Old ports: A={ $auto$opt_share.cc:219:merge_operators$10215 \u_execute.rn_plus4_$mux_A_Y [1:0] }, B={ $auto$opt_share.cc:219:merge_operators$10215 \u_execute.o_daddress [1:0] }, Y=\u_execute.daddress_plus4_$mux_B_Y
      New ports: A=\u_execute.rn_plus4_$mux_A_Y [1:0], B=\u_execute.o_daddress [1:0], Y=\u_execute.daddress_plus4_$mux_B_Y [1:0]
      New connections: \u_execute.daddress_plus4_$mux_B_Y [31:2] = $auto$opt_share.cc:219:merge_operators$10215
    Consolidated identical input bits for $mux cell \u_wishbone.u_wishbone_buf_p0.wbuf_rp_r_$eq_A_1_Y_$mux_S:
      Old ports: A={ \u_wishbone.u_wishbone_buf_p0.wbuf_addr_r0 [31:2] 2'00 }, B={ \u_wishbone.u_wishbone_buf_p0.wbuf_addr_r1 [31:2] 2'00 }, Y=\u_wishbone.u_wishbone_buf_p0.wbuf_rp_r_$eq_A_1_Y_$mux_S_Y
      New ports: A=\u_wishbone.u_wishbone_buf_p0.wbuf_addr_r0 [31:2], B=\u_wishbone.u_wishbone_buf_p0.wbuf_addr_r1 [31:2], Y=\u_wishbone.u_wishbone_buf_p0.wbuf_rp_r_$eq_A_1_Y_$mux_S_Y [31:2]
      New connections: \u_wishbone.u_wishbone_buf_p0.wbuf_rp_r_$eq_A_1_Y_$mux_S_Y [1:0] = 2'00
    Consolidated identical input bits for $mux cell \u_wishbone.u_wishbone_buf_p1.wbuf_rp_r_$eq_A_1_Y_$mux_S:
      Old ports: A={ \u_wishbone.u_wishbone_buf_p1.wbuf_addr_r0 [31:2] 2'00 }, B={ \u_wishbone.u_wishbone_buf_p1.wbuf_addr_r1 [31:2] 2'00 }, Y=\u_wishbone.u_wishbone_buf_p1.wbuf_rp_r_$eq_A_1_Y_$mux_S_Y
      New ports: A=\u_wishbone.u_wishbone_buf_p1.wbuf_addr_r0 [31:2], B=\u_wishbone.u_wishbone_buf_p1.wbuf_addr_r1 [31:2], Y=\u_wishbone.u_wishbone_buf_p1.wbuf_rp_r_$eq_A_1_Y_$mux_S_Y [31:2]
      New connections: \u_wishbone.u_wishbone_buf_p1.wbuf_rp_r_$eq_A_1_Y_$mux_S_Y [1:0] = 2'00
  Optimizing cells in module \arm_core.
    Consolidated identical input bits for $mux cell \u_wishbone.u_wishbone_buf_p0.i_addr_$mux_A:
      Old ports: A={ \u_execute.o_daddress [31:2] 2'00 }, B=\u_wishbone.u_wishbone_buf_p0.wbuf_rp_r_$eq_A_1_Y_$mux_S_Y, Y=\u_wishbone.u_wishbone_buf_p0.i_addr_$mux_A_Y
      New ports: A=\u_execute.o_daddress [31:2], B=\u_wishbone.u_wishbone_buf_p0.wbuf_rp_r_$eq_A_1_Y_$mux_S_Y [31:2], Y=\u_wishbone.u_wishbone_buf_p0.i_addr_$mux_A_Y [31:2]
      New connections: \u_wishbone.u_wishbone_buf_p0.i_addr_$mux_A_Y [1:0] = 2'00
    Consolidated identical input bits for $mux cell \u_wishbone.u_wishbone_buf_p1.i_addr_$mux_A:
      Old ports: A={ \u_execute.o_daddress [31:2] 2'00 }, B=\u_wishbone.u_wishbone_buf_p1.wbuf_rp_r_$eq_A_1_Y_$mux_S_Y, Y=\u_wishbone.u_wishbone_buf_p1.i_addr_$mux_A_Y
      New ports: A=\u_execute.o_daddress [31:2], B=\u_wishbone.u_wishbone_buf_p1.wbuf_rp_r_$eq_A_1_Y_$mux_S_Y [31:2], Y=\u_wishbone.u_wishbone_buf_p1.i_addr_$mux_A_Y [31:2]
      New connections: \u_wishbone.u_wishbone_buf_p1.i_addr_$mux_A_Y [1:0] = 2'00
  Optimizing cells in module \arm_core.
Performed a total of 5 changes.

21.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arm_core'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

21.22. Executing OPT_SHARE pass.

21.23. Executing OPT_DFF pass (perform DFF optimizations).
Removing never-active SRST on $auto$ff.cc:262:slice$10248 ($sdffce) from module arm_core.
Setting constant 0-bit at position 0 on $flatten\u_decode.$auto$ff.cc:262:slice$9204 ($dffe) from module arm_core.

21.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arm_core..
Removed 3 unused cells and 7 unused wires.
<suppressed ~8 debug messages>

21.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module arm_core.
<suppressed ~2 debug messages>

21.26. Rerunning OPT passes. (Maybe there is more to do..)

21.27. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \arm_core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~177 debug messages>

21.28. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \arm_core.
Performed a total of 0 changes.

21.29. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arm_core'.
Removed a total of 0 cells.

21.30. Executing OPT_SHARE pass.

21.31. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $flatten\u_wishbone.$auto$ff.cc:262:slice$9313 ($dffe) from module arm_core (D = \u_wishbone.u_wishbone_buf_p2.i_addr_$mux_A_Y [1:0], Q = \u_wishbone.o_wb_adr [1:0], rval = 2'00).

21.32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arm_core..

21.33. Executing OPT_EXPR pass (perform const folding).
Optimizing module arm_core.

21.34. Rerunning OPT passes. (Maybe there is more to do..)

21.35. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \arm_core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~178 debug messages>

21.36. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \arm_core.
Performed a total of 0 changes.

21.37. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arm_core'.
Removed a total of 0 cells.

21.38. Executing OPT_SHARE pass.

21.39. Executing OPT_DFF pass (perform DFF optimizations).

21.40. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arm_core..

21.41. Executing OPT_EXPR pass (perform const folding).
Optimizing module arm_core.

21.42. Finished OPT passes. (There is nothing left to do.)

22. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \arm_core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~178 debug messages>

23. Executing OPT_EXPR pass (perform const folding).
Optimizing module arm_core.

24. Executing AUTONAME pass.
Renamed 5896 objects in module arm_core (49 iterations).
<suppressed ~1232 debug messages>

25. Printing statistics.

=== arm_core ===

   Number of wires:               4678
   Number of wire bits:          45251
   Number of public wires:        4678
   Number of public wire bits:   45251
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2567
     $add                           30
     $and                           36
     $dff                           15
     $dffe                         168
     $eq                           463
     $gt                             2
     $le                             1
     $logic_and                    403
     $logic_not                    125
     $logic_or                     150
     $lt                             4
     $mem_v2                        16
     $mux                          839
     $ne                            31
     $not                           31
     $or                            74
     $reduce_and                    39
     $reduce_bool                   52
     $reduce_or                     29
     $sdffce                        38
     $sdffe                         17
     $sub                            1
     $xor                            3


1 modules:
  arm_core

26. Executing BLIF backend.
Input BLIF file: temp.blif
--------------------------------------------------------------------
High-level Synthesis Begin
Reading top level module
Reading blif netlist...
  0%|>--------------------------------------------------| Remaining: 27.4ms      2%|=>-------------------------------------------------| Remaining: 24252.8ms      4%|==>------------------------------------------------| Remaining: 14885.4ms      6%|===>-----------------------------------------------| Remaining: 12510.2ms      8%|====>----------------------------------------------| Remaining: 9404.9ms     10%|=====>---------------------------------------------| Remaining: 9927.0ms     12%|======>--------------------------------------------| Remaining: 9234.2ms     14%|=======>-------------------------------------------| Remaining: 8288.4ms     16%|========>------------------------------------------| Remaining: 7634.4ms     18%|=========>-----------------------------------------| Remaining: 6979.1ms     20%|==========>----------------------------------------| Remaining: 6347.9ms     22%|===========>---------------------------------------| Remaining: 5636.8ms     24%|============>--------------------------------------| Remaining: 5043.7ms     26%|=============>-------------------------------------| Remaining: 4540.8ms     28%|==============>------------------------------------| Remaining: 4109.4ms     30%|===============>-----------------------------------| Remaining: 3735.2ms     32%|================>----------------------------------| Remaining: 3407.2ms     34%|=================>---------------------------------| Remaining: 3117.3ms     36%|==================>--------------------------------| Remaining: 2859.4ms     38%|===================>-------------------------------| Remaining: 2628.3ms     40%|====================>------------------------------| Remaining: 2420.1ms     42%|=====================>-----------------------------| Remaining: 2231.7ms     44%|======================>----------------------------| Remaining: 2060.1ms     46%|=======================>---------------------------| Remaining: 1903.6ms     48%|========================>--------------------------| Remaining: 1760.2ms     50%|=========================>-------------------------| Remaining: 1629.0ms     52%|==========================>------------------------| Remaining: 1507.6ms     54%|===========================>-----------------------| Remaining: 1394.8ms     56%|============================>----------------------| Remaining: 1289.1ms     58%|=============================>---------------------| Remaining: 1190.2ms     60%|==============================>--------------------| Remaining: 1097.8ms     62%|===============================>-------------------| Remaining: 1011.3ms     64%|================================>------------------| Remaining: 929.9ms     66%|=================================>-----------------| Remaining: 853.2ms     68%|==================================>----------------| Remaining: 780.9ms     70%|===================================>---------------| Remaining: 712.4ms     72%|====================================>--------------| Remaining: 647.6ms     74%|=====================================>-------------| Remaining: 586.2ms     76%|======================================>------------| Remaining: 527.8ms     78%|=======================================>-----------| Remaining: 472.3ms     80%|========================================>----------| Remaining: 419.4ms     82%|=========================================>---------| Remaining: 368.9ms     84%|==========================================>--------| Remaining: 320.7ms     86%|===========================================>-------| Remaining: 274.6ms     88%|============================================>------| Remaining: 230.4ms     90%|=============================================>-----| Remaining: 188.1ms     92%|==============================================>----| Remaining: 147.5ms     94%|===============================================>---| Remaining: 108.6ms     96%|================================================>--| Remaining: 71.0ms     98%|=================================================>-| Remaining: 34.8ms    100%|==================================================>| Total time: 1710.7ms    
